
teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd3c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800dfe0  0800dfe0  0000efe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e564  0800e564  0000f564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e56c  0800e56c  0000f56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e570  0800e570  0000f570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800e574  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003fc  240001d8  0800e74c  000101d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005d4  0800e74c  000105d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014afc  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b88  00000000  00000000  00024d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df8  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000aa7  00000000  00000000  00028688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389d5  00000000  00000000  0002912f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015dbc  00000000  00000000  00061b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160006  00000000  00000000  000778c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d78c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c08  00000000  00000000  001d790c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001dc514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dfc4 	.word	0x0800dfc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800dfc4 	.word	0x0800dfc4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MX_DMA_Init+0x4c>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	200b      	movs	r0, #11
 8000ace:	f001 f8d2 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f001 f8e9 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	200c      	movs	r0, #12
 8000ade:	f001 f8ca 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f001 f8e1 	bl	8001caa <HAL_NVIC_EnableIRQ>

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58024400 	.word	0x58024400

08000af4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b48      	ldr	r3, [pc, #288]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	4a46      	ldr	r2, [pc, #280]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1a:	4b44      	ldr	r3, [pc, #272]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b40      	ldr	r3, [pc, #256]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b38:	4b3c      	ldr	r3, [pc, #240]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a37      	ldr	r2, [pc, #220]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b64:	4b31      	ldr	r3, [pc, #196]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b74:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <MX_GPIO_Init+0x138>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2110      	movs	r1, #16
 8000b86:	482a      	ldr	r0, [pc, #168]	@ (8000c30 <MX_GPIO_Init+0x13c>)
 8000b88:	f003 fcf8 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ld1_Pin|ld2_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b92:	4828      	ldr	r0, [pc, #160]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000b94:	f003 fcf2 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b9e:	4826      	ldr	r0, [pc, #152]	@ (8000c38 <MX_GPIO_Init+0x144>)
 8000ba0:	f003 fcec 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4824      	ldr	r0, [pc, #144]	@ (8000c3c <MX_GPIO_Init+0x148>)
 8000baa:	f003 fce7 	bl	800457c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481a      	ldr	r0, [pc, #104]	@ (8000c30 <MX_GPIO_Init+0x13c>)
 8000bc6:	f003 fb29 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : ld1_Pin ld2_Pin */
  GPIO_InitStruct.Pin = ld1_Pin|ld2_Pin;
 8000bca:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <MX_GPIO_Init+0x140>)
 8000be4:	f003 fb1a 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8000be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_GPIO_Init+0x144>)
 8000c02:	f003 fb0b 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : ld3_Pin */
  GPIO_InitStruct.Pin = ld3_Pin;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ld3_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	@ (8000c3c <MX_GPIO_Init+0x148>)
 8000c1e:	f003 fafd 	bl	800421c <HAL_GPIO_Init>

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020000 	.word	0x58020000
 8000c34:	58020400 	.word	0x58020400
 8000c38:	58020c00 	.word	0x58020c00
 8000c3c:	58021000 	.word	0x58021000

08000c40 <AD7091R_Init>:
  * @note  Esta função configura o AD7091R para o modo de operação normal.
  * Assume que os pinos CS e CONVST já foram configurados como GPIO Output
  * e o SPI já foi inicializado via STM32CubeMX.
  */
void AD7091R_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
    // 1. Reset do ADC (comando 0xFFFF)
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET); // CS LOW
 8000c46:	2200      	movs	r2, #0
 8000c48:	2110      	movs	r1, #16
 8000c4a:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <AD7091R_Init+0x74>)
 8000c4c:	f003 fc96 	bl	800457c <HAL_GPIO_WritePin>
    uint16_t reset_cmd_tx = AD7091R_CMD_RESET; // O comando é de 16 bits
 8000c50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c54:	80fb      	strh	r3, [r7, #6]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&reset_cmd_tx, 2, HAL_MAX_DELAY); // Envia 2 bytes
 8000c56:	1db9      	adds	r1, r7, #6
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	4816      	ldr	r0, [pc, #88]	@ (8000cb8 <AD7091R_Init+0x78>)
 8000c60:	f006 fc30 	bl	80074c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET); // CS HIGH
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <AD7091R_Init+0x74>)
 8000c6a:	f003 fc87 	bl	800457c <HAL_GPIO_WritePin>
    HAL_Delay(1); // Tempo de recuperação do reset
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 fef6 	bl	8001a60 <HAL_Delay>
    // 2. Configurar para modo normal de operação (comando 0x0020)
    // O AD7091R entra em modo normal de operação após reset ou comando NORMAL.
    // Para leituras contínuas, não é estritamente necessário enviar este comando
    // a cada ciclo de leitura, apenas na inicialização.

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET); // CS LOW
 8000c74:	2200      	movs	r2, #0
 8000c76:	2110      	movs	r1, #16
 8000c78:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <AD7091R_Init+0x74>)
 8000c7a:	f003 fc7f 	bl	800457c <HAL_GPIO_WritePin>
    uint16_t normal_cmd_tx = AD7091R_CMD_NORMAL; // O comando é de 16 bits
 8000c7e:	2320      	movs	r3, #32
 8000c80:	80bb      	strh	r3, [r7, #4]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY); // Envia 2 bytes
 8000c82:	1d39      	adds	r1, r7, #4
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	2202      	movs	r2, #2
 8000c8a:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <AD7091R_Init+0x78>)
 8000c8c:	f006 fc1a 	bl	80074c4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET); // CS HIGH
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <AD7091R_Init+0x74>)
 8000c96:	f003 fc71 	bl	800457c <HAL_GPIO_WritePin>
    HAL_Delay(1); // Pequeno atraso
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fee0 	bl	8001a60 <HAL_Delay>

    // Garante que CONVST está em estado alto inicialmente
    HAL_GPIO_WritePin(AD7091R_CONVST_Port, AD7091R_CONVST_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <AD7091R_Init+0x74>)
 8000ca6:	f003 fc69 	bl	800457c <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58020000 	.word	0x58020000
 8000cb8:	24000274 	.word	0x24000274

08000cbc <AD7091R_ReadData>:
  * Realiza um pulso no pino CONVST para iniciar a conversão
  * e então lê os 16 bits de dados do ADC via SPI, extraindo os 12 bits válidos.
  * @retval Valor digital de 12 bits (0 a 4095). Retorna 0 em caso de erro SPI.
  */
uint16_t AD7091R_ReadData(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
    uint8_t rx_buf[2] = {0}; // Buffer para receber 2 bytes (16 bits)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	803b      	strh	r3, [r7, #0]
    uint16_t adc_raw_16bits; // Valor bruto de 16 bits lido
    uint16_t adc_value_12bits; // Valor final de 12 bits

    // 1. Iniciar conversão (pulso baixo no CONVST)
    HAL_GPIO_WritePin(AD7091R_CONVST_Port, AD7091R_CONVST_Pin, GPIO_PIN_RESET); // CONVST LOW
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2102      	movs	r1, #2
 8000cca:	482f      	ldr	r0, [pc, #188]	@ (8000d88 <AD7091R_ReadData+0xcc>)
 8000ccc:	f003 fc56 	bl	800457c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 fec5 	bl	8001a60 <HAL_Delay>
    HAL_GPIO_WritePin(AD7091R_CONVST_Port, AD7091R_CONVST_Pin, GPIO_PIN_SET);   // CONVST HIGH
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2102      	movs	r1, #2
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <AD7091R_ReadData+0xcc>)
 8000cdc:	f003 fc4e 	bl	800457c <HAL_GPIO_WritePin>

    // 2. Esperar conversão completar
    HAL_Delay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 febd 	bl	8001a60 <HAL_Delay>

    // 3. Ler resultado via SPI
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET); // CS LOW
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2110      	movs	r1, #16
 8000cea:	4827      	ldr	r0, [pc, #156]	@ (8000d88 <AD7091R_ReadData+0xcc>)
 8000cec:	f003 fc46 	bl	800457c <HAL_GPIO_WritePin>

    // Envia 2 bytes dummy (0x00) e recebe 2 bytes do ADC.
    if (HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4824      	ldr	r0, [pc, #144]	@ (8000d8c <AD7091R_ReadData+0xd0>)
 8000cfa:	f006 fdd1 	bl	80078a0 <HAL_SPI_Receive>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d01e      	beq.n	8000d42 <AD7091R_ReadData+0x86>
    {
        // --- INÍCIO DA LÓGICA DO LED DE ERRO (VERMELHO) ---
        HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET); // Garante CS HIGH em caso de erro
 8000d04:	2201      	movs	r2, #1
 8000d06:	2110      	movs	r1, #16
 8000d08:	481f      	ldr	r0, [pc, #124]	@ (8000d88 <AD7091R_ReadData+0xcc>)
 8000d0a:	f003 fc37 	bl	800457c <HAL_GPIO_WritePin>

        // Pisca o LED VERMELHO uma vez para indicar falha
        HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_SET); // Liga LED Vermelho
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d14:	481e      	ldr	r0, [pc, #120]	@ (8000d90 <AD7091R_ReadData+0xd4>)
 8000d16:	f003 fc31 	bl	800457c <HAL_GPIO_WritePin>
        HAL_Delay(100); // Fica ligado por 100ms
 8000d1a:	2064      	movs	r0, #100	@ 0x64
 8000d1c:	f000 fea0 	bl	8001a60 <HAL_Delay>
        HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // Desliga LED Vermelho
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d26:	481a      	ldr	r0, [pc, #104]	@ (8000d90 <AD7091R_ReadData+0xd4>)
 8000d28:	f003 fc28 	bl	800457c <HAL_GPIO_WritePin>

        // Para evitar que o LED VERDE pisque em caso de erro, garantimos que ele esteja desligado
        HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d32:	4817      	ldr	r0, [pc, #92]	@ (8000d90 <AD7091R_ReadData+0xd4>)
 8000d34:	f003 fc22 	bl	800457c <HAL_GPIO_WritePin>

        serialPrint("Erro na comunicacao SPI!\r\n"); // Mensagem de erro para o terminal
 8000d38:	4816      	ldr	r0, [pc, #88]	@ (8000d94 <AD7091R_ReadData+0xd8>)
 8000d3a:	f000 f89f 	bl	8000e7c <serialPrint>
        return 0; // Retorna 0 ou um valor de erro
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e01e      	b.n	8000d80 <AD7091R_ReadData+0xc4>
    }
    // --- FIM DA LÓGICA DO LED DE ERRO (VERMELHO) ---

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET); // CS HIGH
 8000d42:	2201      	movs	r2, #1
 8000d44:	2110      	movs	r1, #16
 8000d46:	4810      	ldr	r0, [pc, #64]	@ (8000d88 <AD7091R_ReadData+0xcc>)
 8000d48:	f003 fc18 	bl	800457c <HAL_GPIO_WritePin>

    // --- INÍCIO DA LÓGICA DO LED DE SUCESSO (VERDE) ---
    // Pisca o LED VERDE uma vez para indicar sucesso
    HAL_GPIO_TogglePin(ld1_GPIO_Port, ld1_Pin);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4810      	ldr	r0, [pc, #64]	@ (8000d90 <AD7091R_ReadData+0xd4>)
 8000d50:	f003 fc2d 	bl	80045ae <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000d54:	2064      	movs	r0, #100	@ 0x64
 8000d56:	f000 fe83 	bl	8001a60 <HAL_Delay>
    /*HAL_GPIO_WritePin(ld1_GPIO_Port, ld1_Pin, GPIO_PIN_SET); // Liga LED Verde
    HAL_Delay(500); // Fica ligado por 100ms
    HAL_GPIO_WritePin(ld1_GPIO_Port, ld1_Pin, GPIO_PIN_RESET); // Desliga LED Verde*/

    // Para evitar que o LED VERMELHO pisque, garantimos que ele esteja desligado
    HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <AD7091R_ReadData+0xd4>)
 8000d62:	f003 fc0b 	bl	800457c <HAL_GPIO_WritePin>
    // --- FIM DA LÓGICA DO LED DE SUCESSO (VERDE) ---

    // Combinar bytes e extrair os 12 bits de dados
    adc_raw_16bits = (uint16_t)(rx_buf[0] << 8) | rx_buf[1];
 8000d66:	783b      	ldrb	r3, [r7, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	787a      	ldrb	r2, [r7, #1]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	80fb      	strh	r3, [r7, #6]
    adc_value_12bits = (adc_raw_16bits >> 2) & 0x0FFF; // Desloca 2 bits para a direita e máscara para 12 bits
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7c:	80bb      	strh	r3, [r7, #4]

    return adc_value_12bits;
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	24000274 	.word	0x24000274
 8000d90:	58020400 	.word	0x58020400
 8000d94:	0800dfe0 	.word	0x0800dfe0

08000d98 <get_filtered_reading>:
/**
  * @brief Obtém leitura filtrada com média móvel
  * @return Valor filtrado de 12 bits.
  */
uint16_t get_filtered_reading(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	70fb      	strb	r3, [r7, #3]
 8000da6:	e00c      	b.n	8000dc2 <get_filtered_reading+0x2a>
        sum += AD7091R_ReadData();
 8000da8:	f7ff ff88 	bl	8000cbc <AD7091R_ReadData>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	607b      	str	r3, [r7, #4]
        HAL_Delay(1); // Pequeno atraso entre amostras
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fe52 	bl	8001a60 <HAL_Delay>
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	70fb      	strb	r3, [r7, #3]
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d9ef      	bls.n	8000da8 <get_filtered_reading+0x10>
    }
    return (uint16_t)(sum / NUM_SAMPLES);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	b29b      	uxth	r3, r3
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <raw_to_voltage_mV>:
  * @brief Converte valor bruto do ADC para tensão em milivolts (mV).
  * @param raw_value Valor digital de 12 bits lido do ADC.
  * @return Tensão em milivolts.
  */
float raw_to_voltage_mV(uint16_t raw_value)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
    // Tensão (mV) = (Valor ADC / Valor Máximo ADC) * VREF (mV)
    return ((float)raw_value / ADC_MAX_VALUE) * VREF_MV;
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dec:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000e0c <raw_to_voltage_mV+0x34>
 8000df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df4:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000e10 <raw_to_voltage_mV+0x38>
 8000df8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	457ff000 	.word	0x457ff000
 8000e10:	451c4000 	.word	0x451c4000

08000e14 <voltage_to_current_mA>:
  * e a corrente (4-20mA).
  * @param voltage_mv Tensão medida em milivolts.
  * @return Corrente calculada em mA.
  */
float voltage_to_current_mA(float voltage_mv)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Y_max = MAX_CURRENT_MA = 20.0F
    // X_min = MIN_VOLTAGE_ADC_MV = 0.0F (assumindo 0V para 4mA na entrada do ADC)
    // X_max = MAX_VOLTAGE_ADC_MV = 2500.0F (assumindo 2.5V para 20mA na entrada do ADC)

    // garanta que a tensão está dentro da faixa esperada para evitar erros.
    if (voltage_mv < MIN_VOLTAGE_ADC_MV) voltage_mv = MIN_VOLTAGE_ADC_MV;
 8000e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	d502      	bpl.n	8000e32 <voltage_to_current_mA+0x1e>
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
    if (voltage_mv > MAX_VOLTAGE_ADC_MV) voltage_mv = MAX_VOLTAGE_ADC_MV;
 8000e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e36:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000e74 <voltage_to_current_mA+0x60>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	dd01      	ble.n	8000e48 <voltage_to_current_mA+0x34>
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <voltage_to_current_mA+0x64>)
 8000e46:	607b      	str	r3, [r7, #4]

    return MIN_CURRENT_MA + ((voltage_mv - MIN_VOLTAGE_ADC_MV) * (MAX_CURRENT_MA - MIN_CURRENT_MA)) / (MAX_VOLTAGE_ADC_MV - MIN_VOLTAGE_ADC_MV);
 8000e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e4c:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000e50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e54:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000e74 <voltage_to_current_mA+0x60>
 8000e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000e60:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000e64:	eeb0 0a67 	vmov.f32	s0, s15
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	451c4000 	.word	0x451c4000
 8000e78:	451c4000 	.word	0x451c4000

08000e7c <serialPrint>:
  * @brief  Função para enviar strings para o terminal serial via UART.
  * @param  message: Ponteiro para a string a ser enviada.
  * @retval None
  */
void serialPrint(const char* message)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fa7b 	bl	8000380 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <serialPrint+0x28>)
 8000e96:	f007 f8ae 	bl	8007ff6 <HAL_UART_Transmit>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	24000300 	.word	0x24000300

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000eae:	f000 f8ff 	bl	80010b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fd43 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f87f 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f7ff fe1b 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f7ff fdf1 	bl	8000aa4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ec2:	f000 fbd7 	bl	8001674 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000ec6:	f000 f925 	bl	8001114 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  AD7091R_Init(); // Inicializa o ADC AD7091R
 8000eca:	f7ff feb9 	bl	8000c40 <AD7091R_Init>
  serialPrint("Sistema de aquisicao de dados 4-20 mA com STM32H753ZI inicializado...\r\n");
 8000ece:	4831      	ldr	r0, [pc, #196]	@ (8000f94 <main+0xec>)
 8000ed0:	f7ff ffd4 	bl	8000e7c <serialPrint>
  serialPrint("Configuracao completa. Aguardando leituras...\r\n");
 8000ed4:	4830      	ldr	r0, [pc, #192]	@ (8000f98 <main+0xf0>)
 8000ed6:	f7ff ffd1 	bl	8000e7c <serialPrint>
  serialPrint("---\r\n");
 8000eda:	4830      	ldr	r0, [pc, #192]	@ (8000f9c <main+0xf4>)
 8000edc:	f7ff ffce 	bl	8000e7c <serialPrint>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1. Obter leitura filtrada do ADC (valor RAW)
    uint16_t raw_value = get_filtered_reading();
 8000ee0:	f7ff ff5a 	bl	8000d98 <get_filtered_reading>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	81fb      	strh	r3, [r7, #14]
    sprintf(writeValue, "RAW ADC (0-%d): %u\r\n", ADC_MAX_VALUE, raw_value);
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000eee:	492c      	ldr	r1, [pc, #176]	@ (8000fa0 <main+0xf8>)
 8000ef0:	482c      	ldr	r0, [pc, #176]	@ (8000fa4 <main+0xfc>)
 8000ef2:	f009 fce7 	bl	800a8c4 <siprintf>
    serialPrint(writeValue);
 8000ef6:	482b      	ldr	r0, [pc, #172]	@ (8000fa4 <main+0xfc>)
 8000ef8:	f7ff ffc0 	bl	8000e7c <serialPrint>

    // 2. Converter o valor RAW para Tensão em mV
    float voltage_mv = raw_to_voltage_mV(raw_value);
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff6a 	bl	8000dd8 <raw_to_voltage_mV>
 8000f04:	ed87 0a02 	vstr	s0, [r7, #8]
    sprintf(writeValue, "Tensao lida (mV): %.2f\r\n", voltage_mv);
 8000f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f10:	ec53 2b17 	vmov	r2, r3, d7
 8000f14:	4924      	ldr	r1, [pc, #144]	@ (8000fa8 <main+0x100>)
 8000f16:	4823      	ldr	r0, [pc, #140]	@ (8000fa4 <main+0xfc>)
 8000f18:	f009 fcd4 	bl	800a8c4 <siprintf>
    serialPrint(writeValue);
 8000f1c:	4821      	ldr	r0, [pc, #132]	@ (8000fa4 <main+0xfc>)
 8000f1e:	f7ff ffad 	bl	8000e7c <serialPrint>

    // 3. Converter a Tensão para Corrente em mA
    float current_ma = voltage_to_current_mA(voltage_mv);
 8000f22:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f26:	f7ff ff75 	bl	8000e14 <voltage_to_current_mA>
 8000f2a:	ed87 0a01 	vstr	s0, [r7, #4]
    sprintf(writeValue, "Corrente Calculada (mA): %.2f\r\n", current_ma);
 8000f2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f36:	ec53 2b17 	vmov	r2, r3, d7
 8000f3a:	491c      	ldr	r1, [pc, #112]	@ (8000fac <main+0x104>)
 8000f3c:	4819      	ldr	r0, [pc, #100]	@ (8000fa4 <main+0xfc>)
 8000f3e:	f009 fcc1 	bl	800a8c4 <siprintf>
    serialPrint(writeValue);
 8000f42:	4818      	ldr	r0, [pc, #96]	@ (8000fa4 <main+0xfc>)
 8000f44:	f7ff ff9a 	bl	8000e7c <serialPrint>

    // 4. Conversão da Corrente para Porcentagem (0-100%)
    float percentage = ((current_ma - MIN_CURRENT_MA) / (MAX_CURRENT_MA - MIN_CURRENT_MA)) * 100.0F;
 8000f48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f54:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000fb0 <main+0x108>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	edc7 7a00 	vstr	s15, [r7]
    sprintf(writeValue, "Valor em Porcentagem (0-100%%): %.2f%%\r\n", percentage);
 8000f68:	edd7 7a00 	vldr	s15, [r7]
 8000f6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f70:	ec53 2b17 	vmov	r2, r3, d7
 8000f74:	490f      	ldr	r1, [pc, #60]	@ (8000fb4 <main+0x10c>)
 8000f76:	480b      	ldr	r0, [pc, #44]	@ (8000fa4 <main+0xfc>)
 8000f78:	f009 fca4 	bl	800a8c4 <siprintf>
    serialPrint(writeValue);
 8000f7c:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <main+0xfc>)
 8000f7e:	f7ff ff7d 	bl	8000e7c <serialPrint>

    serialPrint("---\r\n"); // Separador para as leituras
 8000f82:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <main+0xf4>)
 8000f84:	f7ff ff7a 	bl	8000e7c <serialPrint>
    HAL_Delay(1000); // Espera 1 segundo antes da próxima leitura
 8000f88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f8c:	f000 fd68 	bl	8001a60 <HAL_Delay>
  {
 8000f90:	bf00      	nop
 8000f92:	e7a5      	b.n	8000ee0 <main+0x38>
 8000f94:	0800dffc 	.word	0x0800dffc
 8000f98:	0800e044 	.word	0x0800e044
 8000f9c:	0800e074 	.word	0x0800e074
 8000fa0:	0800e07c 	.word	0x0800e07c
 8000fa4:	240001f4 	.word	0x240001f4
 8000fa8:	0800e094 	.word	0x0800e094
 8000fac:	0800e0b0 	.word	0x0800e0b0
 8000fb0:	42c80000 	.word	0x42c80000
 8000fb4:	0800e0d0 	.word	0x0800e0d0

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09c      	sub	sp, #112	@ 0x70
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	224c      	movs	r2, #76	@ 0x4c
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f009 fce1 	bl	800a98e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2220      	movs	r2, #32
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 fcdb 	bl	800a98e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f003 fb03 	bl	80045e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b31      	ldr	r3, [pc, #196]	@ (80010a8 <SystemClock_Config+0xf0>)
 8000fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe6:	4a30      	ldr	r2, [pc, #192]	@ (80010a8 <SystemClock_Config+0xf0>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fee:	4b2e      	ldr	r3, [pc, #184]	@ (80010a8 <SystemClock_Config+0xf0>)
 8000ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <SystemClock_Config+0xf4>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001000:	4a2a      	ldr	r2, [pc, #168]	@ (80010ac <SystemClock_Config+0xf4>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <SystemClock_Config+0xf4>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001014:	bf00      	nop
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <SystemClock_Config+0xf4>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800101e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001022:	d1f8      	bne.n	8001016 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001028:	2301      	movs	r3, #1
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2340      	movs	r3, #64	@ 0x40
 800102e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 800103c:	230a      	movs	r3, #10
 800103e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800104c:	230c      	movs	r3, #12
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001050:	2302      	movs	r3, #2
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fafb 	bl	8004658 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001068:	f000 f84e 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	233f      	movs	r3, #63	@ 0x3f
 800106e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001080:	2340      	movs	r3, #64	@ 0x40
 8001082:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2101      	movs	r1, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f003 ff3b 	bl	8004f0c <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800109c:	f000 f834 	bl	8001108 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3770      	adds	r7, #112	@ 0x70
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58000400 	.word	0x58000400
 80010ac:	58024800 	.word	0x58024800

080010b0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010c2:	f000 fe0d 	bl	8001ce0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010d2:	231f      	movs	r3, #31
 80010d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010d6:	2387      	movs	r3, #135	@ 0x87
 80010d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010da:	2300      	movs	r3, #0
 80010dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010de:	2300      	movs	r3, #0
 80010e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010e6:	2301      	movs	r3, #1
 80010e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fe2b 	bl	8001d50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010fa:	2004      	movs	r0, #4
 80010fc:	f000 fe08 	bl	8001d10 <HAL_MPU_Enable>

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001118:	4b28      	ldr	r3, [pc, #160]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800111a:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <MX_SPI1_Init+0xac>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001120:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800112e:	2207      	movs	r2, #7
 8001130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001132:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001134:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800113c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001140:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001144:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001148:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800114c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001150:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800116c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001180:	2200      	movs	r2, #0
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001192:	2200      	movs	r2, #0
 8001194:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_SPI1_Init+0xa8>)
 8001198:	2200      	movs	r2, #0
 800119a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <MX_SPI1_Init+0xa8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_SPI1_Init+0xa8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_SPI1_Init+0xa8>)
 80011aa:	f006 f867 	bl	800727c <HAL_SPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80011b4:	f7ff ffa8 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	24000274 	.word	0x24000274
 80011c0:	40013000 	.word	0x40013000

080011c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0bc      	sub	sp, #240	@ 0xf0
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	22c0      	movs	r2, #192	@ 0xc0
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f009 fbd2 	bl	800a98e <memset>
  if(spiHandle->Instance==SPI1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a38      	ldr	r2, [pc, #224]	@ (80012d0 <HAL_SPI_MspInit+0x10c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d168      	bne.n	80012c6 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001200:	2300      	movs	r3, #0
 8001202:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fa0b 	bl	8005624 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001214:	f7ff ff78 	bl	8001108 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001218:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 800121a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800121e:	4a2d      	ldr	r2, [pc, #180]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001224:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001228:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 800122a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800122e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	4a25      	ldr	r2, [pc, #148]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	4a1e      	ldr	r2, [pc, #120]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_SPI_MspInit+0x110>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001272:	2360      	movs	r3, #96	@ 0x60
 8001274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001294:	4619      	mov	r1, r3
 8001296:	4810      	ldr	r0, [pc, #64]	@ (80012d8 <HAL_SPI_MspInit+0x114>)
 8001298:	f002 ffc0 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800129c:	2320      	movs	r3, #32
 800129e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b4:	2305      	movs	r3, #5
 80012b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <HAL_SPI_MspInit+0x118>)
 80012c2:	f002 ffab 	bl	800421c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012c6:	bf00      	nop
 80012c8:	37f0      	adds	r7, #240	@ 0xf0
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013000 	.word	0x40013000
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020000 	.word	0x58020000
 80012dc:	58020400 	.word	0x58020400

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x30>)
 80012e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ec:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <HAL_MspInit+0x30>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_MspInit+0x30>)
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58024400 	.word	0x58024400

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 fb59 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <DMA1_Stream0_IRQHandler+0x10>)
 800137a:	f001 fde9 	bl	8002f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000394 	.word	0x24000394

08001388 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <DMA1_Stream1_IRQHandler+0x10>)
 800138e:	f001 fddf 	bl	8002f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2400040c 	.word	0x2400040c

0800139c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <USART3_IRQHandler+0x10>)
 80013a2:	f006 feb7 	bl	8008114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	24000300 	.word	0x24000300

080013b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_kill>:

int _kill(int pid, int sig)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ca:	f009 fb33 	bl	800aa34 <__errno>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2216      	movs	r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
  return -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_exit>:

void _exit (int status)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffe7 	bl	80013c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <_exit+0x12>

080013f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e00a      	b.n	800141e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001408:	f3af 8000 	nop.w
 800140c:	4601      	mov	r1, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	b2ca      	uxtb	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	dbf0      	blt.n	8001408 <_read+0x12>
  }

  return len;
 8001426:	687b      	ldr	r3, [r7, #4]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001458:	605a      	str	r2, [r3, #4]
  return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_isatty>:

int _isatty(int file)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f009 fab4 	bl	800aa34 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	24080000 	.word	0x24080000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	240002fc 	.word	0x240002fc
 8001500:	240005d8 	.word	0x240005d8

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001508:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <SystemInit+0x114>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	4a42      	ldr	r2, [pc, #264]	@ (8001618 <SystemInit+0x114>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001518:	4b40      	ldr	r3, [pc, #256]	@ (800161c <SystemInit+0x118>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	2b06      	cmp	r3, #6
 8001522:	d807      	bhi.n	8001534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001524:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <SystemInit+0x118>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 030f 	bic.w	r3, r3, #15
 800152c:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <SystemInit+0x118>)
 800152e:	f043 0307 	orr.w	r3, r3, #7
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001534:	4b3a      	ldr	r3, [pc, #232]	@ (8001620 <SystemInit+0x11c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a39      	ldr	r2, [pc, #228]	@ (8001620 <SystemInit+0x11c>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001540:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <SystemInit+0x11c>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001546:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <SystemInit+0x11c>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4935      	ldr	r1, [pc, #212]	@ (8001620 <SystemInit+0x11c>)
 800154c:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <SystemInit+0x120>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001552:	4b32      	ldr	r3, [pc, #200]	@ (800161c <SystemInit+0x118>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155e:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <SystemInit+0x118>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <SystemInit+0x118>)
 8001568:	f043 0307 	orr.w	r3, r3, #7
 800156c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <SystemInit+0x11c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <SystemInit+0x11c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800157a:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <SystemInit+0x11c>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <SystemInit+0x11c>)
 8001582:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <SystemInit+0x124>)
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <SystemInit+0x11c>)
 8001588:	4a28      	ldr	r2, [pc, #160]	@ (800162c <SystemInit+0x128>)
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <SystemInit+0x11c>)
 800158e:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <SystemInit+0x12c>)
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <SystemInit+0x11c>)
 8001594:	2200      	movs	r2, #0
 8001596:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <SystemInit+0x11c>)
 800159a:	4a25      	ldr	r2, [pc, #148]	@ (8001630 <SystemInit+0x12c>)
 800159c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <SystemInit+0x11c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <SystemInit+0x11c>)
 80015a6:	4a22      	ldr	r2, [pc, #136]	@ (8001630 <SystemInit+0x12c>)
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <SystemInit+0x11c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <SystemInit+0x11c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001620 <SystemInit+0x11c>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <SystemInit+0x11c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <SystemInit+0x130>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <SystemInit+0x134>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015ce:	d202      	bcs.n	80015d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <SystemInit+0x138>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <SystemInit+0x11c>)
 80015d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d113      	bne.n	800160c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <SystemInit+0x11c>)
 80015e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <SystemInit+0x11c>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <SystemInit+0x13c>)
 80015f6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015fa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <SystemInit+0x11c>)
 80015fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001602:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <SystemInit+0x11c>)
 8001604:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001608:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	52002000 	.word	0x52002000
 8001620:	58024400 	.word	0x58024400
 8001624:	eaf6ed7f 	.word	0xeaf6ed7f
 8001628:	02020200 	.word	0x02020200
 800162c:	01ff0000 	.word	0x01ff0000
 8001630:	01010280 	.word	0x01010280
 8001634:	5c001000 	.word	0x5c001000
 8001638:	ffff0000 	.word	0xffff0000
 800163c:	51008108 	.word	0x51008108
 8001640:	52004000 	.word	0x52004000

08001644 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <ExitRun0Mode+0x2c>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <ExitRun0Mode+0x2c>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001654:	bf00      	nop
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <ExitRun0Mode+0x2c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f9      	beq.n	8001656 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	58024800 	.word	0x58024800

08001674 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 800167a:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <MX_USART3_UART_Init+0x94>)
 800167c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016bc:	4811      	ldr	r0, [pc, #68]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016be:	f006 fc4a 	bl	8007f56 <HAL_UART_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016c8:	f7ff fd1e 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016cc:	2100      	movs	r1, #0
 80016ce:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016d0:	f008 f932 	bl	8009938 <HAL_UARTEx_SetTxFifoThreshold>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016da:	f7ff fd15 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016de:	2100      	movs	r1, #0
 80016e0:	4808      	ldr	r0, [pc, #32]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016e2:	f008 f967 	bl	80099b4 <HAL_UARTEx_SetRxFifoThreshold>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f7ff fd0c 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <MX_USART3_UART_Init+0x90>)
 80016f2:	f008 f8e8 	bl	80098c6 <HAL_UARTEx_DisableFifoMode>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f7ff fd04 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24000300 	.word	0x24000300
 8001708:	40004800 	.word	0x40004800

0800170c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ba      	sub	sp, #232	@ 0xe8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	22c0      	movs	r2, #192	@ 0xc0
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f009 f92e 	bl	800a98e <memset>
  if(uartHandle->Instance==USART3)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a59      	ldr	r2, [pc, #356]	@ (800189c <HAL_UART_MspInit+0x190>)
 8001738:	4293      	cmp	r3, r2
 800173a:	f040 80aa 	bne.w	8001892 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800173e:	f04f 0202 	mov.w	r2, #2
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4618      	mov	r0, r3
 8001756:	f003 ff65 	bl	8005624 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001760:	f7ff fcd2 	bl	8001108 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001764:	4b4e      	ldr	r3, [pc, #312]	@ (80018a0 <HAL_UART_MspInit+0x194>)
 8001766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800176a:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_UART_MspInit+0x194>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001770:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001774:	4b4a      	ldr	r3, [pc, #296]	@ (80018a0 <HAL_UART_MspInit+0x194>)
 8001776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <HAL_UART_MspInit+0x194>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001788:	4a45      	ldr	r2, [pc, #276]	@ (80018a0 <HAL_UART_MspInit+0x194>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001792:	4b43      	ldr	r3, [pc, #268]	@ (80018a0 <HAL_UART_MspInit+0x194>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ba:	2307      	movs	r3, #7
 80017bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4837      	ldr	r0, [pc, #220]	@ (80018a4 <HAL_UART_MspInit+0x198>)
 80017c8:	f002 fd28 	bl	800421c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80017cc:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017ce:	4a37      	ldr	r2, [pc, #220]	@ (80018ac <HAL_UART_MspInit+0x1a0>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80017d2:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017d4:	222d      	movs	r2, #45	@ 0x2d
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d8:	4b33      	ldr	r3, [pc, #204]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017de:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ec:	4b2e      	ldr	r3, [pc, #184]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f2:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017f8:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b2a      	ldr	r3, [pc, #168]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001804:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800180a:	4827      	ldr	r0, [pc, #156]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 800180c:	f000 fae0 	bl	8001dd0 <HAL_DMA_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001816:	f7ff fc77 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a22      	ldr	r2, [pc, #136]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 800181e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001822:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <HAL_UART_MspInit+0x19c>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 800182a:	4a22      	ldr	r2, [pc, #136]	@ (80018b4 <HAL_UART_MspInit+0x1a8>)
 800182c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001830:	222e      	movs	r2, #46	@ 0x2e
 8001832:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001834:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001836:	2240      	movs	r2, #64	@ 0x40
 8001838:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001846:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001866:	4812      	ldr	r0, [pc, #72]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 8001868:	f000 fab2 	bl	8001dd0 <HAL_DMA_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001872:	f7ff fc49 	bl	8001108 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 800187a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800187c:	4a0c      	ldr	r2, [pc, #48]	@ (80018b0 <HAL_UART_MspInit+0x1a4>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2027      	movs	r0, #39	@ 0x27
 8001888:	f000 f9f5 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800188c:	2027      	movs	r0, #39	@ 0x27
 800188e:	f000 fa0c 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001892:	bf00      	nop
 8001894:	37e8      	adds	r7, #232	@ 0xe8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40004800 	.word	0x40004800
 80018a0:	58024400 	.word	0x58024400
 80018a4:	58020c00 	.word	0x58020c00
 80018a8:	24000394 	.word	0x24000394
 80018ac:	40020010 	.word	0x40020010
 80018b0:	2400040c 	.word	0x2400040c
 80018b4:	40020028 	.word	0x40020028

080018b8 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <_write+0x28>)
 80018d0:	f006 fb91 	bl	8007ff6 <HAL_UART_Transmit>
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24000300 	.word	0x24000300

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001920 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80018e8:	f7ff feac 	bl	8001644 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ec:	f7ff fe0a 	bl	8001504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f009 f893 	bl	800aa40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fac5 	bl	8000ea8 <main>
  bx  lr
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001924:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001928:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800192c:	0800e574 	.word	0x0800e574
  ldr r2, =_sbss
 8001930:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001934:	240005d4 	.word	0x240005d4

08001938 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC3_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001942:	2003      	movs	r0, #3
 8001944:	f000 f98c 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001948:	f003 fc96 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_Init+0x68>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	4913      	ldr	r1, [pc, #76]	@ (80019a8 <HAL_Init+0x6c>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <HAL_Init+0x68>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <HAL_Init+0x6c>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_Init+0x70>)
 800197e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001980:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <HAL_Init+0x74>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f814 	bl	80019b4 <HAL_InitTick>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e002      	b.n	800199c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001996:	f7ff fca3 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	58024400 	.word	0x58024400
 80019a8:	0800e0fc 	.word	0x0800e0fc
 80019ac:	24000004 	.word	0x24000004
 80019b0:	24000000 	.word	0x24000000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_InitTick+0x60>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e021      	b.n	8001a0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <HAL_InitTick+0x64>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_InitTick+0x60>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f971 	bl	8001cc6 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f93b 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <HAL_InitTick+0x68>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2400000c 	.word	0x2400000c
 8001a18:	24000000 	.word	0x24000000
 8001a1c:	24000008 	.word	0x24000008

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2400000c 	.word	0x2400000c
 8001a44:	24000484 	.word	0x24000484

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	24000484 	.word	0x24000484

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2400000c 	.word	0x2400000c

08001aa8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_GetREVID+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	5c001000 	.word	0x5c001000

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x40>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	05fa0000 	.word	0x05fa0000

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff40 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff90 	bl	8001bb4 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5f 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff33 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa4 	bl	8001c1c <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ce4:	f3bf 8f5f 	dmb	sy
}
 8001ce8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <HAL_MPU_Disable+0x28>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <HAL_MPU_Disable+0x28>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_MPU_Disable+0x2c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	e000ed90 	.word	0xe000ed90

08001d10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <HAL_MPU_Enable+0x38>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_MPU_Enable+0x3c>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_MPU_Enable+0x3c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
}
 8001d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d34:	f3bf 8f6f 	isb	sy
}
 8001d38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed90 	.word	0xe000ed90
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d60:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d6c:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7adb      	ldrb	r3, [r3, #11]
 8001d7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7a9b      	ldrb	r3, [r3, #10]
 8001d86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7b5b      	ldrb	r3, [r3, #13]
 8001d8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7b9b      	ldrb	r3, [r3, #14]
 8001d96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7bdb      	ldrb	r3, [r3, #15]
 8001d9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a5b      	ldrb	r3, [r3, #9]
 8001da6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7a1b      	ldrb	r3, [r3, #8]
 8001dae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001db0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dbc:	6113      	str	r3, [r2, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed90 	.word	0xe000ed90

08001dd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fe36 	bl	8001a48 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e316      	b.n	8002416 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a66      	ldr	r2, [pc, #408]	@ (8001f88 <HAL_DMA_Init+0x1b8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d04a      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a65      	ldr	r2, [pc, #404]	@ (8001f8c <HAL_DMA_Init+0x1bc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d045      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a63      	ldr	r2, [pc, #396]	@ (8001f90 <HAL_DMA_Init+0x1c0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d040      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a62      	ldr	r2, [pc, #392]	@ (8001f94 <HAL_DMA_Init+0x1c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d03b      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a60      	ldr	r2, [pc, #384]	@ (8001f98 <HAL_DMA_Init+0x1c8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d036      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8001f9c <HAL_DMA_Init+0x1cc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d031      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa0 <HAL_DMA_Init+0x1d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d02c      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5c      	ldr	r2, [pc, #368]	@ (8001fa4 <HAL_DMA_Init+0x1d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d027      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fa8 <HAL_DMA_Init+0x1d8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d022      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a59      	ldr	r2, [pc, #356]	@ (8001fac <HAL_DMA_Init+0x1dc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d01d      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a57      	ldr	r2, [pc, #348]	@ (8001fb0 <HAL_DMA_Init+0x1e0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d018      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a56      	ldr	r2, [pc, #344]	@ (8001fb4 <HAL_DMA_Init+0x1e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a54      	ldr	r2, [pc, #336]	@ (8001fb8 <HAL_DMA_Init+0x1e8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00e      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a53      	ldr	r2, [pc, #332]	@ (8001fbc <HAL_DMA_Init+0x1ec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a51      	ldr	r2, [pc, #324]	@ (8001fc0 <HAL_DMA_Init+0x1f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d004      	beq.n	8001e88 <HAL_DMA_Init+0xb8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a50      	ldr	r2, [pc, #320]	@ (8001fc4 <HAL_DMA_Init+0x1f4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA_Init+0xbc>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_Init+0xbe>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 813b 	beq.w	800210a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a37      	ldr	r2, [pc, #220]	@ (8001f88 <HAL_DMA_Init+0x1b8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d04a      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a36      	ldr	r2, [pc, #216]	@ (8001f8c <HAL_DMA_Init+0x1bc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d045      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a34      	ldr	r2, [pc, #208]	@ (8001f90 <HAL_DMA_Init+0x1c0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d040      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a33      	ldr	r2, [pc, #204]	@ (8001f94 <HAL_DMA_Init+0x1c4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d03b      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a31      	ldr	r2, [pc, #196]	@ (8001f98 <HAL_DMA_Init+0x1c8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d036      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a30      	ldr	r2, [pc, #192]	@ (8001f9c <HAL_DMA_Init+0x1cc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa0 <HAL_DMA_Init+0x1d0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02c      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa4 <HAL_DMA_Init+0x1d4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d027      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <HAL_DMA_Init+0x1d8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2a      	ldr	r2, [pc, #168]	@ (8001fac <HAL_DMA_Init+0x1dc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d01d      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	@ (8001fb0 <HAL_DMA_Init+0x1e0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_DMA_Init+0x1e4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <HAL_DMA_Init+0x1e8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a24      	ldr	r2, [pc, #144]	@ (8001fbc <HAL_DMA_Init+0x1ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_DMA_Init+0x1f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_DMA_Init+0x174>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	@ (8001fc4 <HAL_DMA_Init+0x1f4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d108      	bne.n	8001f56 <HAL_DMA_Init+0x186>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_DMA_Init+0x196>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f66:	e02f      	b.n	8001fc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f68:	f7ff fd6e 	bl	8001a48 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d928      	bls.n	8001fc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e246      	b.n	8002416 <HAL_DMA_Init+0x646>
 8001f88:	40020010 	.word	0x40020010
 8001f8c:	40020028 	.word	0x40020028
 8001f90:	40020040 	.word	0x40020040
 8001f94:	40020058 	.word	0x40020058
 8001f98:	40020070 	.word	0x40020070
 8001f9c:	40020088 	.word	0x40020088
 8001fa0:	400200a0 	.word	0x400200a0
 8001fa4:	400200b8 	.word	0x400200b8
 8001fa8:	40020410 	.word	0x40020410
 8001fac:	40020428 	.word	0x40020428
 8001fb0:	40020440 	.word	0x40020440
 8001fb4:	40020458 	.word	0x40020458
 8001fb8:	40020470 	.word	0x40020470
 8001fbc:	40020488 	.word	0x40020488
 8001fc0:	400204a0 	.word	0x400204a0
 8001fc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1c8      	bne.n	8001f68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4b83      	ldr	r3, [pc, #524]	@ (80021f0 <HAL_DMA_Init+0x420>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	4313      	orrs	r3, r2
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800202c:	4b71      	ldr	r3, [pc, #452]	@ (80021f4 <HAL_DMA_Init+0x424>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b71      	ldr	r3, [pc, #452]	@ (80021f8 <HAL_DMA_Init+0x428>)
 8002032:	4013      	ands	r3, r2
 8002034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002038:	d328      	bcc.n	800208c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b28      	cmp	r3, #40	@ 0x28
 8002040:	d903      	bls.n	800204a <HAL_DMA_Init+0x27a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b2e      	cmp	r3, #46	@ 0x2e
 8002048:	d917      	bls.n	800207a <HAL_DMA_Init+0x2aa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002050:	d903      	bls.n	800205a <HAL_DMA_Init+0x28a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b42      	cmp	r3, #66	@ 0x42
 8002058:	d90f      	bls.n	800207a <HAL_DMA_Init+0x2aa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b46      	cmp	r3, #70	@ 0x46
 8002060:	d903      	bls.n	800206a <HAL_DMA_Init+0x29a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b48      	cmp	r3, #72	@ 0x48
 8002068:	d907      	bls.n	800207a <HAL_DMA_Init+0x2aa>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002070:	d905      	bls.n	800207e <HAL_DMA_Init+0x2ae>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b52      	cmp	r3, #82	@ 0x52
 8002078:	d801      	bhi.n	800207e <HAL_DMA_Init+0x2ae>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_DMA_Init+0x2b0>
 800207e:	2300      	movs	r3, #0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800208a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d117      	bne.n	80020e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f001 ff1d 	bl	8003f08 <DMA_CheckFifoParam>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e197      	b.n	8002416 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f001 fe58 	bl	8003da4 <DMA_CalcBaseAndBitshift>
 80020f4:	4603      	mov	r3, r0
 80020f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	223f      	movs	r2, #63	@ 0x3f
 8002102:	409a      	lsls	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e0cd      	b.n	80022a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a3b      	ldr	r2, [pc, #236]	@ (80021fc <HAL_DMA_Init+0x42c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d022      	beq.n	800215a <HAL_DMA_Init+0x38a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a39      	ldr	r2, [pc, #228]	@ (8002200 <HAL_DMA_Init+0x430>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01d      	beq.n	800215a <HAL_DMA_Init+0x38a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a38      	ldr	r2, [pc, #224]	@ (8002204 <HAL_DMA_Init+0x434>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d018      	beq.n	800215a <HAL_DMA_Init+0x38a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a36      	ldr	r2, [pc, #216]	@ (8002208 <HAL_DMA_Init+0x438>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_DMA_Init+0x38a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a35      	ldr	r2, [pc, #212]	@ (800220c <HAL_DMA_Init+0x43c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00e      	beq.n	800215a <HAL_DMA_Init+0x38a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a33      	ldr	r2, [pc, #204]	@ (8002210 <HAL_DMA_Init+0x440>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_DMA_Init+0x38a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <HAL_DMA_Init+0x444>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d004      	beq.n	800215a <HAL_DMA_Init+0x38a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a30      	ldr	r2, [pc, #192]	@ (8002218 <HAL_DMA_Init+0x448>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_DMA_Init+0x38e>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_DMA_Init+0x390>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a24      	ldr	r2, [pc, #144]	@ (80021fc <HAL_DMA_Init+0x42c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d021      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a22      	ldr	r2, [pc, #136]	@ (8002200 <HAL_DMA_Init+0x430>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01c      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_DMA_Init+0x434>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d017      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1f      	ldr	r2, [pc, #124]	@ (8002208 <HAL_DMA_Init+0x438>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <HAL_DMA_Init+0x43c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00d      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1c      	ldr	r2, [pc, #112]	@ (8002210 <HAL_DMA_Init+0x440>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d008      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002214 <HAL_DMA_Init+0x444>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_Init+0x3e4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_DMA_Init+0x448>)
 80021b2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_DMA_Init+0x44c>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b40      	cmp	r3, #64	@ 0x40
 80021da:	d021      	beq.n	8002220 <HAL_DMA_Init+0x450>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b80      	cmp	r3, #128	@ 0x80
 80021e2:	d102      	bne.n	80021ea <HAL_DMA_Init+0x41a>
 80021e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021e8:	e01b      	b.n	8002222 <HAL_DMA_Init+0x452>
 80021ea:	2300      	movs	r3, #0
 80021ec:	e019      	b.n	8002222 <HAL_DMA_Init+0x452>
 80021ee:	bf00      	nop
 80021f0:	fe10803f 	.word	0xfe10803f
 80021f4:	5c001000 	.word	0x5c001000
 80021f8:	ffff0000 	.word	0xffff0000
 80021fc:	58025408 	.word	0x58025408
 8002200:	5802541c 	.word	0x5802541c
 8002204:	58025430 	.word	0x58025430
 8002208:	58025444 	.word	0x58025444
 800220c:	58025458 	.word	0x58025458
 8002210:	5802546c 	.word	0x5802546c
 8002214:	58025480 	.word	0x58025480
 8002218:	58025494 	.word	0x58025494
 800221c:	fffe000f 	.word	0xfffe000f
 8002220:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002250:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b6e      	ldr	r3, [pc, #440]	@ (8002420 <HAL_DMA_Init+0x650>)
 8002268:	4413      	add	r3, r2
 800226a:	4a6e      	ldr	r2, [pc, #440]	@ (8002424 <HAL_DMA_Init+0x654>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	009a      	lsls	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f001 fd93 	bl	8003da4 <DMA_CalcBaseAndBitshift>
 800227e:	4603      	mov	r3, r0
 8002280:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2201      	movs	r2, #1
 800228c:	409a      	lsls	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e008      	b.n	80022a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0b7      	b.n	8002416 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002428 <HAL_DMA_Init+0x658>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d072      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5d      	ldr	r2, [pc, #372]	@ (800242c <HAL_DMA_Init+0x65c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d06d      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5c      	ldr	r2, [pc, #368]	@ (8002430 <HAL_DMA_Init+0x660>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d068      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002434 <HAL_DMA_Init+0x664>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d063      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a59      	ldr	r2, [pc, #356]	@ (8002438 <HAL_DMA_Init+0x668>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d05e      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a57      	ldr	r2, [pc, #348]	@ (800243c <HAL_DMA_Init+0x66c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d059      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a56      	ldr	r2, [pc, #344]	@ (8002440 <HAL_DMA_Init+0x670>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d054      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a54      	ldr	r2, [pc, #336]	@ (8002444 <HAL_DMA_Init+0x674>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d04f      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a53      	ldr	r2, [pc, #332]	@ (8002448 <HAL_DMA_Init+0x678>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d04a      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a51      	ldr	r2, [pc, #324]	@ (800244c <HAL_DMA_Init+0x67c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d045      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a50      	ldr	r2, [pc, #320]	@ (8002450 <HAL_DMA_Init+0x680>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d040      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a4e      	ldr	r2, [pc, #312]	@ (8002454 <HAL_DMA_Init+0x684>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d03b      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a4d      	ldr	r2, [pc, #308]	@ (8002458 <HAL_DMA_Init+0x688>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d036      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4b      	ldr	r2, [pc, #300]	@ (800245c <HAL_DMA_Init+0x68c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a4a      	ldr	r2, [pc, #296]	@ (8002460 <HAL_DMA_Init+0x690>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d02c      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a48      	ldr	r2, [pc, #288]	@ (8002464 <HAL_DMA_Init+0x694>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d027      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a47      	ldr	r2, [pc, #284]	@ (8002468 <HAL_DMA_Init+0x698>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a45      	ldr	r2, [pc, #276]	@ (800246c <HAL_DMA_Init+0x69c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01d      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a44      	ldr	r2, [pc, #272]	@ (8002470 <HAL_DMA_Init+0x6a0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d018      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a42      	ldr	r2, [pc, #264]	@ (8002474 <HAL_DMA_Init+0x6a4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a41      	ldr	r2, [pc, #260]	@ (8002478 <HAL_DMA_Init+0x6a8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3f      	ldr	r2, [pc, #252]	@ (800247c <HAL_DMA_Init+0x6ac>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a3e      	ldr	r2, [pc, #248]	@ (8002480 <HAL_DMA_Init+0x6b0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_DMA_Init+0x5c6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3c      	ldr	r2, [pc, #240]	@ (8002484 <HAL_DMA_Init+0x6b4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_DMA_Init+0x5ca>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_DMA_Init+0x5cc>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d032      	beq.n	8002406 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f001 fe2d 	bl	8004000 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d102      	bne.n	80023b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <HAL_DMA_Init+0x624>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d80c      	bhi.n	80023f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f001 feaa 	bl	8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	e008      	b.n	8002406 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	a7fdabf8 	.word	0xa7fdabf8
 8002424:	cccccccd 	.word	0xcccccccd
 8002428:	40020010 	.word	0x40020010
 800242c:	40020028 	.word	0x40020028
 8002430:	40020040 	.word	0x40020040
 8002434:	40020058 	.word	0x40020058
 8002438:	40020070 	.word	0x40020070
 800243c:	40020088 	.word	0x40020088
 8002440:	400200a0 	.word	0x400200a0
 8002444:	400200b8 	.word	0x400200b8
 8002448:	40020410 	.word	0x40020410
 800244c:	40020428 	.word	0x40020428
 8002450:	40020440 	.word	0x40020440
 8002454:	40020458 	.word	0x40020458
 8002458:	40020470 	.word	0x40020470
 800245c:	40020488 	.word	0x40020488
 8002460:	400204a0 	.word	0x400204a0
 8002464:	400204b8 	.word	0x400204b8
 8002468:	58025408 	.word	0x58025408
 800246c:	5802541c 	.word	0x5802541c
 8002470:	58025430 	.word	0x58025430
 8002474:	58025444 	.word	0x58025444
 8002478:	58025458 	.word	0x58025458
 800247c:	5802546c 	.word	0x5802546c
 8002480:	58025480 	.word	0x58025480
 8002484:	58025494 	.word	0x58025494

08002488 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff fada 	bl	8001a48 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e2dc      	b.n	8002a5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d008      	beq.n	80024be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e2cd      	b.n	8002a5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a76      	ldr	r2, [pc, #472]	@ (800269c <HAL_DMA_Abort+0x214>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d04a      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a74      	ldr	r2, [pc, #464]	@ (80026a0 <HAL_DMA_Abort+0x218>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d045      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a73      	ldr	r2, [pc, #460]	@ (80026a4 <HAL_DMA_Abort+0x21c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d040      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a71      	ldr	r2, [pc, #452]	@ (80026a8 <HAL_DMA_Abort+0x220>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d03b      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a70      	ldr	r2, [pc, #448]	@ (80026ac <HAL_DMA_Abort+0x224>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d036      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6e      	ldr	r2, [pc, #440]	@ (80026b0 <HAL_DMA_Abort+0x228>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d031      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a6d      	ldr	r2, [pc, #436]	@ (80026b4 <HAL_DMA_Abort+0x22c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d02c      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6b      	ldr	r2, [pc, #428]	@ (80026b8 <HAL_DMA_Abort+0x230>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d027      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6a      	ldr	r2, [pc, #424]	@ (80026bc <HAL_DMA_Abort+0x234>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	@ (80026c0 <HAL_DMA_Abort+0x238>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a67      	ldr	r2, [pc, #412]	@ (80026c4 <HAL_DMA_Abort+0x23c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a65      	ldr	r2, [pc, #404]	@ (80026c8 <HAL_DMA_Abort+0x240>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a64      	ldr	r2, [pc, #400]	@ (80026cc <HAL_DMA_Abort+0x244>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a62      	ldr	r2, [pc, #392]	@ (80026d0 <HAL_DMA_Abort+0x248>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a61      	ldr	r2, [pc, #388]	@ (80026d4 <HAL_DMA_Abort+0x24c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Abort+0xd6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a5f      	ldr	r2, [pc, #380]	@ (80026d8 <HAL_DMA_Abort+0x250>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Abort+0xda>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_DMA_Abort+0xdc>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 021e 	bic.w	r2, r2, #30
 8002576:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002586:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e00a      	b.n	80025a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 020e 	bic.w	r2, r2, #14
 800259e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a3c      	ldr	r2, [pc, #240]	@ (800269c <HAL_DMA_Abort+0x214>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d072      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3a      	ldr	r2, [pc, #232]	@ (80026a0 <HAL_DMA_Abort+0x218>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d06d      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a39      	ldr	r2, [pc, #228]	@ (80026a4 <HAL_DMA_Abort+0x21c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d068      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a37      	ldr	r2, [pc, #220]	@ (80026a8 <HAL_DMA_Abort+0x220>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d063      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a36      	ldr	r2, [pc, #216]	@ (80026ac <HAL_DMA_Abort+0x224>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d05e      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a34      	ldr	r2, [pc, #208]	@ (80026b0 <HAL_DMA_Abort+0x228>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d059      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a33      	ldr	r2, [pc, #204]	@ (80026b4 <HAL_DMA_Abort+0x22c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d054      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a31      	ldr	r2, [pc, #196]	@ (80026b8 <HAL_DMA_Abort+0x230>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d04f      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <HAL_DMA_Abort+0x234>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04a      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2e      	ldr	r2, [pc, #184]	@ (80026c0 <HAL_DMA_Abort+0x238>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d045      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <HAL_DMA_Abort+0x23c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d040      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2b      	ldr	r2, [pc, #172]	@ (80026c8 <HAL_DMA_Abort+0x240>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d03b      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2a      	ldr	r2, [pc, #168]	@ (80026cc <HAL_DMA_Abort+0x244>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d036      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a28      	ldr	r2, [pc, #160]	@ (80026d0 <HAL_DMA_Abort+0x248>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d031      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a27      	ldr	r2, [pc, #156]	@ (80026d4 <HAL_DMA_Abort+0x24c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d02c      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	@ (80026d8 <HAL_DMA_Abort+0x250>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d027      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <HAL_DMA_Abort+0x254>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d022      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a22      	ldr	r2, [pc, #136]	@ (80026e0 <HAL_DMA_Abort+0x258>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01d      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a21      	ldr	r2, [pc, #132]	@ (80026e4 <HAL_DMA_Abort+0x25c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d018      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <HAL_DMA_Abort+0x260>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1e      	ldr	r2, [pc, #120]	@ (80026ec <HAL_DMA_Abort+0x264>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00e      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <HAL_DMA_Abort+0x268>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d009      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <HAL_DMA_Abort+0x26c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_DMA_Abort+0x20e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	@ (80026f8 <HAL_DMA_Abort+0x270>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d132      	bne.n	80026fc <HAL_DMA_Abort+0x274>
 8002696:	2301      	movs	r3, #1
 8002698:	e031      	b.n	80026fe <HAL_DMA_Abort+0x276>
 800269a:	bf00      	nop
 800269c:	40020010 	.word	0x40020010
 80026a0:	40020028 	.word	0x40020028
 80026a4:	40020040 	.word	0x40020040
 80026a8:	40020058 	.word	0x40020058
 80026ac:	40020070 	.word	0x40020070
 80026b0:	40020088 	.word	0x40020088
 80026b4:	400200a0 	.word	0x400200a0
 80026b8:	400200b8 	.word	0x400200b8
 80026bc:	40020410 	.word	0x40020410
 80026c0:	40020428 	.word	0x40020428
 80026c4:	40020440 	.word	0x40020440
 80026c8:	40020458 	.word	0x40020458
 80026cc:	40020470 	.word	0x40020470
 80026d0:	40020488 	.word	0x40020488
 80026d4:	400204a0 	.word	0x400204a0
 80026d8:	400204b8 	.word	0x400204b8
 80026dc:	58025408 	.word	0x58025408
 80026e0:	5802541c 	.word	0x5802541c
 80026e4:	58025430 	.word	0x58025430
 80026e8:	58025444 	.word	0x58025444
 80026ec:	58025458 	.word	0x58025458
 80026f0:	5802546c 	.word	0x5802546c
 80026f4:	58025480 	.word	0x58025480
 80026f8:	58025494 	.word	0x58025494
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002710:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6d      	ldr	r2, [pc, #436]	@ (80028cc <HAL_DMA_Abort+0x444>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d04a      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6b      	ldr	r2, [pc, #428]	@ (80028d0 <HAL_DMA_Abort+0x448>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d045      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6a      	ldr	r2, [pc, #424]	@ (80028d4 <HAL_DMA_Abort+0x44c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d040      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a68      	ldr	r2, [pc, #416]	@ (80028d8 <HAL_DMA_Abort+0x450>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d03b      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a67      	ldr	r2, [pc, #412]	@ (80028dc <HAL_DMA_Abort+0x454>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d036      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_DMA_Abort+0x458>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a64      	ldr	r2, [pc, #400]	@ (80028e4 <HAL_DMA_Abort+0x45c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d02c      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a62      	ldr	r2, [pc, #392]	@ (80028e8 <HAL_DMA_Abort+0x460>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d027      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a61      	ldr	r2, [pc, #388]	@ (80028ec <HAL_DMA_Abort+0x464>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5f      	ldr	r2, [pc, #380]	@ (80028f0 <HAL_DMA_Abort+0x468>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5e      	ldr	r2, [pc, #376]	@ (80028f4 <HAL_DMA_Abort+0x46c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d018      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5c      	ldr	r2, [pc, #368]	@ (80028f8 <HAL_DMA_Abort+0x470>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5b      	ldr	r2, [pc, #364]	@ (80028fc <HAL_DMA_Abort+0x474>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a59      	ldr	r2, [pc, #356]	@ (8002900 <HAL_DMA_Abort+0x478>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_DMA_Abort+0x47c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_Abort+0x32a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a56      	ldr	r2, [pc, #344]	@ (8002908 <HAL_DMA_Abort+0x480>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <HAL_DMA_Abort+0x33c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e007      	b.n	80027d4 <HAL_DMA_Abort+0x34c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027d4:	e013      	b.n	80027fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d6:	f7ff f937 	bl	8001a48 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d90c      	bls.n	80027fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e12d      	b.n	8002a5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2f      	ldr	r2, [pc, #188]	@ (80028cc <HAL_DMA_Abort+0x444>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d04a      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2d      	ldr	r2, [pc, #180]	@ (80028d0 <HAL_DMA_Abort+0x448>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d045      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2c      	ldr	r2, [pc, #176]	@ (80028d4 <HAL_DMA_Abort+0x44c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d040      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2a      	ldr	r2, [pc, #168]	@ (80028d8 <HAL_DMA_Abort+0x450>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d03b      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a29      	ldr	r2, [pc, #164]	@ (80028dc <HAL_DMA_Abort+0x454>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d036      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a27      	ldr	r2, [pc, #156]	@ (80028e0 <HAL_DMA_Abort+0x458>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d031      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a26      	ldr	r2, [pc, #152]	@ (80028e4 <HAL_DMA_Abort+0x45c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d02c      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a24      	ldr	r2, [pc, #144]	@ (80028e8 <HAL_DMA_Abort+0x460>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d027      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_DMA_Abort+0x464>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d022      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a21      	ldr	r2, [pc, #132]	@ (80028f0 <HAL_DMA_Abort+0x468>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01d      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a20      	ldr	r2, [pc, #128]	@ (80028f4 <HAL_DMA_Abort+0x46c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d018      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <HAL_DMA_Abort+0x470>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <HAL_DMA_Abort+0x474>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1b      	ldr	r2, [pc, #108]	@ (8002900 <HAL_DMA_Abort+0x478>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1a      	ldr	r2, [pc, #104]	@ (8002904 <HAL_DMA_Abort+0x47c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_DMA_Abort+0x422>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a18      	ldr	r2, [pc, #96]	@ (8002908 <HAL_DMA_Abort+0x480>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_DMA_Abort+0x426>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_Abort+0x428>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d02b      	beq.n	800290c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	223f      	movs	r2, #63	@ 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	e02a      	b.n	8002922 <HAL_DMA_Abort+0x49a>
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002910:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2201      	movs	r2, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a4f      	ldr	r2, [pc, #316]	@ (8002a64 <HAL_DMA_Abort+0x5dc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d072      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_DMA_Abort+0x5e0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d06d      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a6c <HAL_DMA_Abort+0x5e4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d068      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4a      	ldr	r2, [pc, #296]	@ (8002a70 <HAL_DMA_Abort+0x5e8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d063      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a49      	ldr	r2, [pc, #292]	@ (8002a74 <HAL_DMA_Abort+0x5ec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d05e      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a47      	ldr	r2, [pc, #284]	@ (8002a78 <HAL_DMA_Abort+0x5f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d059      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a46      	ldr	r2, [pc, #280]	@ (8002a7c <HAL_DMA_Abort+0x5f4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d054      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a44      	ldr	r2, [pc, #272]	@ (8002a80 <HAL_DMA_Abort+0x5f8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d04f      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a43      	ldr	r2, [pc, #268]	@ (8002a84 <HAL_DMA_Abort+0x5fc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d04a      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a41      	ldr	r2, [pc, #260]	@ (8002a88 <HAL_DMA_Abort+0x600>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d045      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a40      	ldr	r2, [pc, #256]	@ (8002a8c <HAL_DMA_Abort+0x604>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d040      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3e      	ldr	r2, [pc, #248]	@ (8002a90 <HAL_DMA_Abort+0x608>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d03b      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a94 <HAL_DMA_Abort+0x60c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d036      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002a98 <HAL_DMA_Abort+0x610>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d031      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3a      	ldr	r2, [pc, #232]	@ (8002a9c <HAL_DMA_Abort+0x614>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d02c      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a38      	ldr	r2, [pc, #224]	@ (8002aa0 <HAL_DMA_Abort+0x618>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d027      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a37      	ldr	r2, [pc, #220]	@ (8002aa4 <HAL_DMA_Abort+0x61c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d022      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a35      	ldr	r2, [pc, #212]	@ (8002aa8 <HAL_DMA_Abort+0x620>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01d      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_DMA_Abort+0x624>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d018      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a32      	ldr	r2, [pc, #200]	@ (8002ab0 <HAL_DMA_Abort+0x628>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a31      	ldr	r2, [pc, #196]	@ (8002ab4 <HAL_DMA_Abort+0x62c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00e      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab8 <HAL_DMA_Abort+0x630>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d009      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <HAL_DMA_Abort+0x634>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_DMA_Abort+0x58a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <HAL_DMA_Abort+0x638>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Abort+0x58e>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_Abort+0x590>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40020010 	.word	0x40020010
 8002a68:	40020028 	.word	0x40020028
 8002a6c:	40020040 	.word	0x40020040
 8002a70:	40020058 	.word	0x40020058
 8002a74:	40020070 	.word	0x40020070
 8002a78:	40020088 	.word	0x40020088
 8002a7c:	400200a0 	.word	0x400200a0
 8002a80:	400200b8 	.word	0x400200b8
 8002a84:	40020410 	.word	0x40020410
 8002a88:	40020428 	.word	0x40020428
 8002a8c:	40020440 	.word	0x40020440
 8002a90:	40020458 	.word	0x40020458
 8002a94:	40020470 	.word	0x40020470
 8002a98:	40020488 	.word	0x40020488
 8002a9c:	400204a0 	.word	0x400204a0
 8002aa0:	400204b8 	.word	0x400204b8
 8002aa4:	58025408 	.word	0x58025408
 8002aa8:	5802541c 	.word	0x5802541c
 8002aac:	58025430 	.word	0x58025430
 8002ab0:	58025444 	.word	0x58025444
 8002ab4:	58025458 	.word	0x58025458
 8002ab8:	5802546c 	.word	0x5802546c
 8002abc:	58025480 	.word	0x58025480
 8002ac0:	58025494 	.word	0x58025494

08002ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e237      	b.n	8002f46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d004      	beq.n	8002aec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2280      	movs	r2, #128	@ 0x80
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e22c      	b.n	8002f46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5c      	ldr	r2, [pc, #368]	@ (8002c64 <HAL_DMA_Abort_IT+0x1a0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d04a      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5b      	ldr	r2, [pc, #364]	@ (8002c68 <HAL_DMA_Abort_IT+0x1a4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d045      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a59      	ldr	r2, [pc, #356]	@ (8002c6c <HAL_DMA_Abort_IT+0x1a8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d040      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <HAL_DMA_Abort_IT+0x1ac>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d03b      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a56      	ldr	r2, [pc, #344]	@ (8002c74 <HAL_DMA_Abort_IT+0x1b0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d036      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a55      	ldr	r2, [pc, #340]	@ (8002c78 <HAL_DMA_Abort_IT+0x1b4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d031      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a53      	ldr	r2, [pc, #332]	@ (8002c7c <HAL_DMA_Abort_IT+0x1b8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d02c      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a52      	ldr	r2, [pc, #328]	@ (8002c80 <HAL_DMA_Abort_IT+0x1bc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d027      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a50      	ldr	r2, [pc, #320]	@ (8002c84 <HAL_DMA_Abort_IT+0x1c0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d022      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c88 <HAL_DMA_Abort_IT+0x1c4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d01d      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4d      	ldr	r2, [pc, #308]	@ (8002c8c <HAL_DMA_Abort_IT+0x1c8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d018      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c90 <HAL_DMA_Abort_IT+0x1cc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_DMA_Abort_IT+0x1d0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a49      	ldr	r2, [pc, #292]	@ (8002c98 <HAL_DMA_Abort_IT+0x1d4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a47      	ldr	r2, [pc, #284]	@ (8002c9c <HAL_DMA_Abort_IT+0x1d8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xc8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a46      	ldr	r2, [pc, #280]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1dc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Abort_IT+0xcc>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_Abort_IT+0xce>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8086 	beq.w	8002ca4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c64 <HAL_DMA_Abort_IT+0x1a0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d04a      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2e      	ldr	r2, [pc, #184]	@ (8002c68 <HAL_DMA_Abort_IT+0x1a4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d045      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c6c <HAL_DMA_Abort_IT+0x1a8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d040      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <HAL_DMA_Abort_IT+0x1ac>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d03b      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_DMA_Abort_IT+0x1b0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d036      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a28      	ldr	r2, [pc, #160]	@ (8002c78 <HAL_DMA_Abort_IT+0x1b4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d031      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a26      	ldr	r2, [pc, #152]	@ (8002c7c <HAL_DMA_Abort_IT+0x1b8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02c      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a25      	ldr	r2, [pc, #148]	@ (8002c80 <HAL_DMA_Abort_IT+0x1bc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d027      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_DMA_Abort_IT+0x1c0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d022      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	@ (8002c88 <HAL_DMA_Abort_IT+0x1c4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01d      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	@ (8002c8c <HAL_DMA_Abort_IT+0x1c8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_DMA_Abort_IT+0x1cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <HAL_DMA_Abort_IT+0x1d0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <HAL_DMA_Abort_IT+0x1d4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <HAL_DMA_Abort_IT+0x1d8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x17c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1dc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <HAL_DMA_Abort_IT+0x18e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e178      	b.n	8002f44 <HAL_DMA_Abort_IT+0x480>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e16f      	b.n	8002f44 <HAL_DMA_Abort_IT+0x480>
 8002c64:	40020010 	.word	0x40020010
 8002c68:	40020028 	.word	0x40020028
 8002c6c:	40020040 	.word	0x40020040
 8002c70:	40020058 	.word	0x40020058
 8002c74:	40020070 	.word	0x40020070
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	400200a0 	.word	0x400200a0
 8002c80:	400200b8 	.word	0x400200b8
 8002c84:	40020410 	.word	0x40020410
 8002c88:	40020428 	.word	0x40020428
 8002c8c:	40020440 	.word	0x40020440
 8002c90:	40020458 	.word	0x40020458
 8002c94:	40020470 	.word	0x40020470
 8002c98:	40020488 	.word	0x40020488
 8002c9c:	400204a0 	.word	0x400204a0
 8002ca0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020e 	bic.w	r2, r2, #14
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6c      	ldr	r2, [pc, #432]	@ (8002e6c <HAL_DMA_Abort_IT+0x3a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04a      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8002e70 <HAL_DMA_Abort_IT+0x3ac>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d045      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <HAL_DMA_Abort_IT+0x3b0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d040      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a68      	ldr	r2, [pc, #416]	@ (8002e78 <HAL_DMA_Abort_IT+0x3b4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d03b      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a66      	ldr	r2, [pc, #408]	@ (8002e7c <HAL_DMA_Abort_IT+0x3b8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d036      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a65      	ldr	r2, [pc, #404]	@ (8002e80 <HAL_DMA_Abort_IT+0x3bc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d031      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a63      	ldr	r2, [pc, #396]	@ (8002e84 <HAL_DMA_Abort_IT+0x3c0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02c      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a62      	ldr	r2, [pc, #392]	@ (8002e88 <HAL_DMA_Abort_IT+0x3c4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d027      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a60      	ldr	r2, [pc, #384]	@ (8002e8c <HAL_DMA_Abort_IT+0x3c8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5f      	ldr	r2, [pc, #380]	@ (8002e90 <HAL_DMA_Abort_IT+0x3cc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01d      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e94 <HAL_DMA_Abort_IT+0x3d0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5c      	ldr	r2, [pc, #368]	@ (8002e98 <HAL_DMA_Abort_IT+0x3d4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5a      	ldr	r2, [pc, #360]	@ (8002e9c <HAL_DMA_Abort_IT+0x3d8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a59      	ldr	r2, [pc, #356]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3dc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3e0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x290>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a56      	ldr	r2, [pc, #344]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3e4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d108      	bne.n	8002d66 <HAL_DMA_Abort_IT+0x2a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e007      	b.n	8002d76 <HAL_DMA_Abort_IT+0x2b2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e6c <HAL_DMA_Abort_IT+0x3a8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d072      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3a      	ldr	r2, [pc, #232]	@ (8002e70 <HAL_DMA_Abort_IT+0x3ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d06d      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a39      	ldr	r2, [pc, #228]	@ (8002e74 <HAL_DMA_Abort_IT+0x3b0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d068      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a37      	ldr	r2, [pc, #220]	@ (8002e78 <HAL_DMA_Abort_IT+0x3b4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d063      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a36      	ldr	r2, [pc, #216]	@ (8002e7c <HAL_DMA_Abort_IT+0x3b8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d05e      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a34      	ldr	r2, [pc, #208]	@ (8002e80 <HAL_DMA_Abort_IT+0x3bc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d059      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a33      	ldr	r2, [pc, #204]	@ (8002e84 <HAL_DMA_Abort_IT+0x3c0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d054      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a31      	ldr	r2, [pc, #196]	@ (8002e88 <HAL_DMA_Abort_IT+0x3c4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d04f      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a30      	ldr	r2, [pc, #192]	@ (8002e8c <HAL_DMA_Abort_IT+0x3c8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d04a      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8002e90 <HAL_DMA_Abort_IT+0x3cc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d045      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2d      	ldr	r2, [pc, #180]	@ (8002e94 <HAL_DMA_Abort_IT+0x3d0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d040      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2b      	ldr	r2, [pc, #172]	@ (8002e98 <HAL_DMA_Abort_IT+0x3d4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d03b      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e9c <HAL_DMA_Abort_IT+0x3d8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d036      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3dc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a27      	ldr	r2, [pc, #156]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3e0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d02c      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a25      	ldr	r2, [pc, #148]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3e4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d027      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a24      	ldr	r2, [pc, #144]	@ (8002eac <HAL_DMA_Abort_IT+0x3e8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a22      	ldr	r2, [pc, #136]	@ (8002eb0 <HAL_DMA_Abort_IT+0x3ec>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01d      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a21      	ldr	r2, [pc, #132]	@ (8002eb4 <HAL_DMA_Abort_IT+0x3f0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <HAL_DMA_Abort_IT+0x3f4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1e      	ldr	r2, [pc, #120]	@ (8002ebc <HAL_DMA_Abort_IT+0x3f8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec0 <HAL_DMA_Abort_IT+0x3fc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d009      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec4 <HAL_DMA_Abort_IT+0x400>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x3a2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a19      	ldr	r2, [pc, #100]	@ (8002ec8 <HAL_DMA_Abort_IT+0x404>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d132      	bne.n	8002ecc <HAL_DMA_Abort_IT+0x408>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e031      	b.n	8002ece <HAL_DMA_Abort_IT+0x40a>
 8002e6a:	bf00      	nop
 8002e6c:	40020010 	.word	0x40020010
 8002e70:	40020028 	.word	0x40020028
 8002e74:	40020040 	.word	0x40020040
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	40020070 	.word	0x40020070
 8002e80:	40020088 	.word	0x40020088
 8002e84:	400200a0 	.word	0x400200a0
 8002e88:	400200b8 	.word	0x400200b8
 8002e8c:	40020410 	.word	0x40020410
 8002e90:	40020428 	.word	0x40020428
 8002e94:	40020440 	.word	0x40020440
 8002e98:	40020458 	.word	0x40020458
 8002e9c:	40020470 	.word	0x40020470
 8002ea0:	40020488 	.word	0x40020488
 8002ea4:	400204a0 	.word	0x400204a0
 8002ea8:	400204b8 	.word	0x400204b8
 8002eac:	58025408 	.word	0x58025408
 8002eb0:	5802541c 	.word	0x5802541c
 8002eb4:	58025430 	.word	0x58025430
 8002eb8:	58025444 	.word	0x58025444
 8002ebc:	58025458 	.word	0x58025458
 8002ec0:	5802546c 	.word	0x5802546c
 8002ec4:	58025480 	.word	0x58025480
 8002ec8:	58025494 	.word	0x58025494
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d028      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop

08002f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	@ 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f5c:	4b67      	ldr	r3, [pc, #412]	@ (80030fc <HAL_DMA_IRQHandler+0x1ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a67      	ldr	r2, [pc, #412]	@ (8003100 <HAL_DMA_IRQHandler+0x1b0>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5f      	ldr	r2, [pc, #380]	@ (8003104 <HAL_DMA_IRQHandler+0x1b4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d04a      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5d      	ldr	r2, [pc, #372]	@ (8003108 <HAL_DMA_IRQHandler+0x1b8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d045      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800310c <HAL_DMA_IRQHandler+0x1bc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d040      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8003110 <HAL_DMA_IRQHandler+0x1c0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d03b      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a59      	ldr	r2, [pc, #356]	@ (8003114 <HAL_DMA_IRQHandler+0x1c4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d036      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a57      	ldr	r2, [pc, #348]	@ (8003118 <HAL_DMA_IRQHandler+0x1c8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d031      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a56      	ldr	r2, [pc, #344]	@ (800311c <HAL_DMA_IRQHandler+0x1cc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d02c      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a54      	ldr	r2, [pc, #336]	@ (8003120 <HAL_DMA_IRQHandler+0x1d0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d027      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a53      	ldr	r2, [pc, #332]	@ (8003124 <HAL_DMA_IRQHandler+0x1d4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a51      	ldr	r2, [pc, #324]	@ (8003128 <HAL_DMA_IRQHandler+0x1d8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a50      	ldr	r2, [pc, #320]	@ (800312c <HAL_DMA_IRQHandler+0x1dc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8003130 <HAL_DMA_IRQHandler+0x1e0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a4d      	ldr	r2, [pc, #308]	@ (8003134 <HAL_DMA_IRQHandler+0x1e4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a4b      	ldr	r2, [pc, #300]	@ (8003138 <HAL_DMA_IRQHandler+0x1e8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4a      	ldr	r2, [pc, #296]	@ (800313c <HAL_DMA_IRQHandler+0x1ec>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_IRQHandler+0xd2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a48      	ldr	r2, [pc, #288]	@ (8003140 <HAL_DMA_IRQHandler+0x1f0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_DMA_IRQHandler+0xd6>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_DMA_IRQHandler+0xd8>
 8003026:	2300      	movs	r3, #0
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 842b 	beq.w	8003884 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2208      	movs	r2, #8
 8003038:	409a      	lsls	r2, r3
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80a2 	beq.w	8003188 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <HAL_DMA_IRQHandler+0x1b4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d04a      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <HAL_DMA_IRQHandler+0x1b8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d045      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2b      	ldr	r2, [pc, #172]	@ (800310c <HAL_DMA_IRQHandler+0x1bc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d040      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <HAL_DMA_IRQHandler+0x1c0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d03b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a28      	ldr	r2, [pc, #160]	@ (8003114 <HAL_DMA_IRQHandler+0x1c4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d036      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <HAL_DMA_IRQHandler+0x1c8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d031      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a25      	ldr	r2, [pc, #148]	@ (800311c <HAL_DMA_IRQHandler+0x1cc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02c      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <HAL_DMA_IRQHandler+0x1d0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d027      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_DMA_IRQHandler+0x1d4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d022      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	@ (8003128 <HAL_DMA_IRQHandler+0x1d8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d01d      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <HAL_DMA_IRQHandler+0x1dc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d018      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_DMA_IRQHandler+0x1e0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_DMA_IRQHandler+0x1e4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_DMA_IRQHandler+0x1e8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d009      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_DMA_IRQHandler+0x1ec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x194>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_DMA_IRQHandler+0x1f0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d12f      	bne.n	8003144 <HAL_DMA_IRQHandler+0x1f4>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e02e      	b.n	8003158 <HAL_DMA_IRQHandler+0x208>
 80030fa:	bf00      	nop
 80030fc:	24000000 	.word	0x24000000
 8003100:	1b4e81b5 	.word	0x1b4e81b5
 8003104:	40020010 	.word	0x40020010
 8003108:	40020028 	.word	0x40020028
 800310c:	40020040 	.word	0x40020040
 8003110:	40020058 	.word	0x40020058
 8003114:	40020070 	.word	0x40020070
 8003118:	40020088 	.word	0x40020088
 800311c:	400200a0 	.word	0x400200a0
 8003120:	400200b8 	.word	0x400200b8
 8003124:	40020410 	.word	0x40020410
 8003128:	40020428 	.word	0x40020428
 800312c:	40020440 	.word	0x40020440
 8003130:	40020458 	.word	0x40020458
 8003134:	40020470 	.word	0x40020470
 8003138:	40020488 	.word	0x40020488
 800313c:	400204a0 	.word	0x400204a0
 8003140:	400204b8 	.word	0x400204b8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0204 	bic.w	r2, r2, #4
 800316a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2208      	movs	r2, #8
 8003176:	409a      	lsls	r2, r3
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d06e      	beq.n	800327c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a69      	ldr	r2, [pc, #420]	@ (8003348 <HAL_DMA_IRQHandler+0x3f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a67      	ldr	r2, [pc, #412]	@ (800334c <HAL_DMA_IRQHandler+0x3fc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a66      	ldr	r2, [pc, #408]	@ (8003350 <HAL_DMA_IRQHandler+0x400>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a64      	ldr	r2, [pc, #400]	@ (8003354 <HAL_DMA_IRQHandler+0x404>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a63      	ldr	r2, [pc, #396]	@ (8003358 <HAL_DMA_IRQHandler+0x408>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a61      	ldr	r2, [pc, #388]	@ (800335c <HAL_DMA_IRQHandler+0x40c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a60      	ldr	r2, [pc, #384]	@ (8003360 <HAL_DMA_IRQHandler+0x410>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003364 <HAL_DMA_IRQHandler+0x414>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003368 <HAL_DMA_IRQHandler+0x418>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_DMA_IRQHandler+0x41c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a5a      	ldr	r2, [pc, #360]	@ (8003370 <HAL_DMA_IRQHandler+0x420>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a58      	ldr	r2, [pc, #352]	@ (8003374 <HAL_DMA_IRQHandler+0x424>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a57      	ldr	r2, [pc, #348]	@ (8003378 <HAL_DMA_IRQHandler+0x428>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a55      	ldr	r2, [pc, #340]	@ (800337c <HAL_DMA_IRQHandler+0x42c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a54      	ldr	r2, [pc, #336]	@ (8003380 <HAL_DMA_IRQHandler+0x430>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_IRQHandler+0x2ee>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a52      	ldr	r2, [pc, #328]	@ (8003384 <HAL_DMA_IRQHandler+0x434>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10a      	bne.n	8003254 <HAL_DMA_IRQHandler+0x304>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e003      	b.n	800325c <HAL_DMA_IRQHandler+0x30c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2201      	movs	r2, #1
 800326a:	409a      	lsls	r2, r3
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0202 	orr.w	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2204      	movs	r2, #4
 8003286:	409a      	lsls	r2, r3
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808f 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2c      	ldr	r2, [pc, #176]	@ (8003348 <HAL_DMA_IRQHandler+0x3f8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d04a      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_DMA_IRQHandler+0x3fc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d045      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a29      	ldr	r2, [pc, #164]	@ (8003350 <HAL_DMA_IRQHandler+0x400>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d040      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <HAL_DMA_IRQHandler+0x404>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d03b      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a26      	ldr	r2, [pc, #152]	@ (8003358 <HAL_DMA_IRQHandler+0x408>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d036      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a24      	ldr	r2, [pc, #144]	@ (800335c <HAL_DMA_IRQHandler+0x40c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_DMA_IRQHandler+0x410>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d02c      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a21      	ldr	r2, [pc, #132]	@ (8003364 <HAL_DMA_IRQHandler+0x414>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d027      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a20      	ldr	r2, [pc, #128]	@ (8003368 <HAL_DMA_IRQHandler+0x418>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <HAL_DMA_IRQHandler+0x41c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01d      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <HAL_DMA_IRQHandler+0x420>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1b      	ldr	r2, [pc, #108]	@ (8003374 <HAL_DMA_IRQHandler+0x424>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_DMA_IRQHandler+0x428>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a18      	ldr	r2, [pc, #96]	@ (800337c <HAL_DMA_IRQHandler+0x42c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <HAL_DMA_IRQHandler+0x430>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_DMA_IRQHandler+0x3e2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a15      	ldr	r2, [pc, #84]	@ (8003384 <HAL_DMA_IRQHandler+0x434>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d12a      	bne.n	8003388 <HAL_DMA_IRQHandler+0x438>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	e023      	b.n	8003390 <HAL_DMA_IRQHandler+0x440>
 8003348:	40020010 	.word	0x40020010
 800334c:	40020028 	.word	0x40020028
 8003350:	40020040 	.word	0x40020040
 8003354:	40020058 	.word	0x40020058
 8003358:	40020070 	.word	0x40020070
 800335c:	40020088 	.word	0x40020088
 8003360:	400200a0 	.word	0x400200a0
 8003364:	400200b8 	.word	0x400200b8
 8003368:	40020410 	.word	0x40020410
 800336c:	40020428 	.word	0x40020428
 8003370:	40020440 	.word	0x40020440
 8003374:	40020458 	.word	0x40020458
 8003378:	40020470 	.word	0x40020470
 800337c:	40020488 	.word	0x40020488
 8003380:	400204a0 	.word	0x400204a0
 8003384:	400204b8 	.word	0x400204b8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00d      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2204      	movs	r2, #4
 800339e:	409a      	lsls	r2, r3
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2210      	movs	r2, #16
 80033ba:	409a      	lsls	r2, r3
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a6 	beq.w	8003512 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a85      	ldr	r2, [pc, #532]	@ (80035e0 <HAL_DMA_IRQHandler+0x690>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a83      	ldr	r2, [pc, #524]	@ (80035e4 <HAL_DMA_IRQHandler+0x694>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a82      	ldr	r2, [pc, #520]	@ (80035e8 <HAL_DMA_IRQHandler+0x698>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a80      	ldr	r2, [pc, #512]	@ (80035ec <HAL_DMA_IRQHandler+0x69c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	@ (80035f0 <HAL_DMA_IRQHandler+0x6a0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7d      	ldr	r2, [pc, #500]	@ (80035f4 <HAL_DMA_IRQHandler+0x6a4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7c      	ldr	r2, [pc, #496]	@ (80035f8 <HAL_DMA_IRQHandler+0x6a8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7a      	ldr	r2, [pc, #488]	@ (80035fc <HAL_DMA_IRQHandler+0x6ac>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a79      	ldr	r2, [pc, #484]	@ (8003600 <HAL_DMA_IRQHandler+0x6b0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a77      	ldr	r2, [pc, #476]	@ (8003604 <HAL_DMA_IRQHandler+0x6b4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a76      	ldr	r2, [pc, #472]	@ (8003608 <HAL_DMA_IRQHandler+0x6b8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a74      	ldr	r2, [pc, #464]	@ (800360c <HAL_DMA_IRQHandler+0x6bc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a73      	ldr	r2, [pc, #460]	@ (8003610 <HAL_DMA_IRQHandler+0x6c0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a71      	ldr	r2, [pc, #452]	@ (8003614 <HAL_DMA_IRQHandler+0x6c4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a70      	ldr	r2, [pc, #448]	@ (8003618 <HAL_DMA_IRQHandler+0x6c8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_IRQHandler+0x516>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <HAL_DMA_IRQHandler+0x6cc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10a      	bne.n	800347c <HAL_DMA_IRQHandler+0x52c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e009      	b.n	8003490 <HAL_DMA_IRQHandler+0x540>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d03e      	beq.n	8003512 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2210      	movs	r2, #16
 800349e:	409a      	lsls	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d024      	beq.n	8003512 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
 80034d0:	e01f      	b.n	8003512 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01b      	beq.n	8003512 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e016      	b.n	8003512 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0208 	bic.w	r2, r2, #8
 8003500:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2220      	movs	r2, #32
 800351c:	409a      	lsls	r2, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8110 	beq.w	8003748 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2c      	ldr	r2, [pc, #176]	@ (80035e0 <HAL_DMA_IRQHandler+0x690>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d04a      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2b      	ldr	r2, [pc, #172]	@ (80035e4 <HAL_DMA_IRQHandler+0x694>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d045      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a29      	ldr	r2, [pc, #164]	@ (80035e8 <HAL_DMA_IRQHandler+0x698>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d040      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a28      	ldr	r2, [pc, #160]	@ (80035ec <HAL_DMA_IRQHandler+0x69c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d03b      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a26      	ldr	r2, [pc, #152]	@ (80035f0 <HAL_DMA_IRQHandler+0x6a0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d036      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a25      	ldr	r2, [pc, #148]	@ (80035f4 <HAL_DMA_IRQHandler+0x6a4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d031      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a23      	ldr	r2, [pc, #140]	@ (80035f8 <HAL_DMA_IRQHandler+0x6a8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02c      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a22      	ldr	r2, [pc, #136]	@ (80035fc <HAL_DMA_IRQHandler+0x6ac>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d027      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a20      	ldr	r2, [pc, #128]	@ (8003600 <HAL_DMA_IRQHandler+0x6b0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d022      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <HAL_DMA_IRQHandler+0x6b4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d01d      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_DMA_IRQHandler+0x6b8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d018      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <HAL_DMA_IRQHandler+0x6bc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003610 <HAL_DMA_IRQHandler+0x6c0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a19      	ldr	r2, [pc, #100]	@ (8003614 <HAL_DMA_IRQHandler+0x6c4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_DMA_IRQHandler+0x6c8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x678>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a16      	ldr	r2, [pc, #88]	@ (800361c <HAL_DMA_IRQHandler+0x6cc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d12b      	bne.n	8003620 <HAL_DMA_IRQHandler+0x6d0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e02a      	b.n	8003634 <HAL_DMA_IRQHandler+0x6e4>
 80035de:	bf00      	nop
 80035e0:	40020010 	.word	0x40020010
 80035e4:	40020028 	.word	0x40020028
 80035e8:	40020040 	.word	0x40020040
 80035ec:	40020058 	.word	0x40020058
 80035f0:	40020070 	.word	0x40020070
 80035f4:	40020088 	.word	0x40020088
 80035f8:	400200a0 	.word	0x400200a0
 80035fc:	400200b8 	.word	0x400200b8
 8003600:	40020410 	.word	0x40020410
 8003604:	40020428 	.word	0x40020428
 8003608:	40020440 	.word	0x40020440
 800360c:	40020458 	.word	0x40020458
 8003610:	40020470 	.word	0x40020470
 8003614:	40020488 	.word	0x40020488
 8003618:	400204a0 	.word	0x400204a0
 800361c:	400204b8 	.word	0x400204b8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8087 	beq.w	8003748 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2220      	movs	r2, #32
 8003644:	409a      	lsls	r2, r3
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b04      	cmp	r3, #4
 8003654:	d139      	bne.n	80036ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0216 	bic.w	r2, r2, #22
 8003664:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003674:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <HAL_DMA_IRQHandler+0x736>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	223f      	movs	r2, #63	@ 0x3f
 80036a0:	409a      	lsls	r2, r3
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 834a 	beq.w	8003d54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
          }
          return;
 80036c8:	e344      	b.n	8003d54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d018      	beq.n	800370a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d02c      	beq.n	8003748 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
 80036f6:	e027      	b.n	8003748 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d023      	beq.n	8003748 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
 8003708:	e01e      	b.n	8003748 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0210 	bic.w	r2, r2, #16
 8003726:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8306 	beq.w	8003d5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8088 	beq.w	8003870 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2204      	movs	r2, #4
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7a      	ldr	r2, [pc, #488]	@ (8003958 <HAL_DMA_IRQHandler+0xa08>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04a      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a79      	ldr	r2, [pc, #484]	@ (800395c <HAL_DMA_IRQHandler+0xa0c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d045      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a77      	ldr	r2, [pc, #476]	@ (8003960 <HAL_DMA_IRQHandler+0xa10>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d040      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a76      	ldr	r2, [pc, #472]	@ (8003964 <HAL_DMA_IRQHandler+0xa14>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a74      	ldr	r2, [pc, #464]	@ (8003968 <HAL_DMA_IRQHandler+0xa18>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d036      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a73      	ldr	r2, [pc, #460]	@ (800396c <HAL_DMA_IRQHandler+0xa1c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a71      	ldr	r2, [pc, #452]	@ (8003970 <HAL_DMA_IRQHandler+0xa20>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a70      	ldr	r2, [pc, #448]	@ (8003974 <HAL_DMA_IRQHandler+0xa24>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d027      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003978 <HAL_DMA_IRQHandler+0xa28>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6d      	ldr	r2, [pc, #436]	@ (800397c <HAL_DMA_IRQHandler+0xa2c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003980 <HAL_DMA_IRQHandler+0xa30>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6a      	ldr	r2, [pc, #424]	@ (8003984 <HAL_DMA_IRQHandler+0xa34>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a68      	ldr	r2, [pc, #416]	@ (8003988 <HAL_DMA_IRQHandler+0xa38>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a67      	ldr	r2, [pc, #412]	@ (800398c <HAL_DMA_IRQHandler+0xa3c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a65      	ldr	r2, [pc, #404]	@ (8003990 <HAL_DMA_IRQHandler+0xa40>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_IRQHandler+0x8b8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a64      	ldr	r2, [pc, #400]	@ (8003994 <HAL_DMA_IRQHandler+0xa44>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <HAL_DMA_IRQHandler+0x8ca>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e007      	b.n	800382a <HAL_DMA_IRQHandler+0x8da>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3301      	adds	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	429a      	cmp	r2, r3
 8003834:	d307      	bcc.n	8003846 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f2      	bne.n	800382a <HAL_DMA_IRQHandler+0x8da>
 8003844:	e000      	b.n	8003848 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003846:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2203      	movs	r2, #3
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800385e:	e003      	b.n	8003868 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8272 	beq.w	8003d5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
 8003882:	e26c      	b.n	8003d5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a43      	ldr	r2, [pc, #268]	@ (8003998 <HAL_DMA_IRQHandler+0xa48>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d022      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a42      	ldr	r2, [pc, #264]	@ (800399c <HAL_DMA_IRQHandler+0xa4c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a40      	ldr	r2, [pc, #256]	@ (80039a0 <HAL_DMA_IRQHandler+0xa50>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a3f      	ldr	r2, [pc, #252]	@ (80039a4 <HAL_DMA_IRQHandler+0xa54>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a3d      	ldr	r2, [pc, #244]	@ (80039a8 <HAL_DMA_IRQHandler+0xa58>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3c      	ldr	r2, [pc, #240]	@ (80039ac <HAL_DMA_IRQHandler+0xa5c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3a      	ldr	r2, [pc, #232]	@ (80039b0 <HAL_DMA_IRQHandler+0xa60>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x984>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a39      	ldr	r2, [pc, #228]	@ (80039b4 <HAL_DMA_IRQHandler+0xa64>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x988>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_DMA_IRQHandler+0x98a>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 823f 	beq.w	8003d5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2204      	movs	r2, #4
 80038f2:	409a      	lsls	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80cd 	beq.w	8003a98 <HAL_DMA_IRQHandler+0xb48>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80c7 	beq.w	8003a98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2204      	movs	r2, #4
 8003914:	409a      	lsls	r2, r3
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d049      	beq.n	80039b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8210 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003940:	e20a      	b.n	8003d58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8206 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003954:	e200      	b.n	8003d58 <HAL_DMA_IRQHandler+0xe08>
 8003956:	bf00      	nop
 8003958:	40020010 	.word	0x40020010
 800395c:	40020028 	.word	0x40020028
 8003960:	40020040 	.word	0x40020040
 8003964:	40020058 	.word	0x40020058
 8003968:	40020070 	.word	0x40020070
 800396c:	40020088 	.word	0x40020088
 8003970:	400200a0 	.word	0x400200a0
 8003974:	400200b8 	.word	0x400200b8
 8003978:	40020410 	.word	0x40020410
 800397c:	40020428 	.word	0x40020428
 8003980:	40020440 	.word	0x40020440
 8003984:	40020458 	.word	0x40020458
 8003988:	40020470 	.word	0x40020470
 800398c:	40020488 	.word	0x40020488
 8003990:	400204a0 	.word	0x400204a0
 8003994:	400204b8 	.word	0x400204b8
 8003998:	58025408 	.word	0x58025408
 800399c:	5802541c 	.word	0x5802541c
 80039a0:	58025430 	.word	0x58025430
 80039a4:	58025444 	.word	0x58025444
 80039a8:	58025458 	.word	0x58025458
 80039ac:	5802546c 	.word	0x5802546c
 80039b0:	58025480 	.word	0x58025480
 80039b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d160      	bne.n	8003a84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7f      	ldr	r2, [pc, #508]	@ (8003bc4 <HAL_DMA_IRQHandler+0xc74>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc8 <HAL_DMA_IRQHandler+0xc78>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7c      	ldr	r2, [pc, #496]	@ (8003bcc <HAL_DMA_IRQHandler+0xc7c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7a      	ldr	r2, [pc, #488]	@ (8003bd0 <HAL_DMA_IRQHandler+0xc80>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a79      	ldr	r2, [pc, #484]	@ (8003bd4 <HAL_DMA_IRQHandler+0xc84>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a77      	ldr	r2, [pc, #476]	@ (8003bd8 <HAL_DMA_IRQHandler+0xc88>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a76      	ldr	r2, [pc, #472]	@ (8003bdc <HAL_DMA_IRQHandler+0xc8c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a74      	ldr	r2, [pc, #464]	@ (8003be0 <HAL_DMA_IRQHandler+0xc90>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a73      	ldr	r2, [pc, #460]	@ (8003be4 <HAL_DMA_IRQHandler+0xc94>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a71      	ldr	r2, [pc, #452]	@ (8003be8 <HAL_DMA_IRQHandler+0xc98>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a70      	ldr	r2, [pc, #448]	@ (8003bec <HAL_DMA_IRQHandler+0xc9c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf0 <HAL_DMA_IRQHandler+0xca0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8003bf4 <HAL_DMA_IRQHandler+0xca4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf8 <HAL_DMA_IRQHandler+0xca8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6a      	ldr	r2, [pc, #424]	@ (8003bfc <HAL_DMA_IRQHandler+0xcac>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xb12>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a68      	ldr	r2, [pc, #416]	@ (8003c00 <HAL_DMA_IRQHandler+0xcb0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <HAL_DMA_IRQHandler+0xb24>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0208 	bic.w	r2, r2, #8
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e007      	b.n	8003a84 <HAL_DMA_IRQHandler+0xb34>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0204 	bic.w	r2, r2, #4
 8003a82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8165 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a96:	e15f      	b.n	8003d58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80c5 	beq.w	8003c38 <HAL_DMA_IRQHandler+0xce8>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80bf 	beq.w	8003c38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d018      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 813a 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af0:	e134      	b.n	8003d5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8130 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b04:	e12a      	b.n	8003d5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8089 	bne.w	8003c24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc4 <HAL_DMA_IRQHandler+0xc74>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d04a      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a29      	ldr	r2, [pc, #164]	@ (8003bc8 <HAL_DMA_IRQHandler+0xc78>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d045      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	@ (8003bcc <HAL_DMA_IRQHandler+0xc7c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d040      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a26      	ldr	r2, [pc, #152]	@ (8003bd0 <HAL_DMA_IRQHandler+0xc80>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d03b      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	@ (8003bd4 <HAL_DMA_IRQHandler+0xc84>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d036      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a23      	ldr	r2, [pc, #140]	@ (8003bd8 <HAL_DMA_IRQHandler+0xc88>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d031      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a22      	ldr	r2, [pc, #136]	@ (8003bdc <HAL_DMA_IRQHandler+0xc8c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d02c      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a20      	ldr	r2, [pc, #128]	@ (8003be0 <HAL_DMA_IRQHandler+0xc90>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d027      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1f      	ldr	r2, [pc, #124]	@ (8003be4 <HAL_DMA_IRQHandler+0xc94>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d022      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	@ (8003be8 <HAL_DMA_IRQHandler+0xc98>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bec <HAL_DMA_IRQHandler+0xc9c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <HAL_DMA_IRQHandler+0xca0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <HAL_DMA_IRQHandler+0xca4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	@ (8003bf8 <HAL_DMA_IRQHandler+0xca8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <HAL_DMA_IRQHandler+0xcac>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xc62>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a14      	ldr	r2, [pc, #80]	@ (8003c00 <HAL_DMA_IRQHandler+0xcb0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d128      	bne.n	8003c04 <HAL_DMA_IRQHandler+0xcb4>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0214 	bic.w	r2, r2, #20
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e027      	b.n	8003c14 <HAL_DMA_IRQHandler+0xcc4>
 8003bc4:	40020010 	.word	0x40020010
 8003bc8:	40020028 	.word	0x40020028
 8003bcc:	40020040 	.word	0x40020040
 8003bd0:	40020058 	.word	0x40020058
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40020088 	.word	0x40020088
 8003bdc:	400200a0 	.word	0x400200a0
 8003be0:	400200b8 	.word	0x400200b8
 8003be4:	40020410 	.word	0x40020410
 8003be8:	40020428 	.word	0x40020428
 8003bec:	40020440 	.word	0x40020440
 8003bf0:	40020458 	.word	0x40020458
 8003bf4:	40020470 	.word	0x40020470
 8003bf8:	40020488 	.word	0x40020488
 8003bfc:	400204a0 	.word	0x400204a0
 8003c00:	400204b8 	.word	0x400204b8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 020a 	bic.w	r2, r2, #10
 8003c12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8097 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c36:	e091      	b.n	8003d5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2208      	movs	r2, #8
 8003c42:	409a      	lsls	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8088 	beq.w	8003d5e <HAL_DMA_IRQHandler+0xe0e>
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8082 	beq.w	8003d5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a41      	ldr	r2, [pc, #260]	@ (8003d64 <HAL_DMA_IRQHandler+0xe14>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3f      	ldr	r2, [pc, #252]	@ (8003d68 <HAL_DMA_IRQHandler+0xe18>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3e      	ldr	r2, [pc, #248]	@ (8003d6c <HAL_DMA_IRQHandler+0xe1c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d70 <HAL_DMA_IRQHandler+0xe20>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3b      	ldr	r2, [pc, #236]	@ (8003d74 <HAL_DMA_IRQHandler+0xe24>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a39      	ldr	r2, [pc, #228]	@ (8003d78 <HAL_DMA_IRQHandler+0xe28>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a38      	ldr	r2, [pc, #224]	@ (8003d7c <HAL_DMA_IRQHandler+0xe2c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a36      	ldr	r2, [pc, #216]	@ (8003d80 <HAL_DMA_IRQHandler+0xe30>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a35      	ldr	r2, [pc, #212]	@ (8003d84 <HAL_DMA_IRQHandler+0xe34>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	@ (8003d88 <HAL_DMA_IRQHandler+0xe38>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a32      	ldr	r2, [pc, #200]	@ (8003d8c <HAL_DMA_IRQHandler+0xe3c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	@ (8003d90 <HAL_DMA_IRQHandler+0xe40>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d94 <HAL_DMA_IRQHandler+0xe44>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d98 <HAL_DMA_IRQHandler+0xe48>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	@ (8003d9c <HAL_DMA_IRQHandler+0xe4c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xdaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8003da0 <HAL_DMA_IRQHandler+0xe50>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <HAL_DMA_IRQHandler+0xdbc>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 021c 	bic.w	r2, r2, #28
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e007      	b.n	8003d1c <HAL_DMA_IRQHandler+0xdcc>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020e 	bic.w	r2, r2, #14
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
 8003d52:	e004      	b.n	8003d5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d5e:	3728      	adds	r7, #40	@ 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40020010 	.word	0x40020010
 8003d68:	40020028 	.word	0x40020028
 8003d6c:	40020040 	.word	0x40020040
 8003d70:	40020058 	.word	0x40020058
 8003d74:	40020070 	.word	0x40020070
 8003d78:	40020088 	.word	0x40020088
 8003d7c:	400200a0 	.word	0x400200a0
 8003d80:	400200b8 	.word	0x400200b8
 8003d84:	40020410 	.word	0x40020410
 8003d88:	40020428 	.word	0x40020428
 8003d8c:	40020440 	.word	0x40020440
 8003d90:	40020458 	.word	0x40020458
 8003d94:	40020470 	.word	0x40020470
 8003d98:	40020488 	.word	0x40020488
 8003d9c:	400204a0 	.word	0x400204a0
 8003da0:	400204b8 	.word	0x400204b8

08003da4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a42      	ldr	r2, [pc, #264]	@ (8003ebc <DMA_CalcBaseAndBitshift+0x118>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d04a      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a41      	ldr	r2, [pc, #260]	@ (8003ec0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d045      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec4 <DMA_CalcBaseAndBitshift+0x120>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d040      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec8 <DMA_CalcBaseAndBitshift+0x124>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d03b      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ecc <DMA_CalcBaseAndBitshift+0x128>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d036      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d031      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a39      	ldr	r2, [pc, #228]	@ (8003ed4 <DMA_CalcBaseAndBitshift+0x130>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d02c      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a38      	ldr	r2, [pc, #224]	@ (8003ed8 <DMA_CalcBaseAndBitshift+0x134>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d027      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a36      	ldr	r2, [pc, #216]	@ (8003edc <DMA_CalcBaseAndBitshift+0x138>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d022      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a35      	ldr	r2, [pc, #212]	@ (8003ee0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d01d      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a33      	ldr	r2, [pc, #204]	@ (8003ee4 <DMA_CalcBaseAndBitshift+0x140>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ee8 <DMA_CalcBaseAndBitshift+0x144>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <DMA_CalcBaseAndBitshift+0x148>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef4 <DMA_CalcBaseAndBitshift+0x150>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <DMA_CalcBaseAndBitshift+0xa8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef8 <DMA_CalcBaseAndBitshift+0x154>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d101      	bne.n	8003e50 <DMA_CalcBaseAndBitshift+0xac>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <DMA_CalcBaseAndBitshift+0xae>
 8003e50:	2300      	movs	r3, #0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d024      	beq.n	8003ea0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	3b10      	subs	r3, #16
 8003e5e:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <DMA_CalcBaseAndBitshift+0x158>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	4a24      	ldr	r2, [pc, #144]	@ (8003f00 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e70:	5cd3      	ldrb	r3, [r2, r3]
 8003e72:	461a      	mov	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d908      	bls.n	8003e90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <DMA_CalcBaseAndBitshift+0x160>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e8e:	e00d      	b.n	8003eac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <DMA_CalcBaseAndBitshift+0x160>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e9e:	e005      	b.n	8003eac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40020010 	.word	0x40020010
 8003ec0:	40020028 	.word	0x40020028
 8003ec4:	40020040 	.word	0x40020040
 8003ec8:	40020058 	.word	0x40020058
 8003ecc:	40020070 	.word	0x40020070
 8003ed0:	40020088 	.word	0x40020088
 8003ed4:	400200a0 	.word	0x400200a0
 8003ed8:	400200b8 	.word	0x400200b8
 8003edc:	40020410 	.word	0x40020410
 8003ee0:	40020428 	.word	0x40020428
 8003ee4:	40020440 	.word	0x40020440
 8003ee8:	40020458 	.word	0x40020458
 8003eec:	40020470 	.word	0x40020470
 8003ef0:	40020488 	.word	0x40020488
 8003ef4:	400204a0 	.word	0x400204a0
 8003ef8:	400204b8 	.word	0x400204b8
 8003efc:	aaaaaaab 	.word	0xaaaaaaab
 8003f00:	0800e10c 	.word	0x0800e10c
 8003f04:	fffffc00 	.word	0xfffffc00

08003f08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d120      	bne.n	8003f5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d858      	bhi.n	8003fd6 <DMA_CheckFifoParam+0xce>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <DMA_CheckFifoParam+0x24>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f4f 	.word	0x08003f4f
 8003f34:	08003f3d 	.word	0x08003f3d
 8003f38:	08003fd7 	.word	0x08003fd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d048      	beq.n	8003fda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f4c:	e045      	b.n	8003fda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f56:	d142      	bne.n	8003fde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f5c:	e03f      	b.n	8003fde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f66:	d123      	bne.n	8003fb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d838      	bhi.n	8003fe2 <DMA_CheckFifoParam+0xda>
 8003f70:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <DMA_CheckFifoParam+0x70>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003f8f 	.word	0x08003f8f
 8003f80:	08003f89 	.word	0x08003f89
 8003f84:	08003fa1 	.word	0x08003fa1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8c:	e030      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d025      	beq.n	8003fe6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f9e:	e022      	b.n	8003fe6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fa8:	d11f      	bne.n	8003fea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fae:	e01c      	b.n	8003fea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d902      	bls.n	8003fbe <DMA_CheckFifoParam+0xb6>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d003      	beq.n	8003fc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003fbc:	e018      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc2:	e015      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8003fd4:	e00b      	b.n	8003fee <DMA_CheckFifoParam+0xe6>
        break;
 8003fd6:	bf00      	nop
 8003fd8:	e00a      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e008      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e006      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <DMA_CheckFifoParam+0xe8>
    break;
 8003fee:	bf00      	nop
    }
  }

  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop

08004000 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a38      	ldr	r2, [pc, #224]	@ (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a36      	ldr	r2, [pc, #216]	@ (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a35      	ldr	r2, [pc, #212]	@ (80040fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a33      	ldr	r2, [pc, #204]	@ (8004100 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a32      	ldr	r2, [pc, #200]	@ (8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2f      	ldr	r2, [pc, #188]	@ (800410c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2d      	ldr	r2, [pc, #180]	@ (8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	3b08      	subs	r3, #8
 8004070:	4a28      	ldr	r2, [pc, #160]	@ (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a24      	ldr	r2, [pc, #144]	@ (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800408c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800409c:	e024      	b.n	80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3b10      	subs	r3, #16
 80040a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d806      	bhi.n	80040c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d902      	bls.n	80040c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3308      	adds	r3, #8
 80040c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4b18      	ldr	r3, [pc, #96]	@ (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80040d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2201      	movs	r2, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	58025408 	.word	0x58025408
 80040f8:	5802541c 	.word	0x5802541c
 80040fc:	58025430 	.word	0x58025430
 8004100:	58025444 	.word	0x58025444
 8004104:	58025458 	.word	0x58025458
 8004108:	5802546c 	.word	0x5802546c
 800410c:	58025480 	.word	0x58025480
 8004110:	58025494 	.word	0x58025494
 8004114:	cccccccd 	.word	0xcccccccd
 8004118:	16009600 	.word	0x16009600
 800411c:	58025880 	.word	0x58025880
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	400204b8 	.word	0x400204b8
 8004128:	4002040f 	.word	0x4002040f
 800412c:	10008200 	.word	0x10008200
 8004130:	40020880 	.word	0x40020880

08004134 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d04a      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d847      	bhi.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d022      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a24      	ldr	r2, [pc, #144]	@ (80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d01d      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a22      	ldr	r2, [pc, #136]	@ (80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d018      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1f      	ldr	r2, [pc, #124]	@ (80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1e      	ldr	r2, [pc, #120]	@ (8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1c      	ldr	r2, [pc, #112]	@ (8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1b      	ldr	r2, [pc, #108]	@ (8004208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80041be:	e009      	b.n	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a11      	ldr	r2, [pc, #68]	@ (8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80041d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	58025408 	.word	0x58025408
 80041f0:	5802541c 	.word	0x5802541c
 80041f4:	58025430 	.word	0x58025430
 80041f8:	58025444 	.word	0x58025444
 80041fc:	58025458 	.word	0x58025458
 8004200:	5802546c 	.word	0x5802546c
 8004204:	58025480 	.word	0x58025480
 8004208:	58025494 	.word	0x58025494
 800420c:	1600963f 	.word	0x1600963f
 8004210:	58025940 	.word	0x58025940
 8004214:	1000823f 	.word	0x1000823f
 8004218:	40020940 	.word	0x40020940

0800421c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	@ 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800422a:	4b89      	ldr	r3, [pc, #548]	@ (8004450 <HAL_GPIO_Init+0x234>)
 800422c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800422e:	e194      	b.n	800455a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8186 	beq.w	8004554 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d005      	beq.n	8004260 <HAL_GPIO_Init+0x44>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d130      	bne.n	80042c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	2203      	movs	r2, #3
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004296:	2201      	movs	r2, #1
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f003 0201 	and.w	r2, r3, #1
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d017      	beq.n	80042fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d123      	bne.n	8004352 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	08da      	lsrs	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3208      	adds	r2, #8
 8004312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	69b9      	ldr	r1, [r7, #24]
 800434e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80e0 	beq.w	8004554 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004394:	4b2f      	ldr	r3, [pc, #188]	@ (8004454 <HAL_GPIO_Init+0x238>)
 8004396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800439a:	4a2e      	ldr	r2, [pc, #184]	@ (8004454 <HAL_GPIO_Init+0x238>)
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80043a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004454 <HAL_GPIO_Init+0x238>)
 80043a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043b2:	4a29      	ldr	r2, [pc, #164]	@ (8004458 <HAL_GPIO_Init+0x23c>)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	3302      	adds	r3, #2
 80043ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	220f      	movs	r2, #15
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a20      	ldr	r2, [pc, #128]	@ (800445c <HAL_GPIO_Init+0x240>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d052      	beq.n	8004484 <HAL_GPIO_Init+0x268>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <HAL_GPIO_Init+0x244>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d031      	beq.n	800444a <HAL_GPIO_Init+0x22e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_GPIO_Init+0x248>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x22a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <HAL_GPIO_Init+0x24c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x226>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_GPIO_Init+0x250>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x222>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <HAL_GPIO_Init+0x254>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x21e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1a      	ldr	r2, [pc, #104]	@ (8004474 <HAL_GPIO_Init+0x258>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x21a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <HAL_GPIO_Init+0x25c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x216>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a18      	ldr	r2, [pc, #96]	@ (800447c <HAL_GPIO_Init+0x260>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x212>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <HAL_GPIO_Init+0x264>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x20e>
 8004426:	2309      	movs	r3, #9
 8004428:	e02d      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 800442a:	230a      	movs	r3, #10
 800442c:	e02b      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 800442e:	2308      	movs	r3, #8
 8004430:	e029      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 8004432:	2307      	movs	r3, #7
 8004434:	e027      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 8004436:	2306      	movs	r3, #6
 8004438:	e025      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 800443a:	2305      	movs	r3, #5
 800443c:	e023      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 800443e:	2304      	movs	r3, #4
 8004440:	e021      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 8004442:	2303      	movs	r3, #3
 8004444:	e01f      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 8004446:	2302      	movs	r3, #2
 8004448:	e01d      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 800444a:	2301      	movs	r3, #1
 800444c:	e01b      	b.n	8004486 <HAL_GPIO_Init+0x26a>
 800444e:	bf00      	nop
 8004450:	58000080 	.word	0x58000080
 8004454:	58024400 	.word	0x58024400
 8004458:	58000400 	.word	0x58000400
 800445c:	58020000 	.word	0x58020000
 8004460:	58020400 	.word	0x58020400
 8004464:	58020800 	.word	0x58020800
 8004468:	58020c00 	.word	0x58020c00
 800446c:	58021000 	.word	0x58021000
 8004470:	58021400 	.word	0x58021400
 8004474:	58021800 	.word	0x58021800
 8004478:	58021c00 	.word	0x58021c00
 800447c:	58022000 	.word	0x58022000
 8004480:	58022400 	.word	0x58022400
 8004484:	2300      	movs	r3, #0
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	f002 0203 	and.w	r2, r2, #3
 800448c:	0092      	lsls	r2, r2, #2
 800448e:	4093      	lsls	r3, r2
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004496:	4938      	ldr	r1, [pc, #224]	@ (8004578 <HAL_GPIO_Init+0x35c>)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80044ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f ae63 	bne.w	8004230 <HAL_GPIO_Init+0x14>
  }
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	3724      	adds	r7, #36	@ 0x24
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	58000400 	.word	0x58000400

0800457c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
 8004588:	4613      	mov	r3, r2
 800458a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800458c:	787b      	ldrb	r3, [r7, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004598:	e003      	b.n	80045a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	041a      	lsls	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	619a      	str	r2, [r3, #24]
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045c0:	887a      	ldrh	r2, [r7, #2]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	041a      	lsls	r2, r3, #16
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	400b      	ands	r3, r1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	619a      	str	r2, [r3, #24]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045ec:	4b19      	ldr	r3, [pc, #100]	@ (8004654 <HAL_PWREx_ConfigSupply+0x70>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d00a      	beq.n	800460e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045f8:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <HAL_PWREx_ConfigSupply+0x70>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d001      	beq.n	800460a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e01f      	b.n	800464a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e01d      	b.n	800464a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_PWREx_ConfigSupply+0x70>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 0207 	bic.w	r2, r3, #7
 8004616:	490f      	ldr	r1, [pc, #60]	@ (8004654 <HAL_PWREx_ConfigSupply+0x70>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4313      	orrs	r3, r2
 800461c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800461e:	f7fd fa13 	bl	8001a48 <HAL_GetTick>
 8004622:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004624:	e009      	b.n	800463a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004626:	f7fd fa0f 	bl	8001a48 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004634:	d901      	bls.n	800463a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e007      	b.n	800464a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_PWREx_ConfigSupply+0x70>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004646:	d1ee      	bne.n	8004626 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	58024800 	.word	0x58024800

08004658 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	@ 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f000 bc48 	b.w	8004efc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8088 	beq.w	800478a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467a:	4b99      	ldr	r3, [pc, #612]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004684:	4b96      	ldr	r3, [pc, #600]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	2b10      	cmp	r3, #16
 800468e:	d007      	beq.n	80046a0 <HAL_RCC_OscConfig+0x48>
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	2b18      	cmp	r3, #24
 8004694:	d111      	bne.n	80046ba <HAL_RCC_OscConfig+0x62>
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d10c      	bne.n	80046ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	4b8f      	ldr	r3, [pc, #572]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d06d      	beq.n	8004788 <HAL_RCC_OscConfig+0x130>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d169      	bne.n	8004788 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f000 bc21 	b.w	8004efc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x7a>
 80046c4:	4b86      	ldr	r3, [pc, #536]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a85      	ldr	r2, [pc, #532]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e02e      	b.n	8004730 <HAL_RCC_OscConfig+0xd8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x9c>
 80046da:	4b81      	ldr	r3, [pc, #516]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a80      	ldr	r2, [pc, #512]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b7e      	ldr	r3, [pc, #504]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a7d      	ldr	r2, [pc, #500]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80046ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e01d      	b.n	8004730 <HAL_RCC_OscConfig+0xd8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0xc0>
 80046fe:	4b78      	ldr	r3, [pc, #480]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a77      	ldr	r2, [pc, #476]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0xd8>
 8004718:	4b71      	ldr	r3, [pc, #452]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a70      	ldr	r2, [pc, #448]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800471e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b6e      	ldr	r3, [pc, #440]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a6d      	ldr	r2, [pc, #436]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800472a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800472e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd f986 	bl	8001a48 <HAL_GetTick>
 800473c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd f982 	bl	8001a48 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	@ 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e3d4      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004752:	4b63      	ldr	r3, [pc, #396]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0xe8>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fd f972 	bl	8001a48 <HAL_GetTick>
 8004764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004768:	f7fd f96e 	bl	8001a48 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	@ 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e3c0      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800477a:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x110>
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80ca 	beq.w	800492c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004798:	4b51      	ldr	r3, [pc, #324]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047a2:	4b4f      	ldr	r3, [pc, #316]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_RCC_OscConfig+0x166>
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2b18      	cmp	r3, #24
 80047b2:	d156      	bne.n	8004862 <HAL_RCC_OscConfig+0x20a>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d151      	bne.n	8004862 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047be:	4b48      	ldr	r3, [pc, #288]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_RCC_OscConfig+0x17e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e392      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047d6:	4b42      	ldr	r3, [pc, #264]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 0219 	bic.w	r2, r3, #25
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	493f      	ldr	r1, [pc, #252]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fd f92e 	bl	8001a48 <HAL_GetTick>
 80047ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f0:	f7fd f92a 	bl	8001a48 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e37c      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004802:	4b37      	ldr	r3, [pc, #220]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480e:	f7fd f94b 	bl	8001aa8 <HAL_GetREVID>
 8004812:	4603      	mov	r3, r0
 8004814:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004818:	4293      	cmp	r3, r2
 800481a:	d817      	bhi.n	800484c <HAL_RCC_OscConfig+0x1f4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d108      	bne.n	8004836 <HAL_RCC_OscConfig+0x1de>
 8004824:	4b2e      	ldr	r3, [pc, #184]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800482c:	4a2c      	ldr	r2, [pc, #176]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800482e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004832:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004834:	e07a      	b.n	800492c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004836:	4b2a      	ldr	r3, [pc, #168]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	031b      	lsls	r3, r3, #12
 8004844:	4926      	ldr	r1, [pc, #152]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800484a:	e06f      	b.n	800492c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484c:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	4921      	ldr	r1, [pc, #132]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004860:	e064      	b.n	800492c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d047      	beq.n	80048fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800486a:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0219 	bic.w	r2, r3, #25
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	491a      	ldr	r1, [pc, #104]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd f8e4 	bl	8001a48 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fd f8e0 	bl	8001a48 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e332      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	f7fd f901 	bl	8001aa8 <HAL_GetREVID>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d819      	bhi.n	80048e4 <HAL_RCC_OscConfig+0x28c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d108      	bne.n	80048ca <HAL_RCC_OscConfig+0x272>
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048c0:	4a07      	ldr	r2, [pc, #28]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c6:	6053      	str	r3, [r2, #4]
 80048c8:	e030      	b.n	800492c <HAL_RCC_OscConfig+0x2d4>
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	031b      	lsls	r3, r3, #12
 80048d8:	4901      	ldr	r1, [pc, #4]	@ (80048e0 <HAL_RCC_OscConfig+0x288>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
 80048de:	e025      	b.n	800492c <HAL_RCC_OscConfig+0x2d4>
 80048e0:	58024400 	.word	0x58024400
 80048e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	4997      	ldr	r1, [pc, #604]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
 80048f8:	e018      	b.n	800492c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fa:	4b95      	ldr	r3, [pc, #596]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a94      	ldr	r2, [pc, #592]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fd f89f 	bl	8001a48 <HAL_GetTick>
 800490a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490e:	f7fd f89b 	bl	8001a48 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e2ed      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004920:	4b8b      	ldr	r3, [pc, #556]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a9 	beq.w	8004a8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800493a:	4b85      	ldr	r3, [pc, #532]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004942:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004944:	4b82      	ldr	r3, [pc, #520]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d007      	beq.n	8004960 <HAL_RCC_OscConfig+0x308>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b18      	cmp	r3, #24
 8004954:	d13a      	bne.n	80049cc <HAL_RCC_OscConfig+0x374>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d135      	bne.n	80049cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004960:	4b7b      	ldr	r3, [pc, #492]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_OscConfig+0x320>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	2b80      	cmp	r3, #128	@ 0x80
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e2c1      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004978:	f7fd f896 	bl	8001aa8 <HAL_GetREVID>
 800497c:	4603      	mov	r3, r0
 800497e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004982:	4293      	cmp	r3, r2
 8004984:	d817      	bhi.n	80049b6 <HAL_RCC_OscConfig+0x35e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	2b20      	cmp	r3, #32
 800498c:	d108      	bne.n	80049a0 <HAL_RCC_OscConfig+0x348>
 800498e:	4b70      	ldr	r3, [pc, #448]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004996:	4a6e      	ldr	r2, [pc, #440]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004998:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800499c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800499e:	e075      	b.n	8004a8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	069b      	lsls	r3, r3, #26
 80049ae:	4968      	ldr	r1, [pc, #416]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b4:	e06a      	b.n	8004a8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049b6:	4b66      	ldr	r3, [pc, #408]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	4962      	ldr	r1, [pc, #392]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049ca:	e05f      	b.n	8004a8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d042      	beq.n	8004a5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fd f832 	bl	8001a48 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049e8:	f7fd f82e 	bl	8001a48 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e280      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049fa:	4b55      	ldr	r3, [pc, #340]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a06:	f7fd f84f 	bl	8001aa8 <HAL_GetREVID>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d817      	bhi.n	8004a44 <HAL_RCC_OscConfig+0x3ec>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d108      	bne.n	8004a2e <HAL_RCC_OscConfig+0x3d6>
 8004a1c:	4b4c      	ldr	r3, [pc, #304]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a24:	4a4a      	ldr	r2, [pc, #296]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a2a:	6053      	str	r3, [r2, #4]
 8004a2c:	e02e      	b.n	8004a8c <HAL_RCC_OscConfig+0x434>
 8004a2e:	4b48      	ldr	r3, [pc, #288]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	069b      	lsls	r3, r3, #26
 8004a3c:	4944      	ldr	r1, [pc, #272]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
 8004a42:	e023      	b.n	8004a8c <HAL_RCC_OscConfig+0x434>
 8004a44:	4b42      	ldr	r3, [pc, #264]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	493f      	ldr	r1, [pc, #252]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60cb      	str	r3, [r1, #12]
 8004a58:	e018      	b.n	8004a8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fc ffef 	bl	8001a48 <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a6e:	f7fc ffeb 	bl	8001a48 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e23d      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a80:	4b33      	ldr	r3, [pc, #204]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f0      	bne.n	8004a6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d036      	beq.n	8004b06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d019      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fc ffcc 	bl	8001a48 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fc ffc8 	bl	8001a48 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e21a      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ac6:	4b22      	ldr	r3, [pc, #136]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x45c>
 8004ad2:	e018      	b.n	8004b06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fc ffb2 	bl	8001a48 <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae8:	f7fc ffae 	bl	8001a48 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e200      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d039      	beq.n	8004b86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01c      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004b20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b26:	f7fc ff8f 	bl	8001a48 <HAL_GetTick>
 8004b2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b2e:	f7fc ff8b 	bl	8001a48 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e1dd      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b40:	4b03      	ldr	r3, [pc, #12]	@ (8004b50 <HAL_RCC_OscConfig+0x4f8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x4d6>
 8004b4c:	e01b      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b54:	4b9b      	ldr	r3, [pc, #620]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a9a      	ldr	r2, [pc, #616]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004b5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b60:	f7fc ff72 	bl	8001a48 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b68:	f7fc ff6e 	bl	8001a48 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1c0      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b7a:	4b92      	ldr	r3, [pc, #584]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8081 	beq.w	8004c96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b94:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc8 <HAL_RCC_OscConfig+0x770>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a8b      	ldr	r2, [pc, #556]	@ (8004dc8 <HAL_RCC_OscConfig+0x770>)
 8004b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ba0:	f7fc ff52 	bl	8001a48 <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba8:	f7fc ff4e 	bl	8001a48 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1a0      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bba:	4b83      	ldr	r3, [pc, #524]	@ (8004dc8 <HAL_RCC_OscConfig+0x770>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d106      	bne.n	8004bdc <HAL_RCC_OscConfig+0x584>
 8004bce:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd2:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bda:	e02d      	b.n	8004c38 <HAL_RCC_OscConfig+0x5e0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCC_OscConfig+0x5a6>
 8004be4:	4b77      	ldr	r3, [pc, #476]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4a76      	ldr	r2, [pc, #472]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf0:	4b74      	ldr	r3, [pc, #464]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4a73      	ldr	r2, [pc, #460]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	f023 0304 	bic.w	r3, r3, #4
 8004bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfc:	e01c      	b.n	8004c38 <HAL_RCC_OscConfig+0x5e0>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c8>
 8004c06:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c12:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0x5e0>
 8004c20:	4b68      	ldr	r3, [pc, #416]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	4a67      	ldr	r2, [pc, #412]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c2c:	4b65      	ldr	r3, [pc, #404]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c30:	4a64      	ldr	r2, [pc, #400]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c32:	f023 0304 	bic.w	r3, r3, #4
 8004c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fc ff02 	bl	8001a48 <HAL_GetTick>
 8004c44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fc fefe 	bl	8001a48 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e14e      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c5e:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ee      	beq.n	8004c48 <HAL_RCC_OscConfig+0x5f0>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fc feec 	bl	8001a48 <HAL_GetTick>
 8004c70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fc fee8 	bl	8001a48 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e138      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ee      	bne.n	8004c74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 812d 	beq.w	8004efa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ca0:	4b48      	ldr	r3, [pc, #288]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca8:	2b18      	cmp	r3, #24
 8004caa:	f000 80bd 	beq.w	8004e28 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	f040 809e 	bne.w	8004df4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb8:	4b42      	ldr	r3, [pc, #264]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a41      	ldr	r2, [pc, #260]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fec0 	bl	8001a48 <HAL_GetTick>
 8004cc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fc febc 	bl	8001a48 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e10e      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cde:	4b39      	ldr	r3, [pc, #228]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cea:	4b36      	ldr	r3, [pc, #216]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cee:	4b37      	ldr	r3, [pc, #220]	@ (8004dcc <HAL_RCC_OscConfig+0x774>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cfa:	0112      	lsls	r2, r2, #4
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	4931      	ldr	r1, [pc, #196]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	3b01      	subs	r3, #1
 8004d14:	025b      	lsls	r3, r3, #9
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d34:	4923      	ldr	r1, [pc, #140]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a21      	ldr	r2, [pc, #132]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d46:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d4a:	4b21      	ldr	r3, [pc, #132]	@ (8004dd0 <HAL_RCC_OscConfig+0x778>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d52:	00d2      	lsls	r2, r2, #3
 8004d54:	491b      	ldr	r1, [pc, #108]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	f023 020c 	bic.w	r2, r3, #12
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	4917      	ldr	r1, [pc, #92]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d6c:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	f023 0202 	bic.w	r2, r3, #2
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d78:	4912      	ldr	r1, [pc, #72]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d7e:	4b11      	ldr	r3, [pc, #68]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	4a10      	ldr	r2, [pc, #64]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4a07      	ldr	r2, [pc, #28]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dae:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <HAL_RCC_OscConfig+0x76c>)
 8004db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dba:	f7fc fe45 	bl	8001a48 <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dc0:	e011      	b.n	8004de6 <HAL_RCC_OscConfig+0x78e>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	58024800 	.word	0x58024800
 8004dcc:	fffffc0c 	.word	0xfffffc0c
 8004dd0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fc fe38 	bl	8001a48 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e08a      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004de6:	4b47      	ldr	r3, [pc, #284]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x77c>
 8004df2:	e082      	b.n	8004efa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df4:	4b43      	ldr	r3, [pc, #268]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a42      	ldr	r2, [pc, #264]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fc fe22 	bl	8001a48 <HAL_GetTick>
 8004e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fc fe1e 	bl	8001a48 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e070      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x7b0>
 8004e26:	e068      	b.n	8004efa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e28:	4b36      	ldr	r3, [pc, #216]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e2e:	4b35      	ldr	r3, [pc, #212]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d031      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f003 0203 	and.w	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d12a      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d122      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d11a      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	0a5b      	lsrs	r3, r3, #9
 8004e6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d111      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	0e1b      	lsrs	r3, r3, #24
 8004e92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e02b      	b.n	8004efc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ea4:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	08db      	lsrs	r3, r3, #3
 8004eaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d01f      	beq.n	8004efa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004eba:	4b12      	ldr	r3, [pc, #72]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	4a11      	ldr	r2, [pc, #68]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec6:	f7fc fdbf 	bl	8001a48 <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ecc:	bf00      	nop
 8004ece:	f7fc fdbb 	bl	8001a48 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d0f9      	beq.n	8004ece <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eda:	4b0a      	ldr	r3, [pc, #40]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <HAL_RCC_OscConfig+0x8b0>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ee6:	00d2      	lsls	r2, r2, #3
 8004ee8:	4906      	ldr	r1, [pc, #24]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004eee:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <HAL_RCC_OscConfig+0x8ac>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3730      	adds	r7, #48	@ 0x30
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	58024400 	.word	0x58024400
 8004f08:	ffff0007 	.word	0xffff0007

08004f0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e19c      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b8a      	ldr	r3, [pc, #552]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d910      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b87      	ldr	r3, [pc, #540]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 020f 	bic.w	r2, r3, #15
 8004f36:	4985      	ldr	r1, [pc, #532]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b83      	ldr	r3, [pc, #524]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e184      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	4b7b      	ldr	r3, [pc, #492]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d908      	bls.n	8004f7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f6c:	4b78      	ldr	r3, [pc, #480]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	4975      	ldr	r1, [pc, #468]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	4b70      	ldr	r3, [pc, #448]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d908      	bls.n	8004fac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	496a      	ldr	r1, [pc, #424]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	4b64      	ldr	r3, [pc, #400]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d908      	bls.n	8004fda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fc8:	4b61      	ldr	r3, [pc, #388]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	495e      	ldr	r1, [pc, #376]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	4b59      	ldr	r3, [pc, #356]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d908      	bls.n	8005008 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ff6:	4b56      	ldr	r3, [pc, #344]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4953      	ldr	r1, [pc, #332]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005004:	4313      	orrs	r3, r2
 8005006:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	4b4d      	ldr	r3, [pc, #308]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	429a      	cmp	r2, r3
 8005022:	d908      	bls.n	8005036 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b4a      	ldr	r3, [pc, #296]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f023 020f 	bic.w	r2, r3, #15
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4947      	ldr	r1, [pc, #284]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005032:	4313      	orrs	r3, r2
 8005034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d055      	beq.n	80050ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005042:	4b43      	ldr	r3, [pc, #268]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4940      	ldr	r1, [pc, #256]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005050:	4313      	orrs	r3, r2
 8005052:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d107      	bne.n	800506c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800505c:	4b3c      	ldr	r3, [pc, #240]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d121      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0f6      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d107      	bne.n	8005084 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005074:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d115      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0ea      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d107      	bne.n	800509c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800508c:	4b30      	ldr	r3, [pc, #192]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0de      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800509c:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0d6      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f023 0207 	bic.w	r2, r3, #7
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4925      	ldr	r1, [pc, #148]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050be:	f7fc fcc3 	bl	8001a48 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f7fc fcbf 	bl	8001a48 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e0be      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d1eb      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d010      	beq.n	800511c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	429a      	cmp	r2, r3
 8005108:	d208      	bcs.n	800511c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f023 020f 	bic.w	r2, r3, #15
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	490e      	ldr	r1, [pc, #56]	@ (8005150 <HAL_RCC_ClockConfig+0x244>)
 8005118:	4313      	orrs	r3, r2
 800511a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d214      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b08      	ldr	r3, [pc, #32]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	4906      	ldr	r1, [pc, #24]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b04      	ldr	r3, [pc, #16]	@ (800514c <HAL_RCC_ClockConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e086      	b.n	800525a <HAL_RCC_ClockConfig+0x34e>
 800514c:	52002000 	.word	0x52002000
 8005150:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	4b3f      	ldr	r3, [pc, #252]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800516c:	429a      	cmp	r2, r3
 800516e:	d208      	bcs.n	8005182 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005170:	4b3c      	ldr	r3, [pc, #240]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4939      	ldr	r1, [pc, #228]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 800517e:	4313      	orrs	r3, r2
 8005180:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d010      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800519a:	429a      	cmp	r2, r3
 800519c:	d208      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	492e      	ldr	r1, [pc, #184]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	4b28      	ldr	r3, [pc, #160]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d208      	bcs.n	80051de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051cc:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	4922      	ldr	r1, [pc, #136]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d010      	beq.n	800520c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d208      	bcs.n	800520c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4917      	ldr	r1, [pc, #92]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005208:	4313      	orrs	r3, r2
 800520a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800520c:	f000 f834 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b14      	ldr	r3, [pc, #80]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	4912      	ldr	r1, [pc, #72]	@ (8005268 <HAL_RCC_ClockConfig+0x35c>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800522a:	4b0e      	ldr	r3, [pc, #56]	@ (8005264 <HAL_RCC_ClockConfig+0x358>)
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	4a0d      	ldr	r2, [pc, #52]	@ (8005268 <HAL_RCC_ClockConfig+0x35c>)
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	4a0a      	ldr	r2, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x360>)
 8005242:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005244:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <HAL_RCC_ClockConfig+0x364>)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800524a:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <HAL_RCC_ClockConfig+0x368>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fbb0 	bl	80019b4 <HAL_InitTick>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	0800e0fc 	.word	0x0800e0fc
 800526c:	24000004 	.word	0x24000004
 8005270:	24000000 	.word	0x24000000
 8005274:	24000008 	.word	0x24000008

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	@ 0x24
 800527c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800527e:	4bb3      	ldr	r3, [pc, #716]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005286:	2b18      	cmp	r3, #24
 8005288:	f200 8155 	bhi.w	8005536 <HAL_RCC_GetSysClockFreq+0x2be>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <HAL_RCC_GetSysClockFreq+0x1c>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052f9 	.word	0x080052f9
 8005298:	08005537 	.word	0x08005537
 800529c:	08005537 	.word	0x08005537
 80052a0:	08005537 	.word	0x08005537
 80052a4:	08005537 	.word	0x08005537
 80052a8:	08005537 	.word	0x08005537
 80052ac:	08005537 	.word	0x08005537
 80052b0:	08005537 	.word	0x08005537
 80052b4:	0800531f 	.word	0x0800531f
 80052b8:	08005537 	.word	0x08005537
 80052bc:	08005537 	.word	0x08005537
 80052c0:	08005537 	.word	0x08005537
 80052c4:	08005537 	.word	0x08005537
 80052c8:	08005537 	.word	0x08005537
 80052cc:	08005537 	.word	0x08005537
 80052d0:	08005537 	.word	0x08005537
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005537 	.word	0x08005537
 80052dc:	08005537 	.word	0x08005537
 80052e0:	08005537 	.word	0x08005537
 80052e4:	08005537 	.word	0x08005537
 80052e8:	08005537 	.word	0x08005537
 80052ec:	08005537 	.word	0x08005537
 80052f0:	08005537 	.word	0x08005537
 80052f4:	0800532b 	.word	0x0800532b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f8:	4b94      	ldr	r3, [pc, #592]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005304:	4b91      	ldr	r3, [pc, #580]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	4a90      	ldr	r2, [pc, #576]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005316:	e111      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005318:	4b8d      	ldr	r3, [pc, #564]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800531a:	61bb      	str	r3, [r7, #24]
      break;
 800531c:	e10e      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800531e:	4b8d      	ldr	r3, [pc, #564]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005320:	61bb      	str	r3, [r7, #24]
      break;
 8005322:	e10b      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005324:	4b8c      	ldr	r3, [pc, #560]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005326:	61bb      	str	r3, [r7, #24]
      break;
 8005328:	e108      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800532a:	4b88      	ldr	r3, [pc, #544]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005334:	4b85      	ldr	r3, [pc, #532]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800533e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005340:	4b82      	ldr	r3, [pc, #520]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800534a:	4b80      	ldr	r3, [pc, #512]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80e1 	beq.w	8005530 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b02      	cmp	r3, #2
 8005372:	f000 8083 	beq.w	800547c <HAL_RCC_GetSysClockFreq+0x204>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b02      	cmp	r3, #2
 800537a:	f200 80a1 	bhi.w	80054c0 <HAL_RCC_GetSysClockFreq+0x248>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x114>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d056      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x1c0>
 800538a:	e099      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538c:	4b6f      	ldr	r3, [pc, #444]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02d      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005398:	4b6c      	ldr	r3, [pc, #432]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	4a6b      	ldr	r2, [pc, #428]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b62      	ldr	r3, [pc, #392]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053f2:	e087      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005560 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b51      	ldr	r3, [pc, #324]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a02 	vldr	s12, [r7, #8]
 800541a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005436:	e065      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005564 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b40      	ldr	r3, [pc, #256]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a02 	vldr	s12, [r7, #8]
 800545e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800547a:	e043      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005568 <HAL_RCC_GetSysClockFreq+0x2f0>
 800548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548e:	4b2f      	ldr	r3, [pc, #188]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054be:	e021      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005564 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d2:	4b1e      	ldr	r3, [pc, #120]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005502:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	0a5b      	lsrs	r3, r3, #9
 800550a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550e:	3301      	adds	r3, #1
 8005510:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800551c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800552e:	e005      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
      break;
 8005534:	e002      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005538:	61bb      	str	r3, [r7, #24]
      break;
 800553a:	bf00      	nop
  }

  return sysclockfreq;
 800553c:	69bb      	ldr	r3, [r7, #24]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3724      	adds	r7, #36	@ 0x24
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
 8005550:	03d09000 	.word	0x03d09000
 8005554:	003d0900 	.word	0x003d0900
 8005558:	017d7840 	.word	0x017d7840
 800555c:	46000000 	.word	0x46000000
 8005560:	4c742400 	.word	0x4c742400
 8005564:	4a742400 	.word	0x4a742400
 8005568:	4bbebc20 	.word	0x4bbebc20

0800556c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005572:	f7ff fe81 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005576:	4602      	mov	r2, r0
 8005578:	4b10      	ldr	r3, [pc, #64]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x50>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	490f      	ldr	r1, [pc, #60]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005584:	5ccb      	ldrb	r3, [r1, r3]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	fa22 f303 	lsr.w	r3, r2, r3
 800558e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x50>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	fa22 f303 	lsr.w	r3, r2, r3
 80055a6:	4a07      	ldr	r2, [pc, #28]	@ (80055c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80055a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055aa:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055b0:	4b04      	ldr	r3, [pc, #16]	@ (80055c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	58024400 	.word	0x58024400
 80055c0:	0800e0fc 	.word	0x0800e0fc
 80055c4:	24000004 	.word	0x24000004
 80055c8:	24000000 	.word	0x24000000

080055cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055d0:	f7ff ffcc 	bl	800556c <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4904      	ldr	r1, [pc, #16]	@ (80055f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	58024400 	.word	0x58024400
 80055f4:	0800e0fc 	.word	0x0800e0fc

080055f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055fc:	f7ff ffb6 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b06      	ldr	r3, [pc, #24]	@ (800561c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4904      	ldr	r1, [pc, #16]	@ (8005620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	58024400 	.word	0x58024400
 8005620:	0800e0fc 	.word	0x0800e0fc

08005624 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005628:	b0ca      	sub	sp, #296	@ 0x128
 800562a:	af00      	add	r7, sp, #0
 800562c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005636:	2300      	movs	r3, #0
 8005638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005648:	2500      	movs	r5, #0
 800564a:	ea54 0305 	orrs.w	r3, r4, r5
 800564e:	d049      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005656:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800565a:	d02f      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800565c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005660:	d828      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005666:	d01a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005668:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800566c:	d822      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005676:	d007      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005678:	e01c      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800567a:	4bb8      	ldr	r3, [pc, #736]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	4ab7      	ldr	r2, [pc, #732]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005686:	e01a      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	3308      	adds	r3, #8
 800568e:	2102      	movs	r1, #2
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fc8f 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800569c:	e00f      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	3328      	adds	r3, #40	@ 0x28
 80056a4:	2102      	movs	r1, #2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fd36 	bl	8007118 <RCCEx_PLL3_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056b2:	e004      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ba:	e000      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056c6:	4ba5      	ldr	r3, [pc, #660]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d4:	4aa1      	ldr	r2, [pc, #644]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80056da:	e003      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80056f0:	f04f 0900 	mov.w	r9, #0
 80056f4:	ea58 0309 	orrs.w	r3, r8, r9
 80056f8:	d047      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	2b04      	cmp	r3, #4
 8005702:	d82a      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005704:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005721 	.word	0x08005721
 8005710:	0800572f 	.word	0x0800572f
 8005714:	08005745 	.word	0x08005745
 8005718:	08005763 	.word	0x08005763
 800571c:	08005763 	.word	0x08005763
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4b8e      	ldr	r3, [pc, #568]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	4a8d      	ldr	r2, [pc, #564]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800572c:	e01a      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	3308      	adds	r3, #8
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fc3c 	bl	8006fb4 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005742:	e00f      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	3328      	adds	r3, #40	@ 0x28
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f001 fce3 	bl	8007118 <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005758:	e004      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800576c:	4b7b      	ldr	r3, [pc, #492]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005770:	f023 0107 	bic.w	r1, r3, #7
 8005774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577a:	4a78      	ldr	r2, [pc, #480]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005796:	f04f 0b00 	mov.w	fp, #0
 800579a:	ea5a 030b 	orrs.w	r3, sl, fp
 800579e:	d04c      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057aa:	d030      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b0:	d829      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b4:	d02d      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80057b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b8:	d825      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057ba:	2b80      	cmp	r3, #128	@ 0x80
 80057bc:	d018      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057be:	2b80      	cmp	r3, #128	@ 0x80
 80057c0:	d821      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057c6:	2b40      	cmp	r3, #64	@ 0x40
 80057c8:	d007      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057ca:	e01c      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4b63      	ldr	r3, [pc, #396]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	4a62      	ldr	r2, [pc, #392]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057d8:	e01c      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057de:	3308      	adds	r3, #8
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fbe6 	bl	8006fb4 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057ee:	e011      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	3328      	adds	r3, #40	@ 0x28
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fc8d 	bl	8007118 <RCCEx_PLL3_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005804:	e006      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800580c:	e002      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800580e:	bf00      	nop
 8005810:	e000      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800581c:	4b4f      	ldr	r3, [pc, #316]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800581e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005820:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582a:	4a4c      	ldr	r2, [pc, #304]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800582c:	430b      	orrs	r3, r1
 800582e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005830:	e003      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005846:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005850:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005854:	460b      	mov	r3, r1
 8005856:	4313      	orrs	r3, r2
 8005858:	d053      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005862:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005866:	d035      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005868:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800586c:	d82e      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800586e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005872:	d031      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005874:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005878:	d828      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800587a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800587e:	d01a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005880:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005884:	d822      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800588a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800588e:	d007      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005890:	e01c      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005892:	4b32      	ldr	r3, [pc, #200]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	4a31      	ldr	r2, [pc, #196]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800589c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800589e:	e01c      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a4:	3308      	adds	r3, #8
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fb83 	bl	8006fb4 <RCCEx_PLL2_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058b4:	e011      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	3328      	adds	r3, #40	@ 0x28
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 fc2a 	bl	8007118 <RCCEx_PLL3_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058ca:	e006      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058d2:	e002      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058e2:	4b1e      	ldr	r3, [pc, #120]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058f2:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80058f8:	e003      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800590e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005912:	2300      	movs	r3, #0
 8005914:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005918:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d056      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800592a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800592e:	d038      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005934:	d831      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005936:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800593a:	d034      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800593c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005940:	d82b      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005946:	d01d      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800594c:	d825      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005958:	e01f      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005960:	4ba2      	ldr	r3, [pc, #648]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	4aa1      	ldr	r2, [pc, #644]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800596a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800596c:	e01c      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	3308      	adds	r3, #8
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fb1c 	bl	8006fb4 <RCCEx_PLL2_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005982:	e011      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	3328      	adds	r3, #40	@ 0x28
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fbc3 	bl	8007118 <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005998:	e006      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a0:	e002      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059b0:	4b8e      	ldr	r3, [pc, #568]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059c0:	4a8a      	ldr	r2, [pc, #552]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c6:	e003      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d03a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	2b30      	cmp	r3, #48	@ 0x30
 80059f8:	d01f      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059fa:	2b30      	cmp	r3, #48	@ 0x30
 80059fc:	d819      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d00c      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d815      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d019      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d111      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0e:	4b77      	ldr	r3, [pc, #476]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	4a76      	ldr	r2, [pc, #472]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a1a:	e011      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	3308      	adds	r3, #8
 8005a22:	2102      	movs	r1, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fac5 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a30:	e006      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a38:	e002      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a48:	4b68      	ldr	r3, [pc, #416]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a56:	4a65      	ldr	r2, [pc, #404]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a5c:	e003      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a76:	2300      	movs	r3, #0
 8005a78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d051      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a90:	d035      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a96:	d82e      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a9c:	d031      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aa2:	d828      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa8:	d01a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aae:	d822      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d007      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005aba:	e01c      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4b4b      	ldr	r3, [pc, #300]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ac8:	e01c      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ace:	3308      	adds	r3, #8
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 fa6e 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ade:	e011      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae4:	3328      	adds	r3, #40	@ 0x28
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fb15 	bl	8007118 <RCCEx_PLL3_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b0c:	4b37      	ldr	r3, [pc, #220]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1a:	4a34      	ldr	r2, [pc, #208]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b20:	e003      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b44:	460b      	mov	r3, r1
 8005b46:	4313      	orrs	r3, r2
 8005b48:	d056      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b54:	d033      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b5a:	d82c      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b60:	d02f      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b66:	d826      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b6c:	d02b      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b72:	d820      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b78:	d012      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b7e:	d81a      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d022      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b88:	d115      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2101      	movs	r1, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fa0e 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b9e:	e015      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	3328      	adds	r3, #40	@ 0x28
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 fab5 	bl	8007118 <RCCEx_PLL3_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bbc:	e006      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e004      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10d      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bd4:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be2:	4a02      	ldr	r2, [pc, #8]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005be8:	e006      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bea:	bf00      	nop
 8005bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d055      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c24:	d033      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c2a:	d82c      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c30:	d02f      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c36:	d826      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c3c:	d02b      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c42:	d820      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c48:	d012      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c4e:	d81a      	bhi.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d022      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c58:	d115      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	3308      	adds	r3, #8
 8005c60:	2101      	movs	r1, #1
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 f9a6 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c6e:	e015      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	3328      	adds	r3, #40	@ 0x28
 8005c76:	2101      	movs	r1, #1
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 fa4d 	bl	8007118 <RCCEx_PLL3_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c84:	e00a      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c8c:	e006      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e004      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c92:	bf00      	nop
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c96:	bf00      	nop
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ca4:	4ba3      	ldr	r3, [pc, #652]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cb4:	4a9f      	ldr	r2, [pc, #636]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	d037      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cee:	d00e      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf4:	d816      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cfe:	d111      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d00:	4b8c      	ldr	r3, [pc, #560]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	4a8b      	ldr	r2, [pc, #556]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d0c:	e00f      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	3308      	adds	r3, #8
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f94c 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d22:	e004      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d36:	4b7f      	ldr	r3, [pc, #508]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d44:	4a7b      	ldr	r2, [pc, #492]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d4a:	e003      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	d039      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d81c      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005dc1 	.word	0x08005dc1
 8005d88:	08005d95 	.word	0x08005d95
 8005d8c:	08005da3 	.word	0x08005da3
 8005d90:	08005dc1 	.word	0x08005dc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d94:	4b67      	ldr	r3, [pc, #412]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4a66      	ldr	r2, [pc, #408]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005da0:	e00f      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da6:	3308      	adds	r3, #8
 8005da8:	2102      	movs	r1, #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f902 	bl	8006fb4 <RCCEx_PLL2_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005db6:	e004      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dca:	4b5a      	ldr	r3, [pc, #360]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dce:	f023 0103 	bic.w	r1, r3, #3
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd8:	4a56      	ldr	r2, [pc, #344]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dde:	e003      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005df4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e02:	460b      	mov	r3, r1
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f000 809f 	beq.w	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e16:	f7fb fe17 	bl	8001a48 <HAL_GetTick>
 8005e1a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e1e:	e00b      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e20:	f7fb fe12 	bl	8001a48 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b64      	cmp	r3, #100	@ 0x64
 8005e2e:	d903      	bls.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e36:	e005      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e38:	4b3f      	ldr	r3, [pc, #252]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0ed      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d179      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e4c:	4b39      	ldr	r3, [pc, #228]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e58:	4053      	eors	r3, r2
 8005e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d015      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e62:	4b34      	ldr	r3, [pc, #208]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e6e:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e72:	4a30      	ldr	r2, [pc, #192]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e86:	4a2b      	ldr	r2, [pc, #172]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9a:	d118      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7fb fdd4 	bl	8001a48 <HAL_GetTick>
 8005ea0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea4:	e00d      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fb fdcf 	bl	8001a48 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005eb0:	1ad2      	subs	r2, r2, r3
 8005eb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d903      	bls.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ec0:	e005      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0eb      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d129      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee6:	d10e      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ef8:	091a      	lsrs	r2, r3, #4
 8005efa:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	4a0d      	ldr	r2, [pc, #52]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6113      	str	r3, [r2, #16]
 8005f04:	e005      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005f06:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f10:	6113      	str	r3, [r2, #16]
 8005f12:	4b08      	ldr	r3, [pc, #32]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f22:	4a04      	ldr	r2, [pc, #16]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f28:	e00e      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f32:	e009      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f34:	58024400 	.word	0x58024400
 8005f38:	58024800 	.word	0x58024800
 8005f3c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f002 0301 	and.w	r3, r2, #1
 8005f54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f000 8089 	beq.w	800607c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f70:	2b28      	cmp	r3, #40	@ 0x28
 8005f72:	d86b      	bhi.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08006055 	.word	0x08006055
 8005f80:	0800604d 	.word	0x0800604d
 8005f84:	0800604d 	.word	0x0800604d
 8005f88:	0800604d 	.word	0x0800604d
 8005f8c:	0800604d 	.word	0x0800604d
 8005f90:	0800604d 	.word	0x0800604d
 8005f94:	0800604d 	.word	0x0800604d
 8005f98:	0800604d 	.word	0x0800604d
 8005f9c:	08006021 	.word	0x08006021
 8005fa0:	0800604d 	.word	0x0800604d
 8005fa4:	0800604d 	.word	0x0800604d
 8005fa8:	0800604d 	.word	0x0800604d
 8005fac:	0800604d 	.word	0x0800604d
 8005fb0:	0800604d 	.word	0x0800604d
 8005fb4:	0800604d 	.word	0x0800604d
 8005fb8:	0800604d 	.word	0x0800604d
 8005fbc:	08006037 	.word	0x08006037
 8005fc0:	0800604d 	.word	0x0800604d
 8005fc4:	0800604d 	.word	0x0800604d
 8005fc8:	0800604d 	.word	0x0800604d
 8005fcc:	0800604d 	.word	0x0800604d
 8005fd0:	0800604d 	.word	0x0800604d
 8005fd4:	0800604d 	.word	0x0800604d
 8005fd8:	0800604d 	.word	0x0800604d
 8005fdc:	08006055 	.word	0x08006055
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	0800604d 	.word	0x0800604d
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	0800604d 	.word	0x0800604d
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	08006055 	.word	0x08006055
 8006000:	0800604d 	.word	0x0800604d
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	0800604d 	.word	0x0800604d
 8006014:	0800604d 	.word	0x0800604d
 8006018:	0800604d 	.word	0x0800604d
 800601c:	08006055 	.word	0x08006055
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	3308      	adds	r3, #8
 8006026:	2101      	movs	r1, #1
 8006028:	4618      	mov	r0, r3
 800602a:	f000 ffc3 	bl	8006fb4 <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006034:	e00f      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603a:	3328      	adds	r3, #40	@ 0x28
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f001 f86a 	bl	8007118 <RCCEx_PLL3_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800604a:	e004      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800605e:	4bbf      	ldr	r3, [pc, #764]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800606c:	4abb      	ldr	r2, [pc, #748]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800606e:	430b      	orrs	r3, r1
 8006070:	6553      	str	r3, [r2, #84]	@ 0x54
 8006072:	e003      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f002 0302 	and.w	r3, r2, #2
 8006088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006092:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006096:	460b      	mov	r3, r1
 8006098:	4313      	orrs	r3, r2
 800609a:	d041      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800609c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d824      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060f9 	.word	0x080060f9
 80060b0:	080060c5 	.word	0x080060c5
 80060b4:	080060db 	.word	0x080060db
 80060b8:	080060f9 	.word	0x080060f9
 80060bc:	080060f9 	.word	0x080060f9
 80060c0:	080060f9 	.word	0x080060f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c8:	3308      	adds	r3, #8
 80060ca:	2101      	movs	r1, #1
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 ff71 	bl	8006fb4 <RCCEx_PLL2_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060d8:	e00f      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	3328      	adds	r3, #40	@ 0x28
 80060e0:	2101      	movs	r1, #1
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 f818 	bl	8007118 <RCCEx_PLL3_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060ee:	e004      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006102:	4b96      	ldr	r3, [pc, #600]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006106:	f023 0107 	bic.w	r1, r3, #7
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006110:	4a92      	ldr	r2, [pc, #584]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006112:	430b      	orrs	r3, r1
 8006114:	6553      	str	r3, [r2, #84]	@ 0x54
 8006116:	e003      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f002 0304 	and.w	r3, r2, #4
 800612c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006130:	2300      	movs	r3, #0
 8006132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006136:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800613a:	460b      	mov	r3, r1
 800613c:	4313      	orrs	r3, r2
 800613e:	d044      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006148:	2b05      	cmp	r3, #5
 800614a:	d825      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800614c:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	080061a1 	.word	0x080061a1
 8006158:	0800616d 	.word	0x0800616d
 800615c:	08006183 	.word	0x08006183
 8006160:	080061a1 	.word	0x080061a1
 8006164:	080061a1 	.word	0x080061a1
 8006168:	080061a1 	.word	0x080061a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006170:	3308      	adds	r3, #8
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f000 ff1d 	bl	8006fb4 <RCCEx_PLL2_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006180:	e00f      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	3328      	adds	r3, #40	@ 0x28
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f000 ffc4 	bl	8007118 <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80061a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061aa:	4b6c      	ldr	r3, [pc, #432]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ae:	f023 0107 	bic.w	r1, r3, #7
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ba:	4a68      	ldr	r2, [pc, #416]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	6593      	str	r3, [r2, #88]	@ 0x58
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f002 0320 	and.w	r3, r2, #32
 80061d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061e4:	460b      	mov	r3, r1
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d055      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061f6:	d033      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061fc:	d82c      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006202:	d02f      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006208:	d826      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800620a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800620e:	d02b      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006210:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006214:	d820      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800621a:	d012      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800621c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006220:	d81a      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d022      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800622a:	d115      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006230:	3308      	adds	r3, #8
 8006232:	2100      	movs	r1, #0
 8006234:	4618      	mov	r0, r3
 8006236:	f000 febd 	bl	8006fb4 <RCCEx_PLL2_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006240:	e015      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	3328      	adds	r3, #40	@ 0x28
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ff64 	bl	8007118 <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006256:	e00a      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800625e:	e006      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006260:	bf00      	nop
 8006262:	e004      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006264:	bf00      	nop
 8006266:	e002      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006268:	bf00      	nop
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800626c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006276:	4b39      	ldr	r3, [pc, #228]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006286:	4a35      	ldr	r2, [pc, #212]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006288:	430b      	orrs	r3, r1
 800628a:	6553      	str	r3, [r2, #84]	@ 0x54
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80062a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d058      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062c2:	d033      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062c8:	d82c      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ce:	d02f      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d4:	d826      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062da:	d02b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e0:	d820      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e6:	d012      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062ec:	d81a      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d022      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f6:	d115      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	3308      	adds	r3, #8
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fe57 	bl	8006fb4 <RCCEx_PLL2_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800630c:	e015      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	3328      	adds	r3, #40	@ 0x28
 8006314:	2102      	movs	r1, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fefe 	bl	8007118 <RCCEx_PLL3_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006322:	e00a      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800632a:	e006      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800632c:	bf00      	nop
 800632e:	e004      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006330:	bf00      	nop
 8006332:	e002      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10e      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006342:	4b06      	ldr	r3, [pc, #24]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006346:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006352:	4a02      	ldr	r2, [pc, #8]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6593      	str	r3, [r2, #88]	@ 0x58
 8006358:	e006      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800635a:	bf00      	nop
 800635c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800637e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d055      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006390:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006394:	d033      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006396:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800639a:	d82c      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a0:	d02f      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a6:	d826      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063ac:	d02b      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80063ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063b2:	d820      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b8:	d012      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80063ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063be:	d81a      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d022      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c8:	d115      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ce:	3308      	adds	r3, #8
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fdee 	bl	8006fb4 <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063de:	e015      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e4:	3328      	adds	r3, #40	@ 0x28
 80063e6:	2102      	movs	r1, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fe95 	bl	8007118 <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063f4:	e00a      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063fc:	e006      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800640a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006414:	4ba1      	ldr	r3, [pc, #644]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006418:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006424:	4a9d      	ldr	r2, [pc, #628]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006426:	430b      	orrs	r3, r1
 8006428:	6593      	str	r3, [r2, #88]	@ 0x58
 800642a:	e003      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f002 0308 	and.w	r3, r2, #8
 8006440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800644a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d01e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800645c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006460:	d10c      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006466:	3328      	adds	r3, #40	@ 0x28
 8006468:	2102      	movs	r1, #2
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fe54 	bl	8007118 <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800647c:	4b87      	ldr	r3, [pc, #540]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006480:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648c:	4a83      	ldr	r2, [pc, #524]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648e:	430b      	orrs	r3, r1
 8006490:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f002 0310 	and.w	r3, r2, #16
 800649e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80064ac:	460b      	mov	r3, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	d01e      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c4:	3328      	adds	r3, #40	@ 0x28
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fe25 	bl	8007118 <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064da:	4b70      	ldr	r3, [pc, #448]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ea:	4a6c      	ldr	r2, [pc, #432]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80064fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006506:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d03e      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800651c:	d022      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800651e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006522:	d81b      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652c:	d00b      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800652e:	e015      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	3308      	adds	r3, #8
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fd3b 	bl	8006fb4 <RCCEx_PLL2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006544:	e00f      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	3328      	adds	r3, #40	@ 0x28
 800654c:	2102      	movs	r1, #2
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fde2 	bl	8007118 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800656e:	4b4b      	ldr	r3, [pc, #300]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800657e:	4a47      	ldr	r2, [pc, #284]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6593      	str	r3, [r2, #88]	@ 0x58
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800659a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800659c:	2300      	movs	r3, #0
 800659e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d03b      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065b6:	d01f      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80065b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065bc:	d818      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80065be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065c2:	d003      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065c8:	d007      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065ca:	e011      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065cc:	4b33      	ldr	r3, [pc, #204]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	4a32      	ldr	r2, [pc, #200]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065d8:	e00f      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	3328      	adds	r3, #40	@ 0x28
 80065e0:	2101      	movs	r1, #1
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fd98 	bl	8007118 <RCCEx_PLL3_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80065ee:	e004      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006602:	4b26      	ldr	r3, [pc, #152]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006606:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006612:	4a22      	ldr	r2, [pc, #136]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6553      	str	r3, [r2, #84]	@ 0x54
 8006618:	e003      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800662e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006630:	2300      	movs	r3, #0
 8006632:	677b      	str	r3, [r7, #116]	@ 0x74
 8006634:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006638:	460b      	mov	r3, r1
 800663a:	4313      	orrs	r3, r2
 800663c:	d034      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664c:	d007      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800664e:	e011      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4b12      	ldr	r3, [pc, #72]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	4a11      	ldr	r2, [pc, #68]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800665c:	e00e      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	3308      	adds	r3, #8
 8006664:	2102      	movs	r1, #2
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fca4 	bl	8006fb4 <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800667a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10d      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006684:	4b05      	ldr	r3, [pc, #20]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006688:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006692:	4a02      	ldr	r2, [pc, #8]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006694:	430b      	orrs	r3, r1
 8006696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800669a:	bf00      	nop
 800669c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066b6:	2300      	movs	r3, #0
 80066b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00c      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c8:	3328      	adds	r3, #40	@ 0x28
 80066ca:	2102      	movs	r1, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fd23 	bl	8007118 <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ec:	2300      	movs	r3, #0
 80066ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80066f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d038      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006706:	d018      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800670c:	d811      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800670e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006712:	d014      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d80b      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d011      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800671e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006722:	d106      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006724:	4bc3      	ldr	r3, [pc, #780]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	4ac2      	ldr	r2, [pc, #776]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800672e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800673a:	bf00      	nop
 800673c:	e002      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800674c:	4bb9      	ldr	r3, [pc, #740]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800674e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006750:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675c:	4ab5      	ldr	r2, [pc, #724]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800675e:	430b      	orrs	r3, r1
 8006760:	6553      	str	r3, [r2, #84]	@ 0x54
 8006762:	e003      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006778:	65bb      	str	r3, [r7, #88]	@ 0x58
 800677a:	2300      	movs	r3, #0
 800677c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800677e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006788:	4baa      	ldr	r3, [pc, #680]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800678a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006796:	4aa7      	ldr	r2, [pc, #668]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80067aa:	2300      	movs	r3, #0
 80067ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80067ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067c8:	4a9a      	ldr	r2, [pc, #616]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067dc:	2300      	movs	r3, #0
 80067de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d009      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067ea:	4b92      	ldr	r3, [pc, #584]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f8:	4a8e      	ldr	r2, [pc, #568]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800680a:	643b      	str	r3, [r7, #64]	@ 0x40
 800680c:	2300      	movs	r3, #0
 800680e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006810:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006814:	460b      	mov	r3, r1
 8006816:	4313      	orrs	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800681a:	4b86      	ldr	r3, [pc, #536]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	4a85      	ldr	r2, [pc, #532]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006820:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006824:	6113      	str	r3, [r2, #16]
 8006826:	4b83      	ldr	r3, [pc, #524]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006828:	6919      	ldr	r1, [r3, #16]
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006832:	4a80      	ldr	r2, [pc, #512]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006834:	430b      	orrs	r3, r1
 8006836:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006846:	2300      	movs	r3, #0
 8006848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800684a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800684e:	460b      	mov	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	d009      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006854:	4b77      	ldr	r3, [pc, #476]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006858:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006862:	4a74      	ldr	r2, [pc, #464]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006864:	430b      	orrs	r3, r1
 8006866:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006874:	633b      	str	r3, [r7, #48]	@ 0x30
 8006876:	2300      	movs	r3, #0
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
 800687a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800687e:	460b      	mov	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	d00a      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006884:	4b6b      	ldr	r3, [pc, #428]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006894:	4a67      	ldr	r2, [pc, #412]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006896:	430b      	orrs	r3, r1
 8006898:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	2100      	movs	r1, #0
 80068a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068b0:	460b      	mov	r3, r1
 80068b2:	4313      	orrs	r3, r2
 80068b4:	d011      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	3308      	adds	r3, #8
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb78 	bl	8006fb4 <RCCEx_PLL2_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	2100      	movs	r1, #0
 80068e4:	6239      	str	r1, [r7, #32]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d011      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	3308      	adds	r3, #8
 80068fc:	2101      	movs	r1, #1
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fb58 	bl	8006fb4 <RCCEx_PLL2_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800690a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	2100      	movs	r1, #0
 8006924:	61b9      	str	r1, [r7, #24]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006930:	460b      	mov	r3, r1
 8006932:	4313      	orrs	r3, r2
 8006934:	d011      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	3308      	adds	r3, #8
 800693c:	2102      	movs	r1, #2
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fb38 	bl	8006fb4 <RCCEx_PLL2_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800694a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	2100      	movs	r1, #0
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006970:	460b      	mov	r3, r1
 8006972:	4313      	orrs	r3, r2
 8006974:	d011      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	3328      	adds	r3, #40	@ 0x28
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fbca 	bl	8007118 <RCCEx_PLL3_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800698a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	2100      	movs	r1, #0
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d011      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	3328      	adds	r3, #40	@ 0x28
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fbaa 	bl	8007118 <RCCEx_PLL3_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	2100      	movs	r1, #0
 80069e4:	6039      	str	r1, [r7, #0]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d011      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	3328      	adds	r3, #40	@ 0x28
 80069fc:	2102      	movs	r1, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fb8a 	bl	8007118 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a34:	58024400 	.word	0x58024400

08006a38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a3c:	f7fe fd96 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4904      	ldr	r1, [pc, #16]	@ (8006a60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a4e:	5ccb      	ldrb	r3, [r1, r3]
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	58024400 	.word	0x58024400
 8006a60:	0800e0fc 	.word	0x0800e0fc

08006a64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b089      	sub	sp, #36	@ 0x24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a6c:	4ba1      	ldr	r3, [pc, #644]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a76:	4b9f      	ldr	r3, [pc, #636]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7a:	0b1b      	lsrs	r3, r3, #12
 8006a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a82:	4b9c      	ldr	r3, [pc, #624]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a8e:	4b99      	ldr	r3, [pc, #612]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a92:	08db      	lsrs	r3, r3, #3
 8006a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8111 	beq.w	8006cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f000 8083 	beq.w	8006bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	f200 80a1 	bhi.w	8006c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d056      	beq.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ace:	e099      	b.n	8006c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ad0:	4b88      	ldr	r3, [pc, #544]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d02d      	beq.n	8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006adc:	4b85      	ldr	r3, [pc, #532]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	08db      	lsrs	r3, r3, #3
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	4a84      	ldr	r2, [pc, #528]	@ (8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b06:	4b7b      	ldr	r3, [pc, #492]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b36:	e087      	b.n	8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b7a:	e065      	b.n	8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b59      	ldr	r3, [pc, #356]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bbe:	e043      	b.n	8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b48      	ldr	r3, [pc, #288]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c02:	e021      	b.n	8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b37      	ldr	r3, [pc, #220]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c48:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	0a5b      	lsrs	r3, r3, #9
 8006c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6e:	ee17 2a90 	vmov	r2, s15
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c76:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9c:	ee17 2a90 	vmov	r2, s15
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ca4:	4b13      	ldr	r3, [pc, #76]	@ (8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	0e1b      	lsrs	r3, r3, #24
 8006caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cca:	ee17 2a90 	vmov	r2, s15
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	609a      	str	r2, [r3, #8]
}
 8006ce6:	bf00      	nop
 8006ce8:	3724      	adds	r7, #36	@ 0x24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	03d09000 	.word	0x03d09000
 8006cfc:	46000000 	.word	0x46000000
 8006d00:	4c742400 	.word	0x4c742400
 8006d04:	4a742400 	.word	0x4a742400
 8006d08:	4bbebc20 	.word	0x4bbebc20

08006d0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b089      	sub	sp, #36	@ 0x24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d14:	4ba1      	ldr	r3, [pc, #644]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d1e:	4b9f      	ldr	r3, [pc, #636]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	0d1b      	lsrs	r3, r3, #20
 8006d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d36:	4b99      	ldr	r3, [pc, #612]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3a:	08db      	lsrs	r3, r3, #3
 8006d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8111 	beq.w	8006f7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	f000 8083 	beq.w	8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	f200 80a1 	bhi.w	8006eac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d056      	beq.n	8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d76:	e099      	b.n	8006eac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d78:	4b88      	ldr	r3, [pc, #544]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d02d      	beq.n	8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d84:	4b85      	ldr	r3, [pc, #532]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	08db      	lsrs	r3, r3, #3
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	4a84      	ldr	r2, [pc, #528]	@ (8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
 8006d94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dae:	4b7b      	ldr	r3, [pc, #492]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dde:	e087      	b.n	8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e22:	e065      	b.n	8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e36:	4b59      	ldr	r3, [pc, #356]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e66:	e043      	b.n	8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7a:	4b48      	ldr	r3, [pc, #288]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eaa:	e021      	b.n	8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b37      	ldr	r3, [pc, #220]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	0a5b      	lsrs	r3, r3, #9
 8006ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f16:	ee17 2a90 	vmov	r2, s15
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f44:	ee17 2a90 	vmov	r2, s15
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f4c:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f50:	0e1b      	lsrs	r3, r3, #24
 8006f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f72:	ee17 2a90 	vmov	r2, s15
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f7a:	e008      	b.n	8006f8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	609a      	str	r2, [r3, #8]
}
 8006f8e:	bf00      	nop
 8006f90:	3724      	adds	r7, #36	@ 0x24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	03d09000 	.word	0x03d09000
 8006fa4:	46000000 	.word	0x46000000
 8006fa8:	4c742400 	.word	0x4c742400
 8006fac:	4a742400 	.word	0x4a742400
 8006fb0:	4bbebc20 	.word	0x4bbebc20

08006fb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fc2:	4b53      	ldr	r3, [pc, #332]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d101      	bne.n	8006fd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e099      	b.n	8007106 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fde:	f7fa fd33 	bl	8001a48 <HAL_GetTick>
 8006fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fe4:	e008      	b.n	8006ff8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fe6:	f7fa fd2f 	bl	8001a48 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e086      	b.n	8007106 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff8:	4b45      	ldr	r3, [pc, #276]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f0      	bne.n	8006fe6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007004:	4b42      	ldr	r3, [pc, #264]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	493f      	ldr	r1, [pc, #252]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	628b      	str	r3, [r1, #40]	@ 0x28
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	3b01      	subs	r3, #1
 800701e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	3b01      	subs	r3, #1
 8007028:	025b      	lsls	r3, r3, #9
 800702a:	b29b      	uxth	r3, r3
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	3b01      	subs	r3, #1
 8007034:	041b      	lsls	r3, r3, #16
 8007036:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	3b01      	subs	r3, #1
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007048:	4931      	ldr	r1, [pc, #196]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 800704a:	4313      	orrs	r3, r2
 800704c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800704e:	4b30      	ldr	r3, [pc, #192]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007052:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	492d      	ldr	r1, [pc, #180]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 800705c:	4313      	orrs	r3, r2
 800705e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007060:	4b2b      	ldr	r3, [pc, #172]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007064:	f023 0220 	bic.w	r2, r3, #32
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	4928      	ldr	r1, [pc, #160]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 800706e:	4313      	orrs	r3, r2
 8007070:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007072:	4b27      	ldr	r3, [pc, #156]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	4a26      	ldr	r2, [pc, #152]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007078:	f023 0310 	bic.w	r3, r3, #16
 800707c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800707e:	4b24      	ldr	r3, [pc, #144]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007082:	4b24      	ldr	r3, [pc, #144]	@ (8007114 <RCCEx_PLL2_Config+0x160>)
 8007084:	4013      	ands	r3, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	69d2      	ldr	r2, [r2, #28]
 800708a:	00d2      	lsls	r2, r2, #3
 800708c:	4920      	ldr	r1, [pc, #128]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 800708e:	4313      	orrs	r3, r2
 8007090:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007092:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007096:	4a1e      	ldr	r2, [pc, #120]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 8007098:	f043 0310 	orr.w	r3, r3, #16
 800709c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	4a19      	ldr	r2, [pc, #100]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070b0:	e00f      	b.n	80070d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d106      	bne.n	80070c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070b8:	4b15      	ldr	r3, [pc, #84]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	4a14      	ldr	r2, [pc, #80]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070c4:	e005      	b.n	80070d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070c6:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	4a11      	ldr	r2, [pc, #68]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070de:	f7fa fcb3 	bl	8001a48 <HAL_GetTick>
 80070e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070e4:	e008      	b.n	80070f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070e6:	f7fa fcaf 	bl	8001a48 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e006      	b.n	8007106 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <RCCEx_PLL2_Config+0x15c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	ffff0007 	.word	0xffff0007

08007118 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007126:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d101      	bne.n	8007136 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e099      	b.n	800726a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007136:	4b4f      	ldr	r3, [pc, #316]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4e      	ldr	r2, [pc, #312]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800713c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007142:	f7fa fc81 	bl	8001a48 <HAL_GetTick>
 8007146:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007148:	e008      	b.n	800715c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800714a:	f7fa fc7d 	bl	8001a48 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e086      	b.n	800726a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800715c:	4b45      	ldr	r3, [pc, #276]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f0      	bne.n	800714a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007168:	4b42      	ldr	r3, [pc, #264]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	051b      	lsls	r3, r3, #20
 8007176:	493f      	ldr	r1, [pc, #252]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 8007178:	4313      	orrs	r3, r2
 800717a:	628b      	str	r3, [r1, #40]	@ 0x28
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	3b01      	subs	r3, #1
 8007182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	3b01      	subs	r3, #1
 800718c:	025b      	lsls	r3, r3, #9
 800718e:	b29b      	uxth	r3, r3
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	3b01      	subs	r3, #1
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	061b      	lsls	r3, r3, #24
 80071a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071ac:	4931      	ldr	r1, [pc, #196]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071b2:	4b30      	ldr	r3, [pc, #192]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	492d      	ldr	r1, [pc, #180]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	4928      	ldr	r1, [pc, #160]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071d6:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	4a26      	ldr	r2, [pc, #152]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071e2:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e6:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <RCCEx_PLL3_Config+0x160>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	69d2      	ldr	r2, [r2, #28]
 80071ee:	00d2      	lsls	r2, r2, #3
 80071f0:	4920      	ldr	r1, [pc, #128]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 80071fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007200:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007208:	4b1a      	ldr	r3, [pc, #104]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	4a19      	ldr	r2, [pc, #100]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800720e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007212:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007214:	e00f      	b.n	8007236 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d106      	bne.n	800722a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800721c:	4b15      	ldr	r3, [pc, #84]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 8007222:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007228:	e005      	b.n	8007236 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800722a:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	4a11      	ldr	r2, [pc, #68]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 8007230:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007234:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007236:	4b0f      	ldr	r3, [pc, #60]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a0e      	ldr	r2, [pc, #56]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800723c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007242:	f7fa fc01 	bl	8001a48 <HAL_GetTick>
 8007246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007248:	e008      	b.n	800725c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800724a:	f7fa fbfd 	bl	8001a48 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e006      	b.n	800726a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800725c:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <RCCEx_PLL3_Config+0x15c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
 8007278:	ffff0007 	.word	0xffff0007

0800727c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e10f      	b.n	80074ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a87      	ldr	r2, [pc, #540]	@ (80074b8 <HAL_SPI_Init+0x23c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00f      	beq.n	80072be <HAL_SPI_Init+0x42>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a86      	ldr	r2, [pc, #536]	@ (80074bc <HAL_SPI_Init+0x240>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00a      	beq.n	80072be <HAL_SPI_Init+0x42>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a84      	ldr	r2, [pc, #528]	@ (80074c0 <HAL_SPI_Init+0x244>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d005      	beq.n	80072be <HAL_SPI_Init+0x42>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b0f      	cmp	r3, #15
 80072b8:	d901      	bls.n	80072be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0f7      	b.n	80074ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fe2e 	bl	8007f20 <SPI_GetPacketSize>
 80072c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7b      	ldr	r2, [pc, #492]	@ (80074b8 <HAL_SPI_Init+0x23c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00c      	beq.n	80072ea <HAL_SPI_Init+0x6e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a79      	ldr	r2, [pc, #484]	@ (80074bc <HAL_SPI_Init+0x240>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <HAL_SPI_Init+0x6e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a78      	ldr	r2, [pc, #480]	@ (80074c0 <HAL_SPI_Init+0x244>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d002      	beq.n	80072ea <HAL_SPI_Init+0x6e>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d811      	bhi.n	800730e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072ee:	4a72      	ldr	r2, [pc, #456]	@ (80074b8 <HAL_SPI_Init+0x23c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d009      	beq.n	8007308 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a70      	ldr	r2, [pc, #448]	@ (80074bc <HAL_SPI_Init+0x240>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_SPI_Init+0x8c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a6f      	ldr	r2, [pc, #444]	@ (80074c0 <HAL_SPI_Init+0x244>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d104      	bne.n	8007312 <HAL_SPI_Init+0x96>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b10      	cmp	r3, #16
 800730c:	d901      	bls.n	8007312 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e0cd      	b.n	80074ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7f9 ff4c 	bl	80011c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0201 	bic.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800734e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007358:	d119      	bne.n	800738e <HAL_SPI_Init+0x112>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007362:	d103      	bne.n	800736c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10c      	bne.n	800738e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800737c:	d107      	bne.n	800738e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00f      	beq.n	80073ba <HAL_SPI_Init+0x13e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b06      	cmp	r3, #6
 80073a0:	d90b      	bls.n	80073ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e007      	b.n	80073ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	431a      	orrs	r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073dc:	ea42 0103 	orr.w	r1, r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742a:	ea42 0103 	orr.w	r1, r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d113      	bne.n	800746a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007454:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007468:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0201 	bic.w	r2, r2, #1
 8007478:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40013000 	.word	0x40013000
 80074bc:	40003800 	.word	0x40003800
 80074c0:	40003c00 	.word	0x40003c00

080074c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3320      	adds	r3, #32
 80074da:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074dc:	f7fa fab4 	bl	8001a48 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d001      	beq.n	80074f2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80074ee:	2302      	movs	r3, #2
 80074f0:	e1d1      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_SPI_Transmit+0x3a>
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e1c9      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_SPI_Transmit+0x4c>
 800750c:	2302      	movs	r3, #2
 800750e:	e1c2      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2203      	movs	r2, #3
 800751c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	88fa      	ldrh	r2, [r7, #6]
 8007532:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007568:	d108      	bne.n	800757c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e009      	b.n	8007590 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800758e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4b96      	ldr	r3, [pc, #600]	@ (80077f0 <HAL_SPI_Transmit+0x32c>)
 8007598:	4013      	ands	r3, r2
 800759a:	88f9      	ldrh	r1, [r7, #6]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075bc:	d107      	bne.n	80075ce <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	d947      	bls.n	8007666 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80075d6:	e03f      	b.n	8007658 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d114      	bne.n	8007610 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800760e:	e023      	b.n	8007658 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007610:	f7fa fa1a 	bl	8001a48 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d803      	bhi.n	8007628 <HAL_SPI_Transmit+0x164>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d102      	bne.n	800762e <HAL_SPI_Transmit+0x16a>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d114      	bne.n	8007658 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fba8 	bl	8007d84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800763a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e11e      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1b9      	bne.n	80075d8 <HAL_SPI_Transmit+0x114>
 8007664:	e0f1      	b.n	800784a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b07      	cmp	r3, #7
 800766c:	f240 80e6 	bls.w	800783c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007670:	e05d      	b.n	800772e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d132      	bne.n	80076e6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d918      	bls.n	80076be <HAL_SPI_Transmit+0x1fa>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d014      	beq.n	80076be <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b02      	subs	r3, #2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076bc:	e037      	b.n	800772e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c2:	881a      	ldrh	r2, [r3, #0]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076cc:	1c9a      	adds	r2, r3, #2
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076e4:	e023      	b.n	800772e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076e6:	f7fa f9af 	bl	8001a48 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d803      	bhi.n	80076fe <HAL_SPI_Transmit+0x23a>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d102      	bne.n	8007704 <HAL_SPI_Transmit+0x240>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d114      	bne.n	800772e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fb3d 	bl	8007d84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007710:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e0b3      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d19b      	bne.n	8007672 <HAL_SPI_Transmit+0x1ae>
 800773a:	e086      	b.n	800784a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b02      	cmp	r3, #2
 8007748:	d154      	bne.n	80077f4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b03      	cmp	r3, #3
 8007754:	d918      	bls.n	8007788 <HAL_SPI_Transmit+0x2c4>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775a:	2b40      	cmp	r3, #64	@ 0x40
 800775c:	d914      	bls.n	8007788 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800776e:	1d1a      	adds	r2, r3, #4
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b04      	subs	r3, #4
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007786:	e059      	b.n	800783c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d917      	bls.n	80077c4 <HAL_SPI_Transmit+0x300>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d013      	beq.n	80077c4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077aa:	1c9a      	adds	r2, r3, #2
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b02      	subs	r3, #2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077c2:	e03b      	b.n	800783c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3320      	adds	r3, #32
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077ee:	e025      	b.n	800783c <HAL_SPI_Transmit+0x378>
 80077f0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f4:	f7fa f928 	bl	8001a48 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d803      	bhi.n	800780c <HAL_SPI_Transmit+0x348>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d102      	bne.n	8007812 <HAL_SPI_Transmit+0x34e>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d114      	bne.n	800783c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fab6 	bl	8007d84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800781e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e02c      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	f47f af79 	bne.w	800773c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2200      	movs	r2, #0
 8007852:	2108      	movs	r1, #8
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fb35 	bl	8007ec4 <SPI_WaitOnFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fa87 	bl	8007d84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007894:	2300      	movs	r3, #0
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop

080078a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3301      	adds	r3, #1
 80078ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3330      	adds	r3, #48	@ 0x30
 80078c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c4:	f7fa f8c0 	bl	8001a48 <HAL_GetTick>
 80078c8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d001      	beq.n	80078da <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80078d6:	2302      	movs	r3, #2
 80078d8:	e250      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_SPI_Receive+0x46>
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e248      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_SPI_Receive+0x58>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e241      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2204      	movs	r2, #4
 8007904:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007950:	d108      	bne.n	8007964 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e009      	b.n	8007978 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007976:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4b95      	ldr	r3, [pc, #596]	@ (8007bd4 <HAL_SPI_Receive+0x334>)
 8007980:	4013      	ands	r3, r2
 8007982:	88f9      	ldrh	r1, [r7, #6]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	430b      	orrs	r3, r1
 800798a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079a4:	d107      	bne.n	80079b6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d96c      	bls.n	8007a98 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80079be:	e064      	b.n	8007a8a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d114      	bne.n	8007a00 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80079e0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079fe:	e044      	b.n	8007a8a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	8bfa      	ldrh	r2, [r7, #30]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d919      	bls.n	8007a42 <HAL_SPI_Receive+0x1a2>
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d014      	beq.n	8007a42 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a22:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a28:	1d1a      	adds	r2, r3, #4
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a40:	e023      	b.n	8007a8a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a42:	f7fa f801 	bl	8001a48 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d803      	bhi.n	8007a5a <HAL_SPI_Receive+0x1ba>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d102      	bne.n	8007a60 <HAL_SPI_Receive+0x1c0>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d114      	bne.n	8007a8a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f98f 	bl	8007d84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e178      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d194      	bne.n	80079c0 <HAL_SPI_Receive+0x120>
 8007a96:	e15e      	b.n	8007d56 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b07      	cmp	r3, #7
 8007a9e:	f240 8153 	bls.w	8007d48 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007aa2:	e08f      	b.n	8007bc4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d114      	bne.n	8007ae4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	8812      	ldrh	r2, [r2, #0]
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ae2:	e06f      	b.n	8007bc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8bfa      	ldrh	r2, [r7, #30]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d924      	bls.n	8007b3c <HAL_SPI_Receive+0x29c>
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01f      	beq.n	8007b3c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	8812      	ldrh	r2, [r2, #0]
 8007b04:	b292      	uxth	r2, r2
 8007b06:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b0c:	1c9a      	adds	r2, r3, #2
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	8812      	ldrh	r2, [r2, #0]
 8007b1a:	b292      	uxth	r2, r2
 8007b1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b22:	1c9a      	adds	r2, r3, #2
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b02      	subs	r3, #2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b3a:	e043      	b.n	8007bc4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d119      	bne.n	8007b7c <HAL_SPI_Receive+0x2dc>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d014      	beq.n	8007b7c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	8812      	ldrh	r2, [r2, #0]
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b62:	1c9a      	adds	r2, r3, #2
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b7a:	e023      	b.n	8007bc4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b7c:	f7f9 ff64 	bl	8001a48 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d803      	bhi.n	8007b94 <HAL_SPI_Receive+0x2f4>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d102      	bne.n	8007b9a <HAL_SPI_Receive+0x2fa>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d114      	bne.n	8007bc4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f8f2 	bl	8007d84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e0db      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f af69 	bne.w	8007aa4 <HAL_SPI_Receive+0x204>
 8007bd2:	e0c0      	b.n	8007d56 <HAL_SPI_Receive+0x4b6>
 8007bd4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d117      	bne.n	8007c1e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c1c:	e094      	b.n	8007d48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	8bfa      	ldrh	r2, [r7, #30]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d946      	bls.n	8007cba <HAL_SPI_Receive+0x41a>
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d041      	beq.n	8007cba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c42:	7812      	ldrb	r2, [r2, #0]
 8007c44:	b2d2      	uxtb	r2, r2
 8007c46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c5e:	7812      	ldrb	r2, [r2, #0]
 8007c60:	b2d2      	uxtb	r2, r2
 8007c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b04      	subs	r3, #4
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cb8:	e046      	b.n	8007d48 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d81c      	bhi.n	8007d00 <HAL_SPI_Receive+0x460>
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d017      	beq.n	8007d00 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cfe:	e023      	b.n	8007d48 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d00:	f7f9 fea2 	bl	8001a48 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d803      	bhi.n	8007d18 <HAL_SPI_Receive+0x478>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d102      	bne.n	8007d1e <HAL_SPI_Receive+0x47e>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d114      	bne.n	8007d48 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 f830 	bl	8007d84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e019      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f47f af41 	bne.w	8007bd8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f814 	bl	8007d84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
  }
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0208 	orr.w	r2, r2, #8
 8007da2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0210 	orr.w	r2, r2, #16
 8007db2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0201 	bic.w	r2, r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6919      	ldr	r1, [r3, #16]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b3c      	ldr	r3, [pc, #240]	@ (8007ec0 <SPI_CloseTransfer+0x13c>)
 8007dd0:	400b      	ands	r3, r1
 8007dd2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007de2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b04      	cmp	r3, #4
 8007dee:	d014      	beq.n	8007e1a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00f      	beq.n	8007e1a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699a      	ldr	r2, [r3, #24]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0220 	orr.w	r2, r2, #32
 8007e18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d014      	beq.n	8007e50 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00f      	beq.n	8007e50 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e36:	f043 0204 	orr.w	r2, r3, #4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00f      	beq.n	8007e7a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e60:	f043 0201 	orr.w	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00f      	beq.n	8007ea4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e8a:	f043 0208 	orr.w	r2, r3, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ea2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	fffffc90 	.word	0xfffffc90

08007ec4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ed4:	e010      	b.n	8007ef8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ed6:	f7f9 fdb7 	bl	8001a48 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d803      	bhi.n	8007eee <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d102      	bne.n	8007ef4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e00f      	b.n	8007f18 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d0df      	beq.n	8007ed6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3307      	adds	r3, #7
 8007f3e:	08db      	lsrs	r3, r3, #3
 8007f40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e042      	b.n	8007fee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7f9 fbc6 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	@ 0x24
 8007f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 fa15 	bl	80093d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fcaa 	bl	8008900 <UART_SetConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e01b      	b.n	8007fee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0201 	orr.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fa94 	bl	8009514 <UART_CheckIdleState>
 8007fec:	4603      	mov	r3, r0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b08a      	sub	sp, #40	@ 0x28
 8007ffa:	af02      	add	r7, sp, #8
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800c:	2b20      	cmp	r3, #32
 800800e:	d17b      	bne.n	8008108 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <HAL_UART_Transmit+0x26>
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e074      	b.n	800810a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2221      	movs	r2, #33	@ 0x21
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008030:	f7f9 fd0a 	bl	8001a48 <HAL_GetTick>
 8008034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	88fa      	ldrh	r2, [r7, #6]
 800803a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804e:	d108      	bne.n	8008062 <HAL_UART_Transmit+0x6c>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e003      	b.n	800806a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800806a:	e030      	b.n	80080ce <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2200      	movs	r2, #0
 8008074:	2180      	movs	r1, #128	@ 0x80
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f001 faf6 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e03d      	b.n	800810a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10b      	bne.n	80080ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	3302      	adds	r3, #2
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	e007      	b.n	80080bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3301      	adds	r3, #1
 80080ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1c8      	bne.n	800806c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2140      	movs	r1, #64	@ 0x40
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f001 fabf 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e006      	b.n	800810a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	e000      	b.n	800810a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008108:	2302      	movs	r3, #2
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b0ba      	sub	sp, #232	@ 0xe8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800813a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800813e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008142:	4013      	ands	r3, r2
 8008144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d11b      	bne.n	8008188 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d015      	beq.n	8008188 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800815c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d105      	bne.n	8008174 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800816c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d009      	beq.n	8008188 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8393 	beq.w	80088a4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
      }
      return;
 8008186:	e38d      	b.n	80088a4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8123 	beq.w	80083d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008192:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008196:	4b8d      	ldr	r3, [pc, #564]	@ (80083cc <HAL_UART_IRQHandler+0x2b8>)
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800819e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80081a2:	4b8b      	ldr	r3, [pc, #556]	@ (80083d0 <HAL_UART_IRQHandler+0x2bc>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8116 	beq.w	80083d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d011      	beq.n	80081dc <HAL_UART_IRQHandler+0xc8>
 80081b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d2:	f043 0201 	orr.w	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d011      	beq.n	800820c <HAL_UART_IRQHandler+0xf8>
 80081e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2202      	movs	r2, #2
 80081fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008202:	f043 0204 	orr.w	r2, r3, #4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800820c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d011      	beq.n	800823c <HAL_UART_IRQHandler+0x128>
 8008218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2204      	movs	r2, #4
 800822a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f043 0202 	orr.w	r2, r3, #2
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800823c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008254:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008258:	4b5c      	ldr	r3, [pc, #368]	@ (80083cc <HAL_UART_IRQHandler+0x2b8>)
 800825a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2208      	movs	r2, #8
 8008266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800826e:	f043 0208 	orr.w	r2, r3, #8
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800827c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008280:	2b00      	cmp	r3, #0
 8008282:	d012      	beq.n	80082aa <HAL_UART_IRQHandler+0x196>
 8008284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008288:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00c      	beq.n	80082aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a0:	f043 0220 	orr.w	r2, r3, #32
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 82f9 	beq.w	80088a8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d013      	beq.n	80082ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fe:	2b40      	cmp	r3, #64	@ 0x40
 8008300:	d005      	beq.n	800830e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008306:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800830a:	2b00      	cmp	r3, #0
 800830c:	d054      	beq.n	80083b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fa18 	bl	8009744 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831e:	2b40      	cmp	r3, #64	@ 0x40
 8008320:	d146      	bne.n	80083b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800833c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800834e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800835a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1d9      	bne.n	8008322 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800837e:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <HAL_UART_IRQHandler+0x2c0>)
 8008380:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008388:	4618      	mov	r0, r3
 800838a:	f7fa fb9b 	bl	8002ac4 <HAL_DMA_Abort_IT>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d019      	beq.n	80083c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800839a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80083a2:	4610      	mov	r0, r2
 80083a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a6:	e00f      	b.n	80083c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa93 	bl	80088d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ae:	e00b      	b.n	80083c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa8f 	bl	80088d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b6:	e007      	b.n	80083c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa8b 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80083c6:	e26f      	b.n	80088a8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c8:	bf00      	nop
    return;
 80083ca:	e26d      	b.n	80088a8 <HAL_UART_IRQHandler+0x794>
 80083cc:	10000001 	.word	0x10000001
 80083d0:	04000120 	.word	0x04000120
 80083d4:	08009811 	.word	0x08009811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 8203 	bne.w	80087e8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 81fc 	beq.w	80087e8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 81f5 	beq.w	80087e8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2210      	movs	r2, #16
 8008404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008410:	2b40      	cmp	r3, #64	@ 0x40
 8008412:	f040 816d 	bne.w	80086f0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4aa4      	ldr	r2, [pc, #656]	@ (80086b0 <HAL_UART_IRQHandler+0x59c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d068      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4aa1      	ldr	r2, [pc, #644]	@ (80086b4 <HAL_UART_IRQHandler+0x5a0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d061      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a9f      	ldr	r2, [pc, #636]	@ (80086b8 <HAL_UART_IRQHandler+0x5a4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d05a      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a9c      	ldr	r2, [pc, #624]	@ (80086bc <HAL_UART_IRQHandler+0x5a8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d053      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a9a      	ldr	r2, [pc, #616]	@ (80086c0 <HAL_UART_IRQHandler+0x5ac>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d04c      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a97      	ldr	r2, [pc, #604]	@ (80086c4 <HAL_UART_IRQHandler+0x5b0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d045      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a95      	ldr	r2, [pc, #596]	@ (80086c8 <HAL_UART_IRQHandler+0x5b4>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d03e      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a92      	ldr	r2, [pc, #584]	@ (80086cc <HAL_UART_IRQHandler+0x5b8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d037      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a90      	ldr	r2, [pc, #576]	@ (80086d0 <HAL_UART_IRQHandler+0x5bc>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d030      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a8d      	ldr	r2, [pc, #564]	@ (80086d4 <HAL_UART_IRQHandler+0x5c0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d029      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a8b      	ldr	r2, [pc, #556]	@ (80086d8 <HAL_UART_IRQHandler+0x5c4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d022      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a88      	ldr	r2, [pc, #544]	@ (80086dc <HAL_UART_IRQHandler+0x5c8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d01b      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a86      	ldr	r2, [pc, #536]	@ (80086e0 <HAL_UART_IRQHandler+0x5cc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d014      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a83      	ldr	r2, [pc, #524]	@ (80086e4 <HAL_UART_IRQHandler+0x5d0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00d      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a81      	ldr	r2, [pc, #516]	@ (80086e8 <HAL_UART_IRQHandler+0x5d4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d006      	beq.n	80084f6 <HAL_UART_IRQHandler+0x3e2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a7e      	ldr	r2, [pc, #504]	@ (80086ec <HAL_UART_IRQHandler+0x5d8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d106      	bne.n	8008504 <HAL_UART_IRQHandler+0x3f0>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	b29b      	uxth	r3, r3
 8008502:	e005      	b.n	8008510 <HAL_UART_IRQHandler+0x3fc>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b29b      	uxth	r3, r3
 8008510:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80ad 	beq.w	8008678 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008528:	429a      	cmp	r2, r3
 800852a:	f080 80a5 	bcs.w	8008678 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008534:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008544:	f000 8087 	beq.w	8008656 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800855c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008576:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800857e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800858a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1da      	bne.n	8008548 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80085a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80085c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e1      	bne.n	8008592 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e3      	bne.n	80085ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008636:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008638:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800863c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e4      	bne.n	8008614 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008650:	4618      	mov	r0, r3
 8008652:	f7f9 ff19 	bl	8002488 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008668:	b29b      	uxth	r3, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	b29b      	uxth	r3, r3
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f939 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008676:	e119      	b.n	80088ac <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800867e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008682:	429a      	cmp	r2, r3
 8008684:	f040 8112 	bne.w	80088ac <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008694:	f040 810a 	bne.w	80088ac <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f91e 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
      return;
 80086ac:	e0fe      	b.n	80088ac <HAL_UART_IRQHandler+0x798>
 80086ae:	bf00      	nop
 80086b0:	40020010 	.word	0x40020010
 80086b4:	40020028 	.word	0x40020028
 80086b8:	40020040 	.word	0x40020040
 80086bc:	40020058 	.word	0x40020058
 80086c0:	40020070 	.word	0x40020070
 80086c4:	40020088 	.word	0x40020088
 80086c8:	400200a0 	.word	0x400200a0
 80086cc:	400200b8 	.word	0x400200b8
 80086d0:	40020410 	.word	0x40020410
 80086d4:	40020428 	.word	0x40020428
 80086d8:	40020440 	.word	0x40020440
 80086dc:	40020458 	.word	0x40020458
 80086e0:	40020470 	.word	0x40020470
 80086e4:	40020488 	.word	0x40020488
 80086e8:	400204a0 	.word	0x400204a0
 80086ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800870a:	b29b      	uxth	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80cf 	beq.w	80088b0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80ca 	beq.w	80088b0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800873e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008740:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800874c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e4      	bne.n	800871c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	623b      	str	r3, [r7, #32]
   return(result);
 8008762:	6a3a      	ldr	r2, [r7, #32]
 8008764:	4b55      	ldr	r3, [pc, #340]	@ (80088bc <HAL_UART_IRQHandler+0x7a8>)
 8008766:	4013      	ands	r3, r2
 8008768:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3308      	adds	r3, #8
 8008772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008776:	633a      	str	r2, [r7, #48]	@ 0x30
 8008778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800877c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e3      	bne.n	8008752 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2220      	movs	r2, #32
 800878e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0310 	bic.w	r3, r3, #16
 80087b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80087c0:	61fb      	str	r3, [r7, #28]
 80087c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	69b9      	ldr	r1, [r7, #24]
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	617b      	str	r3, [r7, #20]
   return(result);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e4      	bne.n	800879e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f881 	bl	80088e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087e6:	e063      	b.n	80088b0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00e      	beq.n	8008812 <HAL_UART_IRQHandler+0x6fe>
 80087f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 f83d 	bl	800988a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008810:	e051      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800881a:	2b00      	cmp	r3, #0
 800881c:	d014      	beq.n	8008848 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800881e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800882a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800882e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800883a:	2b00      	cmp	r3, #0
 800883c:	d03a      	beq.n	80088b4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
    }
    return;
 8008846:	e035      	b.n	80088b4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d009      	beq.n	8008868 <HAL_UART_IRQHandler+0x754>
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 ffe7 	bl	8009834 <UART_EndTransmit_IT>
    return;
 8008866:	e026      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800886c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <HAL_UART_IRQHandler+0x774>
 8008874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008878:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f816 	bl	80098b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008886:	e016      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d010      	beq.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008898:	2b00      	cmp	r3, #0
 800889a:	da0c      	bge.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fffe 	bl	800989e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088a2:	e008      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80088a4:	bf00      	nop
 80088a6:	e006      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80088a8:	bf00      	nop
 80088aa:	e004      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80088ac:	bf00      	nop
 80088ae:	e002      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80088b0:	bf00      	nop
 80088b2:	e000      	b.n	80088b6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80088b4:	bf00      	nop
  }
}
 80088b6:	37e8      	adds	r7, #232	@ 0xe8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	effffffe 	.word	0xeffffffe

080088c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008904:	b092      	sub	sp, #72	@ 0x48
 8008906:	af00      	add	r7, sp, #0
 8008908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	431a      	orrs	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	431a      	orrs	r2, r3
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	4313      	orrs	r3, r2
 8008926:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4bbe      	ldr	r3, [pc, #760]	@ (8008c28 <UART_SetConfig+0x328>)
 8008930:	4013      	ands	r3, r2
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008938:	430b      	orrs	r3, r1
 800893a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4ab3      	ldr	r2, [pc, #716]	@ (8008c2c <UART_SetConfig+0x32c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008968:	4313      	orrs	r3, r2
 800896a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	4baf      	ldr	r3, [pc, #700]	@ (8008c30 <UART_SetConfig+0x330>)
 8008974:	4013      	ands	r3, r2
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800897c:	430b      	orrs	r3, r1
 800897e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	f023 010f 	bic.w	r1, r3, #15
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4aa6      	ldr	r2, [pc, #664]	@ (8008c34 <UART_SetConfig+0x334>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d177      	bne.n	8008a90 <UART_SetConfig+0x190>
 80089a0:	4ba5      	ldr	r3, [pc, #660]	@ (8008c38 <UART_SetConfig+0x338>)
 80089a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089a8:	2b28      	cmp	r3, #40	@ 0x28
 80089aa:	d86d      	bhi.n	8008a88 <UART_SetConfig+0x188>
 80089ac:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <UART_SetConfig+0xb4>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	08008a59 	.word	0x08008a59
 80089b8:	08008a89 	.word	0x08008a89
 80089bc:	08008a89 	.word	0x08008a89
 80089c0:	08008a89 	.word	0x08008a89
 80089c4:	08008a89 	.word	0x08008a89
 80089c8:	08008a89 	.word	0x08008a89
 80089cc:	08008a89 	.word	0x08008a89
 80089d0:	08008a89 	.word	0x08008a89
 80089d4:	08008a61 	.word	0x08008a61
 80089d8:	08008a89 	.word	0x08008a89
 80089dc:	08008a89 	.word	0x08008a89
 80089e0:	08008a89 	.word	0x08008a89
 80089e4:	08008a89 	.word	0x08008a89
 80089e8:	08008a89 	.word	0x08008a89
 80089ec:	08008a89 	.word	0x08008a89
 80089f0:	08008a89 	.word	0x08008a89
 80089f4:	08008a69 	.word	0x08008a69
 80089f8:	08008a89 	.word	0x08008a89
 80089fc:	08008a89 	.word	0x08008a89
 8008a00:	08008a89 	.word	0x08008a89
 8008a04:	08008a89 	.word	0x08008a89
 8008a08:	08008a89 	.word	0x08008a89
 8008a0c:	08008a89 	.word	0x08008a89
 8008a10:	08008a89 	.word	0x08008a89
 8008a14:	08008a71 	.word	0x08008a71
 8008a18:	08008a89 	.word	0x08008a89
 8008a1c:	08008a89 	.word	0x08008a89
 8008a20:	08008a89 	.word	0x08008a89
 8008a24:	08008a89 	.word	0x08008a89
 8008a28:	08008a89 	.word	0x08008a89
 8008a2c:	08008a89 	.word	0x08008a89
 8008a30:	08008a89 	.word	0x08008a89
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a89 	.word	0x08008a89
 8008a3c:	08008a89 	.word	0x08008a89
 8008a40:	08008a89 	.word	0x08008a89
 8008a44:	08008a89 	.word	0x08008a89
 8008a48:	08008a89 	.word	0x08008a89
 8008a4c:	08008a89 	.word	0x08008a89
 8008a50:	08008a89 	.word	0x08008a89
 8008a54:	08008a81 	.word	0x08008a81
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e222      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a60:	2304      	movs	r3, #4
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e21e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e21a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a70:	2310      	movs	r3, #16
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e216      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a78:	2320      	movs	r3, #32
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e212      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a80:	2340      	movs	r3, #64	@ 0x40
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e20e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e20a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a69      	ldr	r2, [pc, #420]	@ (8008c3c <UART_SetConfig+0x33c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d130      	bne.n	8008afc <UART_SetConfig+0x1fc>
 8008a9a:	4b67      	ldr	r3, [pc, #412]	@ (8008c38 <UART_SetConfig+0x338>)
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d826      	bhi.n	8008af4 <UART_SetConfig+0x1f4>
 8008aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x1ac>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008ac5 	.word	0x08008ac5
 8008ab0:	08008acd 	.word	0x08008acd
 8008ab4:	08008ad5 	.word	0x08008ad5
 8008ab8:	08008add 	.word	0x08008add
 8008abc:	08008ae5 	.word	0x08008ae5
 8008ac0:	08008aed 	.word	0x08008aed
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e1ec      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008acc:	2304      	movs	r3, #4
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e1e8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ad4:	2308      	movs	r3, #8
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e1e4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008adc:	2310      	movs	r3, #16
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e1e0      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e1dc      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008aec:	2340      	movs	r3, #64	@ 0x40
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e1d8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008af4:	2380      	movs	r3, #128	@ 0x80
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e1d4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a4f      	ldr	r2, [pc, #316]	@ (8008c40 <UART_SetConfig+0x340>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d130      	bne.n	8008b68 <UART_SetConfig+0x268>
 8008b06:	4b4c      	ldr	r3, [pc, #304]	@ (8008c38 <UART_SetConfig+0x338>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d826      	bhi.n	8008b60 <UART_SetConfig+0x260>
 8008b12:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <UART_SetConfig+0x218>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008b31 	.word	0x08008b31
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	08008b41 	.word	0x08008b41
 8008b24:	08008b49 	.word	0x08008b49
 8008b28:	08008b51 	.word	0x08008b51
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b36:	e1b6      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b38:	2304      	movs	r3, #4
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e1b2      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b40:	2308      	movs	r3, #8
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e1ae      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b48:	2310      	movs	r3, #16
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e1aa      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b50:	2320      	movs	r3, #32
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e1a6      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b58:	2340      	movs	r3, #64	@ 0x40
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e1a2      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b60:	2380      	movs	r3, #128	@ 0x80
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e19e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a35      	ldr	r2, [pc, #212]	@ (8008c44 <UART_SetConfig+0x344>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d130      	bne.n	8008bd4 <UART_SetConfig+0x2d4>
 8008b72:	4b31      	ldr	r3, [pc, #196]	@ (8008c38 <UART_SetConfig+0x338>)
 8008b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	d826      	bhi.n	8008bcc <UART_SetConfig+0x2cc>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <UART_SetConfig+0x284>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008b9d 	.word	0x08008b9d
 8008b88:	08008ba5 	.word	0x08008ba5
 8008b8c:	08008bad 	.word	0x08008bad
 8008b90:	08008bb5 	.word	0x08008bb5
 8008b94:	08008bbd 	.word	0x08008bbd
 8008b98:	08008bc5 	.word	0x08008bc5
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e180      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ba4:	2304      	movs	r3, #4
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e17c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bac:	2308      	movs	r3, #8
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e178      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bb4:	2310      	movs	r3, #16
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e174      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e170      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bc4:	2340      	movs	r3, #64	@ 0x40
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e16c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bcc:	2380      	movs	r3, #128	@ 0x80
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e168      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c48 <UART_SetConfig+0x348>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d142      	bne.n	8008c64 <UART_SetConfig+0x364>
 8008bde:	4b16      	ldr	r3, [pc, #88]	@ (8008c38 <UART_SetConfig+0x338>)
 8008be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b05      	cmp	r3, #5
 8008be8:	d838      	bhi.n	8008c5c <UART_SetConfig+0x35c>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <UART_SetConfig+0x2f0>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c09 	.word	0x08008c09
 8008bf4:	08008c11 	.word	0x08008c11
 8008bf8:	08008c19 	.word	0x08008c19
 8008bfc:	08008c21 	.word	0x08008c21
 8008c00:	08008c4d 	.word	0x08008c4d
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e14a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c10:	2304      	movs	r3, #4
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e146      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e142      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c20:	2310      	movs	r3, #16
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e13e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c28:	cfff69f3 	.word	0xcfff69f3
 8008c2c:	58000c00 	.word	0x58000c00
 8008c30:	11fff4ff 	.word	0x11fff4ff
 8008c34:	40011000 	.word	0x40011000
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	40004400 	.word	0x40004400
 8008c40:	40004800 	.word	0x40004800
 8008c44:	40004c00 	.word	0x40004c00
 8008c48:	40005000 	.word	0x40005000
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e128      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c54:	2340      	movs	r3, #64	@ 0x40
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e124      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c5c:	2380      	movs	r3, #128	@ 0x80
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e120      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4acb      	ldr	r2, [pc, #812]	@ (8008f98 <UART_SetConfig+0x698>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d176      	bne.n	8008d5c <UART_SetConfig+0x45c>
 8008c6e:	4bcb      	ldr	r3, [pc, #812]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c76:	2b28      	cmp	r3, #40	@ 0x28
 8008c78:	d86c      	bhi.n	8008d54 <UART_SetConfig+0x454>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <UART_SetConfig+0x380>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008d25 	.word	0x08008d25
 8008c84:	08008d55 	.word	0x08008d55
 8008c88:	08008d55 	.word	0x08008d55
 8008c8c:	08008d55 	.word	0x08008d55
 8008c90:	08008d55 	.word	0x08008d55
 8008c94:	08008d55 	.word	0x08008d55
 8008c98:	08008d55 	.word	0x08008d55
 8008c9c:	08008d55 	.word	0x08008d55
 8008ca0:	08008d2d 	.word	0x08008d2d
 8008ca4:	08008d55 	.word	0x08008d55
 8008ca8:	08008d55 	.word	0x08008d55
 8008cac:	08008d55 	.word	0x08008d55
 8008cb0:	08008d55 	.word	0x08008d55
 8008cb4:	08008d55 	.word	0x08008d55
 8008cb8:	08008d55 	.word	0x08008d55
 8008cbc:	08008d55 	.word	0x08008d55
 8008cc0:	08008d35 	.word	0x08008d35
 8008cc4:	08008d55 	.word	0x08008d55
 8008cc8:	08008d55 	.word	0x08008d55
 8008ccc:	08008d55 	.word	0x08008d55
 8008cd0:	08008d55 	.word	0x08008d55
 8008cd4:	08008d55 	.word	0x08008d55
 8008cd8:	08008d55 	.word	0x08008d55
 8008cdc:	08008d55 	.word	0x08008d55
 8008ce0:	08008d3d 	.word	0x08008d3d
 8008ce4:	08008d55 	.word	0x08008d55
 8008ce8:	08008d55 	.word	0x08008d55
 8008cec:	08008d55 	.word	0x08008d55
 8008cf0:	08008d55 	.word	0x08008d55
 8008cf4:	08008d55 	.word	0x08008d55
 8008cf8:	08008d55 	.word	0x08008d55
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d45 	.word	0x08008d45
 8008d04:	08008d55 	.word	0x08008d55
 8008d08:	08008d55 	.word	0x08008d55
 8008d0c:	08008d55 	.word	0x08008d55
 8008d10:	08008d55 	.word	0x08008d55
 8008d14:	08008d55 	.word	0x08008d55
 8008d18:	08008d55 	.word	0x08008d55
 8008d1c:	08008d55 	.word	0x08008d55
 8008d20:	08008d4d 	.word	0x08008d4d
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e0bc      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e0b8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d34:	2308      	movs	r3, #8
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e0b4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e0b0      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d44:	2320      	movs	r3, #32
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e0ac      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d4c:	2340      	movs	r3, #64	@ 0x40
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e0a8      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d54:	2380      	movs	r3, #128	@ 0x80
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e0a4      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a8f      	ldr	r2, [pc, #572]	@ (8008fa0 <UART_SetConfig+0x6a0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d130      	bne.n	8008dc8 <UART_SetConfig+0x4c8>
 8008d66:	4b8d      	ldr	r3, [pc, #564]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b05      	cmp	r3, #5
 8008d70:	d826      	bhi.n	8008dc0 <UART_SetConfig+0x4c0>
 8008d72:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <UART_SetConfig+0x478>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d91 	.word	0x08008d91
 8008d7c:	08008d99 	.word	0x08008d99
 8008d80:	08008da1 	.word	0x08008da1
 8008d84:	08008da9 	.word	0x08008da9
 8008d88:	08008db1 	.word	0x08008db1
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	2300      	movs	r3, #0
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e086      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e082      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008da0:	2308      	movs	r3, #8
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e07e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e07a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008db0:	2320      	movs	r3, #32
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e076      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008db8:	2340      	movs	r3, #64	@ 0x40
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e072      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008dc0:	2380      	movs	r3, #128	@ 0x80
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e06e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a75      	ldr	r2, [pc, #468]	@ (8008fa4 <UART_SetConfig+0x6a4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d130      	bne.n	8008e34 <UART_SetConfig+0x534>
 8008dd2:	4b72      	ldr	r3, [pc, #456]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d826      	bhi.n	8008e2c <UART_SetConfig+0x52c>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <UART_SetConfig+0x4e4>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008dfd 	.word	0x08008dfd
 8008de8:	08008e05 	.word	0x08008e05
 8008dec:	08008e0d 	.word	0x08008e0d
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e050      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e04c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e048      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e044      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e040      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e24:	2340      	movs	r3, #64	@ 0x40
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e03c      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e2c:	2380      	movs	r3, #128	@ 0x80
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e038      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a5b      	ldr	r2, [pc, #364]	@ (8008fa8 <UART_SetConfig+0x6a8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d130      	bne.n	8008ea0 <UART_SetConfig+0x5a0>
 8008e3e:	4b57      	ldr	r3, [pc, #348]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d826      	bhi.n	8008e98 <UART_SetConfig+0x598>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <UART_SetConfig+0x550>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008e69 	.word	0x08008e69
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	2302      	movs	r3, #2
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e01a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e016      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e012      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e00e      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e00a      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e90:	2340      	movs	r3, #64	@ 0x40
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e006      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008e98:	2380      	movs	r3, #128	@ 0x80
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e002      	b.n	8008ea6 <UART_SetConfig+0x5a6>
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8008fa8 <UART_SetConfig+0x6a8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	f040 80f8 	bne.w	80090a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	dc46      	bgt.n	8008f48 <UART_SetConfig+0x648>
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	f2c0 8082 	blt.w	8008fc4 <UART_SetConfig+0x6c4>
 8008ec0:	3b02      	subs	r3, #2
 8008ec2:	2b1e      	cmp	r3, #30
 8008ec4:	d87e      	bhi.n	8008fc4 <UART_SetConfig+0x6c4>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <UART_SetConfig+0x5cc>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f4f 	.word	0x08008f4f
 8008ed0:	08008fc5 	.word	0x08008fc5
 8008ed4:	08008f57 	.word	0x08008f57
 8008ed8:	08008fc5 	.word	0x08008fc5
 8008edc:	08008fc5 	.word	0x08008fc5
 8008ee0:	08008fc5 	.word	0x08008fc5
 8008ee4:	08008f67 	.word	0x08008f67
 8008ee8:	08008fc5 	.word	0x08008fc5
 8008eec:	08008fc5 	.word	0x08008fc5
 8008ef0:	08008fc5 	.word	0x08008fc5
 8008ef4:	08008fc5 	.word	0x08008fc5
 8008ef8:	08008fc5 	.word	0x08008fc5
 8008efc:	08008fc5 	.word	0x08008fc5
 8008f00:	08008fc5 	.word	0x08008fc5
 8008f04:	08008f77 	.word	0x08008f77
 8008f08:	08008fc5 	.word	0x08008fc5
 8008f0c:	08008fc5 	.word	0x08008fc5
 8008f10:	08008fc5 	.word	0x08008fc5
 8008f14:	08008fc5 	.word	0x08008fc5
 8008f18:	08008fc5 	.word	0x08008fc5
 8008f1c:	08008fc5 	.word	0x08008fc5
 8008f20:	08008fc5 	.word	0x08008fc5
 8008f24:	08008fc5 	.word	0x08008fc5
 8008f28:	08008fc5 	.word	0x08008fc5
 8008f2c:	08008fc5 	.word	0x08008fc5
 8008f30:	08008fc5 	.word	0x08008fc5
 8008f34:	08008fc5 	.word	0x08008fc5
 8008f38:	08008fc5 	.word	0x08008fc5
 8008f3c:	08008fc5 	.word	0x08008fc5
 8008f40:	08008fc5 	.word	0x08008fc5
 8008f44:	08008fb7 	.word	0x08008fb7
 8008f48:	2b40      	cmp	r3, #64	@ 0x40
 8008f4a:	d037      	beq.n	8008fbc <UART_SetConfig+0x6bc>
 8008f4c:	e03a      	b.n	8008fc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f4e:	f7fd fd73 	bl	8006a38 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f54:	e03c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fd fd82 	bl	8006a64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f64:	e034      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f66:	f107 0318 	add.w	r3, r7, #24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd fece 	bl	8006d0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	e02c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f76:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d016      	beq.n	8008fb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f82:	4b06      	ldr	r3, [pc, #24]	@ (8008f9c <UART_SetConfig+0x69c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	4a07      	ldr	r2, [pc, #28]	@ (8008fac <UART_SetConfig+0x6ac>)
 8008f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f94:	e01c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
 8008f96:	bf00      	nop
 8008f98:	40011400 	.word	0x40011400
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	40007800 	.word	0x40007800
 8008fa4:	40007c00 	.word	0x40007c00
 8008fa8:	58000c00 	.word	0x58000c00
 8008fac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008fb0:	4b9d      	ldr	r3, [pc, #628]	@ (8009228 <UART_SetConfig+0x928>)
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb4:	e00c      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800922c <UART_SetConfig+0x92c>)
 8008fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fba:	e009      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc2:	e005      	b.n	8008fd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008fce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 81de 	beq.w	8009394 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fdc:	4a94      	ldr	r2, [pc, #592]	@ (8009230 <UART_SetConfig+0x930>)
 8008fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	4413      	add	r3, r2
 8008ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d305      	bcc.n	8009008 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009004:	429a      	cmp	r2, r3
 8009006:	d903      	bls.n	8009010 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800900e:	e1c1      	b.n	8009394 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009012:	2200      	movs	r2, #0
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	60fa      	str	r2, [r7, #12]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	4a84      	ldr	r2, [pc, #528]	@ (8009230 <UART_SetConfig+0x930>)
 800901e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009022:	b29b      	uxth	r3, r3
 8009024:	2200      	movs	r2, #0
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009032:	f7f7 fb69 	bl	8000708 <__aeabi_uldivmod>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4610      	mov	r0, r2
 800903c:	4619      	mov	r1, r3
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	020b      	lsls	r3, r1, #8
 8009048:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800904c:	0202      	lsls	r2, r0, #8
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	6849      	ldr	r1, [r1, #4]
 8009052:	0849      	lsrs	r1, r1, #1
 8009054:	2000      	movs	r0, #0
 8009056:	460c      	mov	r4, r1
 8009058:	4605      	mov	r5, r0
 800905a:	eb12 0804 	adds.w	r8, r2, r4
 800905e:	eb43 0905 	adc.w	r9, r3, r5
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	469a      	mov	sl, r3
 800906a:	4693      	mov	fp, r2
 800906c:	4652      	mov	r2, sl
 800906e:	465b      	mov	r3, fp
 8009070:	4640      	mov	r0, r8
 8009072:	4649      	mov	r1, r9
 8009074:	f7f7 fb48 	bl	8000708 <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4613      	mov	r3, r2
 800907e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009086:	d308      	bcc.n	800909a <UART_SetConfig+0x79a>
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800908e:	d204      	bcs.n	800909a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009096:	60da      	str	r2, [r3, #12]
 8009098:	e17c      	b.n	8009394 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090a0:	e178      	b.n	8009394 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090aa:	f040 80c5 	bne.w	8009238 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80090ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	dc48      	bgt.n	8009148 <UART_SetConfig+0x848>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	db7b      	blt.n	80091b2 <UART_SetConfig+0x8b2>
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d879      	bhi.n	80091b2 <UART_SetConfig+0x8b2>
 80090be:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <UART_SetConfig+0x7c4>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	0800914f 	.word	0x0800914f
 80090c8:	08009157 	.word	0x08009157
 80090cc:	080091b3 	.word	0x080091b3
 80090d0:	080091b3 	.word	0x080091b3
 80090d4:	0800915f 	.word	0x0800915f
 80090d8:	080091b3 	.word	0x080091b3
 80090dc:	080091b3 	.word	0x080091b3
 80090e0:	080091b3 	.word	0x080091b3
 80090e4:	0800916f 	.word	0x0800916f
 80090e8:	080091b3 	.word	0x080091b3
 80090ec:	080091b3 	.word	0x080091b3
 80090f0:	080091b3 	.word	0x080091b3
 80090f4:	080091b3 	.word	0x080091b3
 80090f8:	080091b3 	.word	0x080091b3
 80090fc:	080091b3 	.word	0x080091b3
 8009100:	080091b3 	.word	0x080091b3
 8009104:	0800917f 	.word	0x0800917f
 8009108:	080091b3 	.word	0x080091b3
 800910c:	080091b3 	.word	0x080091b3
 8009110:	080091b3 	.word	0x080091b3
 8009114:	080091b3 	.word	0x080091b3
 8009118:	080091b3 	.word	0x080091b3
 800911c:	080091b3 	.word	0x080091b3
 8009120:	080091b3 	.word	0x080091b3
 8009124:	080091b3 	.word	0x080091b3
 8009128:	080091b3 	.word	0x080091b3
 800912c:	080091b3 	.word	0x080091b3
 8009130:	080091b3 	.word	0x080091b3
 8009134:	080091b3 	.word	0x080091b3
 8009138:	080091b3 	.word	0x080091b3
 800913c:	080091b3 	.word	0x080091b3
 8009140:	080091b3 	.word	0x080091b3
 8009144:	080091a5 	.word	0x080091a5
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	d02e      	beq.n	80091aa <UART_SetConfig+0x8aa>
 800914c:	e031      	b.n	80091b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914e:	f7fc fa3d 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 8009152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009154:	e033      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009156:	f7fc fa4f 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 800915a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800915c:	e02f      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800915e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009162:	4618      	mov	r0, r3
 8009164:	f7fd fc7e 	bl	8006a64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916c:	e027      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916e:	f107 0318 	add.w	r3, r7, #24
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fdca 	bl	8006d0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e01f      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917e:	4b2d      	ldr	r3, [pc, #180]	@ (8009234 <UART_SetConfig+0x934>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800918a:	4b2a      	ldr	r3, [pc, #168]	@ (8009234 <UART_SetConfig+0x934>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	08db      	lsrs	r3, r3, #3
 8009190:	f003 0303 	and.w	r3, r3, #3
 8009194:	4a24      	ldr	r2, [pc, #144]	@ (8009228 <UART_SetConfig+0x928>)
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800919c:	e00f      	b.n	80091be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800919e:	4b22      	ldr	r3, [pc, #136]	@ (8009228 <UART_SetConfig+0x928>)
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a2:	e00c      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091a4:	4b21      	ldr	r3, [pc, #132]	@ (800922c <UART_SetConfig+0x92c>)
 80091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a8:	e009      	b.n	80091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b0:	e005      	b.n	80091be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80e7 	beq.w	8009394 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	4a19      	ldr	r2, [pc, #100]	@ (8009230 <UART_SetConfig+0x930>)
 80091cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d0:	461a      	mov	r2, r3
 80091d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d8:	005a      	lsls	r2, r3, #1
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	441a      	add	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	d916      	bls.n	8009220 <UART_SetConfig+0x920>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f8:	d212      	bcs.n	8009220 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f023 030f 	bic.w	r3, r3, #15
 8009202:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	b29a      	uxth	r2, r3
 8009210:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009212:	4313      	orrs	r3, r2
 8009214:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	e0b9      	b.n	8009394 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009226:	e0b5      	b.n	8009394 <UART_SetConfig+0xa94>
 8009228:	03d09000 	.word	0x03d09000
 800922c:	003d0900 	.word	0x003d0900
 8009230:	0800e114 	.word	0x0800e114
 8009234:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009238:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800923c:	2b20      	cmp	r3, #32
 800923e:	dc49      	bgt.n	80092d4 <UART_SetConfig+0x9d4>
 8009240:	2b00      	cmp	r3, #0
 8009242:	db7c      	blt.n	800933e <UART_SetConfig+0xa3e>
 8009244:	2b20      	cmp	r3, #32
 8009246:	d87a      	bhi.n	800933e <UART_SetConfig+0xa3e>
 8009248:	a201      	add	r2, pc, #4	@ (adr r2, 8009250 <UART_SetConfig+0x950>)
 800924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924e:	bf00      	nop
 8009250:	080092db 	.word	0x080092db
 8009254:	080092e3 	.word	0x080092e3
 8009258:	0800933f 	.word	0x0800933f
 800925c:	0800933f 	.word	0x0800933f
 8009260:	080092eb 	.word	0x080092eb
 8009264:	0800933f 	.word	0x0800933f
 8009268:	0800933f 	.word	0x0800933f
 800926c:	0800933f 	.word	0x0800933f
 8009270:	080092fb 	.word	0x080092fb
 8009274:	0800933f 	.word	0x0800933f
 8009278:	0800933f 	.word	0x0800933f
 800927c:	0800933f 	.word	0x0800933f
 8009280:	0800933f 	.word	0x0800933f
 8009284:	0800933f 	.word	0x0800933f
 8009288:	0800933f 	.word	0x0800933f
 800928c:	0800933f 	.word	0x0800933f
 8009290:	0800930b 	.word	0x0800930b
 8009294:	0800933f 	.word	0x0800933f
 8009298:	0800933f 	.word	0x0800933f
 800929c:	0800933f 	.word	0x0800933f
 80092a0:	0800933f 	.word	0x0800933f
 80092a4:	0800933f 	.word	0x0800933f
 80092a8:	0800933f 	.word	0x0800933f
 80092ac:	0800933f 	.word	0x0800933f
 80092b0:	0800933f 	.word	0x0800933f
 80092b4:	0800933f 	.word	0x0800933f
 80092b8:	0800933f 	.word	0x0800933f
 80092bc:	0800933f 	.word	0x0800933f
 80092c0:	0800933f 	.word	0x0800933f
 80092c4:	0800933f 	.word	0x0800933f
 80092c8:	0800933f 	.word	0x0800933f
 80092cc:	0800933f 	.word	0x0800933f
 80092d0:	08009331 	.word	0x08009331
 80092d4:	2b40      	cmp	r3, #64	@ 0x40
 80092d6:	d02e      	beq.n	8009336 <UART_SetConfig+0xa36>
 80092d8:	e031      	b.n	800933e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092da:	f7fc f977 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 80092de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092e0:	e033      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092e2:	f7fc f989 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 80092e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092e8:	e02f      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fd fbb8 	bl	8006a64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f8:	e027      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092fa:	f107 0318 	add.w	r3, r7, #24
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fd fd04 	bl	8006d0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009308:	e01f      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800930a:	4b2d      	ldr	r3, [pc, #180]	@ (80093c0 <UART_SetConfig+0xac0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009316:	4b2a      	ldr	r3, [pc, #168]	@ (80093c0 <UART_SetConfig+0xac0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	08db      	lsrs	r3, r3, #3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	4a28      	ldr	r2, [pc, #160]	@ (80093c4 <UART_SetConfig+0xac4>)
 8009322:	fa22 f303 	lsr.w	r3, r2, r3
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009328:	e00f      	b.n	800934a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800932a:	4b26      	ldr	r3, [pc, #152]	@ (80093c4 <UART_SetConfig+0xac4>)
 800932c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932e:	e00c      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009330:	4b25      	ldr	r3, [pc, #148]	@ (80093c8 <UART_SetConfig+0xac8>)
 8009332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009334:	e009      	b.n	800934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800933c:	e005      	b.n	800934a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009348:	bf00      	nop
    }

    if (pclk != 0U)
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d021      	beq.n	8009394 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	4a1d      	ldr	r2, [pc, #116]	@ (80093cc <UART_SetConfig+0xacc>)
 8009356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800935a:	461a      	mov	r2, r3
 800935c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800935e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	441a      	add	r2, r3
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009372:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	2b0f      	cmp	r3, #15
 8009378:	d909      	bls.n	800938e <UART_SetConfig+0xa8e>
 800937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009380:	d205      	bcs.n	800938e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	b29a      	uxth	r2, r3
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60da      	str	r2, [r3, #12]
 800938c:	e002      	b.n	8009394 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2200      	movs	r2, #0
 80093a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2200      	movs	r2, #0
 80093ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3748      	adds	r7, #72	@ 0x48
 80093b8:	46bd      	mov	sp, r7
 80093ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093be:	bf00      	nop
 80093c0:	58024400 	.word	0x58024400
 80093c4:	03d09000 	.word	0x03d09000
 80093c8:	003d0900 	.word	0x003d0900
 80093cc:	0800e114 	.word	0x0800e114

080093d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	f003 0308 	and.w	r3, r3, #8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00a      	beq.n	800943e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009486:	f003 0320 	and.w	r3, r3, #32
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ce:	d10a      	bne.n	80094e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b098      	sub	sp, #96	@ 0x60
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009524:	f7f8 fa90 	bl	8001a48 <HAL_GetTick>
 8009528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d12f      	bne.n	8009598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009540:	2200      	movs	r2, #0
 8009542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f88e 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d022      	beq.n	8009598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009566:	653b      	str	r3, [r7, #80]	@ 0x50
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009570:	647b      	str	r3, [r7, #68]	@ 0x44
 8009572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009578:	e841 2300 	strex	r3, r2, [r1]
 800957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e6      	bne.n	8009552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e063      	b.n	8009660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d149      	bne.n	800963a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ae:	2200      	movs	r2, #0
 80095b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f857 	bl	8009668 <UART_WaitOnFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d03c      	beq.n	800963a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	623b      	str	r3, [r7, #32]
   return(result);
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095de:	633b      	str	r3, [r7, #48]	@ 0x30
 80095e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	60fb      	str	r3, [r7, #12]
   return(result);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009612:	61fa      	str	r2, [r7, #28]
 8009614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	69b9      	ldr	r1, [r7, #24]
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	617b      	str	r3, [r7, #20]
   return(result);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e012      	b.n	8009660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2220      	movs	r2, #32
 8009646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3758      	adds	r7, #88	@ 0x58
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009678:	e04f      	b.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d04b      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009682:	f7f8 f9e1 	bl	8001a48 <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	429a      	cmp	r2, r3
 8009690:	d302      	bcc.n	8009698 <UART_WaitOnFlagUntilTimeout+0x30>
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e04e      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d037      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b80      	cmp	r3, #128	@ 0x80
 80096ae:	d034      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b40      	cmp	r3, #64	@ 0x40
 80096b4:	d031      	beq.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f003 0308 	and.w	r3, r3, #8
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d110      	bne.n	80096e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2208      	movs	r2, #8
 80096ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f839 	bl	8009744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2208      	movs	r2, #8
 80096d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e029      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f4:	d111      	bne.n	800971a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f81f 	bl	8009744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e00f      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69da      	ldr	r2, [r3, #28]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4013      	ands	r3, r2
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d0a0      	beq.n	800967a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b095      	sub	sp, #84	@ 0x54
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800976a:	643b      	str	r3, [r7, #64]	@ 0x40
 800976c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e6      	bne.n	800974c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3308      	adds	r3, #8
 8009784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	61fb      	str	r3, [r7, #28]
   return(result);
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	4b1e      	ldr	r3, [pc, #120]	@ (800980c <UART_EndRxTransfer+0xc8>)
 8009792:	4013      	ands	r3, r2
 8009794:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800979e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e5      	bne.n	800977e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d118      	bne.n	80097ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f023 0310 	bic.w	r3, r3, #16
 80097ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6979      	ldr	r1, [r7, #20]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	613b      	str	r3, [r7, #16]
   return(result);
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e6      	bne.n	80097ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009800:	bf00      	nop
 8009802:	3754      	adds	r7, #84	@ 0x54
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	effffffe 	.word	0xeffffffe

08009810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7ff f854 	bl	80088d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800982c:	bf00      	nop
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	60bb      	str	r3, [r7, #8]
   return(result);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6979      	ldr	r1, [r7, #20]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	613b      	str	r3, [r7, #16]
   return(result);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e6      	bne.n	800983c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff f81f 	bl	80088c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009882:	bf00      	nop
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b085      	sub	sp, #20
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_UARTEx_DisableFifoMode+0x16>
 80098d8:	2302      	movs	r3, #2
 80098da:	e027      	b.n	800992c <HAL_UARTEx_DisableFifoMode+0x66>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2224      	movs	r2, #36	@ 0x24
 80098e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0201 	bic.w	r2, r2, #1
 8009902:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800990a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800994c:	2302      	movs	r3, #2
 800994e:	e02d      	b.n	80099ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2224      	movs	r2, #36	@ 0x24
 800995c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0201 	bic.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f84f 	bl	8009a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d101      	bne.n	80099cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e02d      	b.n	8009a28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2224      	movs	r2, #36	@ 0x24
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0201 	bic.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f811 	bl	8009a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a50:	e031      	b.n	8009ab6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a52:	2310      	movs	r3, #16
 8009a54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a56:	2310      	movs	r3, #16
 8009a58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	0e5b      	lsrs	r3, r3, #25
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	0f5b      	lsrs	r3, r3, #29
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0307 	and.w	r3, r3, #7
 8009a78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	7b3a      	ldrb	r2, [r7, #12]
 8009a7e:	4911      	ldr	r1, [pc, #68]	@ (8009ac4 <UARTEx_SetNbDataToProcess+0x94>)
 8009a80:	5c8a      	ldrb	r2, [r1, r2]
 8009a82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a86:	7b3a      	ldrb	r2, [r7, #12]
 8009a88:	490f      	ldr	r1, [pc, #60]	@ (8009ac8 <UARTEx_SetNbDataToProcess+0x98>)
 8009a8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	7b7a      	ldrb	r2, [r7, #13]
 8009a9c:	4909      	ldr	r1, [pc, #36]	@ (8009ac4 <UARTEx_SetNbDataToProcess+0x94>)
 8009a9e:	5c8a      	ldrb	r2, [r1, r2]
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009aa4:	7b7a      	ldrb	r2, [r7, #13]
 8009aa6:	4908      	ldr	r1, [pc, #32]	@ (8009ac8 <UARTEx_SetNbDataToProcess+0x98>)
 8009aa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ab6:	bf00      	nop
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	0800e12c 	.word	0x0800e12c
 8009ac8:	0800e134 	.word	0x0800e134

08009acc <__cvt>:
 8009acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ace:	ed2d 8b02 	vpush	{d8}
 8009ad2:	eeb0 8b40 	vmov.f64	d8, d0
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	4617      	mov	r7, r2
 8009ada:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009adc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ade:	ee18 2a90 	vmov	r2, s17
 8009ae2:	f025 0520 	bic.w	r5, r5, #32
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	bfb6      	itet	lt
 8009aea:	222d      	movlt	r2, #45	@ 0x2d
 8009aec:	2200      	movge	r2, #0
 8009aee:	eeb1 8b40 	vneglt.f64	d8, d0
 8009af2:	2d46      	cmp	r5, #70	@ 0x46
 8009af4:	460c      	mov	r4, r1
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	d004      	beq.n	8009b04 <__cvt+0x38>
 8009afa:	2d45      	cmp	r5, #69	@ 0x45
 8009afc:	d100      	bne.n	8009b00 <__cvt+0x34>
 8009afe:	3401      	adds	r4, #1
 8009b00:	2102      	movs	r1, #2
 8009b02:	e000      	b.n	8009b06 <__cvt+0x3a>
 8009b04:	2103      	movs	r1, #3
 8009b06:	ab03      	add	r3, sp, #12
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	ab02      	add	r3, sp, #8
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4622      	mov	r2, r4
 8009b10:	4633      	mov	r3, r6
 8009b12:	eeb0 0b48 	vmov.f64	d0, d8
 8009b16:	f001 f84b 	bl	800abb0 <_dtoa_r>
 8009b1a:	2d47      	cmp	r5, #71	@ 0x47
 8009b1c:	d114      	bne.n	8009b48 <__cvt+0x7c>
 8009b1e:	07fb      	lsls	r3, r7, #31
 8009b20:	d50a      	bpl.n	8009b38 <__cvt+0x6c>
 8009b22:	1902      	adds	r2, r0, r4
 8009b24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2c:	bf08      	it	eq
 8009b2e:	9203      	streq	r2, [sp, #12]
 8009b30:	2130      	movs	r1, #48	@ 0x30
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d319      	bcc.n	8009b6c <__cvt+0xa0>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b3c:	1a1b      	subs	r3, r3, r0
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	b005      	add	sp, #20
 8009b42:	ecbd 8b02 	vpop	{d8}
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b48:	2d46      	cmp	r5, #70	@ 0x46
 8009b4a:	eb00 0204 	add.w	r2, r0, r4
 8009b4e:	d1e9      	bne.n	8009b24 <__cvt+0x58>
 8009b50:	7803      	ldrb	r3, [r0, #0]
 8009b52:	2b30      	cmp	r3, #48	@ 0x30
 8009b54:	d107      	bne.n	8009b66 <__cvt+0x9a>
 8009b56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5e:	bf1c      	itt	ne
 8009b60:	f1c4 0401 	rsbne	r4, r4, #1
 8009b64:	6034      	strne	r4, [r6, #0]
 8009b66:	6833      	ldr	r3, [r6, #0]
 8009b68:	441a      	add	r2, r3
 8009b6a:	e7db      	b.n	8009b24 <__cvt+0x58>
 8009b6c:	1c5c      	adds	r4, r3, #1
 8009b6e:	9403      	str	r4, [sp, #12]
 8009b70:	7019      	strb	r1, [r3, #0]
 8009b72:	e7de      	b.n	8009b32 <__cvt+0x66>

08009b74 <__exponent>:
 8009b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b76:	2900      	cmp	r1, #0
 8009b78:	bfba      	itte	lt
 8009b7a:	4249      	neglt	r1, r1
 8009b7c:	232d      	movlt	r3, #45	@ 0x2d
 8009b7e:	232b      	movge	r3, #43	@ 0x2b
 8009b80:	2909      	cmp	r1, #9
 8009b82:	7002      	strb	r2, [r0, #0]
 8009b84:	7043      	strb	r3, [r0, #1]
 8009b86:	dd29      	ble.n	8009bdc <__exponent+0x68>
 8009b88:	f10d 0307 	add.w	r3, sp, #7
 8009b8c:	461d      	mov	r5, r3
 8009b8e:	270a      	movs	r7, #10
 8009b90:	461a      	mov	r2, r3
 8009b92:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b96:	fb07 1416 	mls	r4, r7, r6, r1
 8009b9a:	3430      	adds	r4, #48	@ 0x30
 8009b9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	2c63      	cmp	r4, #99	@ 0x63
 8009ba4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ba8:	4631      	mov	r1, r6
 8009baa:	dcf1      	bgt.n	8009b90 <__exponent+0x1c>
 8009bac:	3130      	adds	r1, #48	@ 0x30
 8009bae:	1e94      	subs	r4, r2, #2
 8009bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009bb4:	1c41      	adds	r1, r0, #1
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	42ab      	cmp	r3, r5
 8009bba:	d30a      	bcc.n	8009bd2 <__exponent+0x5e>
 8009bbc:	f10d 0309 	add.w	r3, sp, #9
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	42ac      	cmp	r4, r5
 8009bc4:	bf88      	it	hi
 8009bc6:	2300      	movhi	r3, #0
 8009bc8:	3302      	adds	r3, #2
 8009bca:	4403      	add	r3, r0
 8009bcc:	1a18      	subs	r0, r3, r0
 8009bce:	b003      	add	sp, #12
 8009bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009bd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009bda:	e7ed      	b.n	8009bb8 <__exponent+0x44>
 8009bdc:	2330      	movs	r3, #48	@ 0x30
 8009bde:	3130      	adds	r1, #48	@ 0x30
 8009be0:	7083      	strb	r3, [r0, #2]
 8009be2:	70c1      	strb	r1, [r0, #3]
 8009be4:	1d03      	adds	r3, r0, #4
 8009be6:	e7f1      	b.n	8009bcc <__exponent+0x58>

08009be8 <_printf_float>:
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	b08d      	sub	sp, #52	@ 0x34
 8009bee:	460c      	mov	r4, r1
 8009bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	461f      	mov	r7, r3
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	f000 fed1 	bl	800a9a0 <_localeconv_r>
 8009bfe:	f8d0 b000 	ldr.w	fp, [r0]
 8009c02:	4658      	mov	r0, fp
 8009c04:	f7f6 fbbc 	bl	8000380 <strlen>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009c14:	6822      	ldr	r2, [r4, #0]
 8009c16:	9005      	str	r0, [sp, #20]
 8009c18:	3307      	adds	r3, #7
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	f103 0108 	add.w	r1, r3, #8
 8009c22:	f8c8 1000 	str.w	r1, [r8]
 8009c26:	ed93 0b00 	vldr	d0, [r3]
 8009c2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009e88 <_printf_float+0x2a0>
 8009c2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009c32:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009c3e:	dd24      	ble.n	8009c8a <_printf_float+0xa2>
 8009c40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c48:	d502      	bpl.n	8009c50 <_printf_float+0x68>
 8009c4a:	232d      	movs	r3, #45	@ 0x2d
 8009c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c50:	498f      	ldr	r1, [pc, #572]	@ (8009e90 <_printf_float+0x2a8>)
 8009c52:	4b90      	ldr	r3, [pc, #576]	@ (8009e94 <_printf_float+0x2ac>)
 8009c54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009c58:	bf8c      	ite	hi
 8009c5a:	4688      	movhi	r8, r1
 8009c5c:	4698      	movls	r8, r3
 8009c5e:	f022 0204 	bic.w	r2, r2, #4
 8009c62:	2303      	movs	r3, #3
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	6022      	str	r2, [r4, #0]
 8009c68:	f04f 0a00 	mov.w	sl, #0
 8009c6c:	9700      	str	r7, [sp, #0]
 8009c6e:	4633      	mov	r3, r6
 8009c70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c72:	4621      	mov	r1, r4
 8009c74:	4628      	mov	r0, r5
 8009c76:	f000 f9d1 	bl	800a01c <_printf_common>
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f040 8089 	bne.w	8009d92 <_printf_float+0x1aa>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	b00d      	add	sp, #52	@ 0x34
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c92:	d709      	bvc.n	8009ca8 <_printf_float+0xc0>
 8009c94:	ee10 3a90 	vmov	r3, s1
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfbc      	itt	lt
 8009c9c:	232d      	movlt	r3, #45	@ 0x2d
 8009c9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ca2:	497d      	ldr	r1, [pc, #500]	@ (8009e98 <_printf_float+0x2b0>)
 8009ca4:	4b7d      	ldr	r3, [pc, #500]	@ (8009e9c <_printf_float+0x2b4>)
 8009ca6:	e7d5      	b.n	8009c54 <_printf_float+0x6c>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	1c59      	adds	r1, r3, #1
 8009cac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009cb0:	d139      	bne.n	8009d26 <_printf_float+0x13e>
 8009cb2:	2306      	movs	r3, #6
 8009cb4:	6063      	str	r3, [r4, #4]
 8009cb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009cc6:	ab09      	add	r3, sp, #36	@ 0x24
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	6861      	ldr	r1, [r4, #4]
 8009ccc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7ff fefb 	bl	8009acc <__cvt>
 8009cd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009cda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cdc:	4680      	mov	r8, r0
 8009cde:	d129      	bne.n	8009d34 <_printf_float+0x14c>
 8009ce0:	1cc8      	adds	r0, r1, #3
 8009ce2:	db02      	blt.n	8009cea <_printf_float+0x102>
 8009ce4:	6863      	ldr	r3, [r4, #4]
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	dd41      	ble.n	8009d6e <_printf_float+0x186>
 8009cea:	f1a9 0902 	sub.w	r9, r9, #2
 8009cee:	fa5f f989 	uxtb.w	r9, r9
 8009cf2:	3901      	subs	r1, #1
 8009cf4:	464a      	mov	r2, r9
 8009cf6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8009cfc:	f7ff ff3a 	bl	8009b74 <__exponent>
 8009d00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d02:	1813      	adds	r3, r2, r0
 8009d04:	2a01      	cmp	r2, #1
 8009d06:	4682      	mov	sl, r0
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	dc02      	bgt.n	8009d12 <_printf_float+0x12a>
 8009d0c:	6822      	ldr	r2, [r4, #0]
 8009d0e:	07d2      	lsls	r2, r2, #31
 8009d10:	d501      	bpl.n	8009d16 <_printf_float+0x12e>
 8009d12:	3301      	adds	r3, #1
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0a6      	beq.n	8009c6c <_printf_float+0x84>
 8009d1e:	232d      	movs	r3, #45	@ 0x2d
 8009d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d24:	e7a2      	b.n	8009c6c <_printf_float+0x84>
 8009d26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d2a:	d1c4      	bne.n	8009cb6 <_printf_float+0xce>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1c2      	bne.n	8009cb6 <_printf_float+0xce>
 8009d30:	2301      	movs	r3, #1
 8009d32:	e7bf      	b.n	8009cb4 <_printf_float+0xcc>
 8009d34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009d38:	d9db      	bls.n	8009cf2 <_printf_float+0x10a>
 8009d3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009d3e:	d118      	bne.n	8009d72 <_printf_float+0x18a>
 8009d40:	2900      	cmp	r1, #0
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	dd0b      	ble.n	8009d5e <_printf_float+0x176>
 8009d46:	6121      	str	r1, [r4, #16]
 8009d48:	b913      	cbnz	r3, 8009d50 <_printf_float+0x168>
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	07d0      	lsls	r0, r2, #31
 8009d4e:	d502      	bpl.n	8009d56 <_printf_float+0x16e>
 8009d50:	3301      	adds	r3, #1
 8009d52:	440b      	add	r3, r1
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d58:	f04f 0a00 	mov.w	sl, #0
 8009d5c:	e7db      	b.n	8009d16 <_printf_float+0x12e>
 8009d5e:	b913      	cbnz	r3, 8009d66 <_printf_float+0x17e>
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	07d2      	lsls	r2, r2, #31
 8009d64:	d501      	bpl.n	8009d6a <_printf_float+0x182>
 8009d66:	3302      	adds	r3, #2
 8009d68:	e7f4      	b.n	8009d54 <_printf_float+0x16c>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e7f2      	b.n	8009d54 <_printf_float+0x16c>
 8009d6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d74:	4299      	cmp	r1, r3
 8009d76:	db05      	blt.n	8009d84 <_printf_float+0x19c>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	6121      	str	r1, [r4, #16]
 8009d7c:	07d8      	lsls	r0, r3, #31
 8009d7e:	d5ea      	bpl.n	8009d56 <_printf_float+0x16e>
 8009d80:	1c4b      	adds	r3, r1, #1
 8009d82:	e7e7      	b.n	8009d54 <_printf_float+0x16c>
 8009d84:	2900      	cmp	r1, #0
 8009d86:	bfd4      	ite	le
 8009d88:	f1c1 0202 	rsble	r2, r1, #2
 8009d8c:	2201      	movgt	r2, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	e7e0      	b.n	8009d54 <_printf_float+0x16c>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	055a      	lsls	r2, r3, #21
 8009d96:	d407      	bmi.n	8009da8 <_printf_float+0x1c0>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	4642      	mov	r2, r8
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	d12a      	bne.n	8009dfc <_printf_float+0x214>
 8009da6:	e76b      	b.n	8009c80 <_printf_float+0x98>
 8009da8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009dac:	f240 80e0 	bls.w	8009f70 <_printf_float+0x388>
 8009db0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009db4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbc:	d133      	bne.n	8009e26 <_printf_float+0x23e>
 8009dbe:	4a38      	ldr	r2, [pc, #224]	@ (8009ea0 <_printf_float+0x2b8>)
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f af59 	beq.w	8009c80 <_printf_float+0x98>
 8009dce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009dd2:	4543      	cmp	r3, r8
 8009dd4:	db02      	blt.n	8009ddc <_printf_float+0x1f4>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	07d8      	lsls	r0, r3, #31
 8009dda:	d50f      	bpl.n	8009dfc <_printf_float+0x214>
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	465a      	mov	r2, fp
 8009de0:	4631      	mov	r1, r6
 8009de2:	4628      	mov	r0, r5
 8009de4:	47b8      	blx	r7
 8009de6:	3001      	adds	r0, #1
 8009de8:	f43f af4a 	beq.w	8009c80 <_printf_float+0x98>
 8009dec:	f04f 0900 	mov.w	r9, #0
 8009df0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009df4:	f104 0a1a 	add.w	sl, r4, #26
 8009df8:	45c8      	cmp	r8, r9
 8009dfa:	dc09      	bgt.n	8009e10 <_printf_float+0x228>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	079b      	lsls	r3, r3, #30
 8009e00:	f100 8107 	bmi.w	800a012 <_printf_float+0x42a>
 8009e04:	68e0      	ldr	r0, [r4, #12]
 8009e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e08:	4298      	cmp	r0, r3
 8009e0a:	bfb8      	it	lt
 8009e0c:	4618      	movlt	r0, r3
 8009e0e:	e739      	b.n	8009c84 <_printf_float+0x9c>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4652      	mov	r2, sl
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f af30 	beq.w	8009c80 <_printf_float+0x98>
 8009e20:	f109 0901 	add.w	r9, r9, #1
 8009e24:	e7e8      	b.n	8009df8 <_printf_float+0x210>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc3b      	bgt.n	8009ea4 <_printf_float+0x2bc>
 8009e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea0 <_printf_float+0x2b8>)
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4631      	mov	r1, r6
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b8      	blx	r7
 8009e36:	3001      	adds	r0, #1
 8009e38:	f43f af22 	beq.w	8009c80 <_printf_float+0x98>
 8009e3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e40:	ea59 0303 	orrs.w	r3, r9, r3
 8009e44:	d102      	bne.n	8009e4c <_printf_float+0x264>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	07d9      	lsls	r1, r3, #31
 8009e4a:	d5d7      	bpl.n	8009dfc <_printf_float+0x214>
 8009e4c:	9b05      	ldr	r3, [sp, #20]
 8009e4e:	465a      	mov	r2, fp
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f af12 	beq.w	8009c80 <_printf_float+0x98>
 8009e5c:	f04f 0a00 	mov.w	sl, #0
 8009e60:	f104 0b1a 	add.w	fp, r4, #26
 8009e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e66:	425b      	negs	r3, r3
 8009e68:	4553      	cmp	r3, sl
 8009e6a:	dc01      	bgt.n	8009e70 <_printf_float+0x288>
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	e794      	b.n	8009d9a <_printf_float+0x1b2>
 8009e70:	2301      	movs	r3, #1
 8009e72:	465a      	mov	r2, fp
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	f43f af00 	beq.w	8009c80 <_printf_float+0x98>
 8009e80:	f10a 0a01 	add.w	sl, sl, #1
 8009e84:	e7ee      	b.n	8009e64 <_printf_float+0x27c>
 8009e86:	bf00      	nop
 8009e88:	ffffffff 	.word	0xffffffff
 8009e8c:	7fefffff 	.word	0x7fefffff
 8009e90:	0800e140 	.word	0x0800e140
 8009e94:	0800e13c 	.word	0x0800e13c
 8009e98:	0800e148 	.word	0x0800e148
 8009e9c:	0800e144 	.word	0x0800e144
 8009ea0:	0800e14c 	.word	0x0800e14c
 8009ea4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ea6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009eaa:	4553      	cmp	r3, sl
 8009eac:	bfa8      	it	ge
 8009eae:	4653      	movge	r3, sl
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	4699      	mov	r9, r3
 8009eb4:	dc37      	bgt.n	8009f26 <_printf_float+0x33e>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9307      	str	r3, [sp, #28]
 8009eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ebe:	f104 021a 	add.w	r2, r4, #26
 8009ec2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ec4:	9907      	ldr	r1, [sp, #28]
 8009ec6:	9306      	str	r3, [sp, #24]
 8009ec8:	eba3 0309 	sub.w	r3, r3, r9
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	dc31      	bgt.n	8009f34 <_printf_float+0x34c>
 8009ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed2:	459a      	cmp	sl, r3
 8009ed4:	dc3b      	bgt.n	8009f4e <_printf_float+0x366>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	07da      	lsls	r2, r3, #31
 8009eda:	d438      	bmi.n	8009f4e <_printf_float+0x366>
 8009edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ede:	ebaa 0903 	sub.w	r9, sl, r3
 8009ee2:	9b06      	ldr	r3, [sp, #24]
 8009ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ee8:	4599      	cmp	r9, r3
 8009eea:	bfa8      	it	ge
 8009eec:	4699      	movge	r9, r3
 8009eee:	f1b9 0f00 	cmp.w	r9, #0
 8009ef2:	dc34      	bgt.n	8009f5e <_printf_float+0x376>
 8009ef4:	f04f 0800 	mov.w	r8, #0
 8009ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009efc:	f104 0b1a 	add.w	fp, r4, #26
 8009f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f02:	ebaa 0303 	sub.w	r3, sl, r3
 8009f06:	eba3 0309 	sub.w	r3, r3, r9
 8009f0a:	4543      	cmp	r3, r8
 8009f0c:	f77f af76 	ble.w	8009dfc <_printf_float+0x214>
 8009f10:	2301      	movs	r3, #1
 8009f12:	465a      	mov	r2, fp
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f aeb0 	beq.w	8009c80 <_printf_float+0x98>
 8009f20:	f108 0801 	add.w	r8, r8, #1
 8009f24:	e7ec      	b.n	8009f00 <_printf_float+0x318>
 8009f26:	4642      	mov	r2, r8
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d1c1      	bne.n	8009eb6 <_printf_float+0x2ce>
 8009f32:	e6a5      	b.n	8009c80 <_printf_float+0x98>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	9206      	str	r2, [sp, #24]
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	f43f ae9e 	beq.w	8009c80 <_printf_float+0x98>
 8009f44:	9b07      	ldr	r3, [sp, #28]
 8009f46:	9a06      	ldr	r2, [sp, #24]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	9307      	str	r3, [sp, #28]
 8009f4c:	e7b9      	b.n	8009ec2 <_printf_float+0x2da>
 8009f4e:	9b05      	ldr	r3, [sp, #20]
 8009f50:	465a      	mov	r2, fp
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d1bf      	bne.n	8009edc <_printf_float+0x2f4>
 8009f5c:	e690      	b.n	8009c80 <_printf_float+0x98>
 8009f5e:	9a06      	ldr	r2, [sp, #24]
 8009f60:	464b      	mov	r3, r9
 8009f62:	4442      	add	r2, r8
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d1c2      	bne.n	8009ef4 <_printf_float+0x30c>
 8009f6e:	e687      	b.n	8009c80 <_printf_float+0x98>
 8009f70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009f74:	f1b9 0f01 	cmp.w	r9, #1
 8009f78:	dc01      	bgt.n	8009f7e <_printf_float+0x396>
 8009f7a:	07db      	lsls	r3, r3, #31
 8009f7c:	d536      	bpl.n	8009fec <_printf_float+0x404>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4642      	mov	r2, r8
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b8      	blx	r7
 8009f88:	3001      	adds	r0, #1
 8009f8a:	f43f ae79 	beq.w	8009c80 <_printf_float+0x98>
 8009f8e:	9b05      	ldr	r3, [sp, #20]
 8009f90:	465a      	mov	r2, fp
 8009f92:	4631      	mov	r1, r6
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b8      	blx	r7
 8009f98:	3001      	adds	r0, #1
 8009f9a:	f43f ae71 	beq.w	8009c80 <_printf_float+0x98>
 8009f9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009fa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009faa:	f109 39ff 	add.w	r9, r9, #4294967295
 8009fae:	d018      	beq.n	8009fe2 <_printf_float+0x3fa>
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	f108 0201 	add.w	r2, r8, #1
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d10c      	bne.n	8009fda <_printf_float+0x3f2>
 8009fc0:	e65e      	b.n	8009c80 <_printf_float+0x98>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	465a      	mov	r2, fp
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b8      	blx	r7
 8009fcc:	3001      	adds	r0, #1
 8009fce:	f43f ae57 	beq.w	8009c80 <_printf_float+0x98>
 8009fd2:	f108 0801 	add.w	r8, r8, #1
 8009fd6:	45c8      	cmp	r8, r9
 8009fd8:	dbf3      	blt.n	8009fc2 <_printf_float+0x3da>
 8009fda:	4653      	mov	r3, sl
 8009fdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fe0:	e6dc      	b.n	8009d9c <_printf_float+0x1b4>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	f104 0b1a 	add.w	fp, r4, #26
 8009fea:	e7f4      	b.n	8009fd6 <_printf_float+0x3ee>
 8009fec:	2301      	movs	r3, #1
 8009fee:	4642      	mov	r2, r8
 8009ff0:	e7e1      	b.n	8009fb6 <_printf_float+0x3ce>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	464a      	mov	r2, r9
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	f43f ae3f 	beq.w	8009c80 <_printf_float+0x98>
 800a002:	f108 0801 	add.w	r8, r8, #1
 800a006:	68e3      	ldr	r3, [r4, #12]
 800a008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a00a:	1a5b      	subs	r3, r3, r1
 800a00c:	4543      	cmp	r3, r8
 800a00e:	dcf0      	bgt.n	8009ff2 <_printf_float+0x40a>
 800a010:	e6f8      	b.n	8009e04 <_printf_float+0x21c>
 800a012:	f04f 0800 	mov.w	r8, #0
 800a016:	f104 0919 	add.w	r9, r4, #25
 800a01a:	e7f4      	b.n	800a006 <_printf_float+0x41e>

0800a01c <_printf_common>:
 800a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a020:	4616      	mov	r6, r2
 800a022:	4698      	mov	r8, r3
 800a024:	688a      	ldr	r2, [r1, #8]
 800a026:	690b      	ldr	r3, [r1, #16]
 800a028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	bfb8      	it	lt
 800a030:	4613      	movlt	r3, r2
 800a032:	6033      	str	r3, [r6, #0]
 800a034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a038:	4607      	mov	r7, r0
 800a03a:	460c      	mov	r4, r1
 800a03c:	b10a      	cbz	r2, 800a042 <_printf_common+0x26>
 800a03e:	3301      	adds	r3, #1
 800a040:	6033      	str	r3, [r6, #0]
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	0699      	lsls	r1, r3, #26
 800a046:	bf42      	ittt	mi
 800a048:	6833      	ldrmi	r3, [r6, #0]
 800a04a:	3302      	addmi	r3, #2
 800a04c:	6033      	strmi	r3, [r6, #0]
 800a04e:	6825      	ldr	r5, [r4, #0]
 800a050:	f015 0506 	ands.w	r5, r5, #6
 800a054:	d106      	bne.n	800a064 <_printf_common+0x48>
 800a056:	f104 0a19 	add.w	sl, r4, #25
 800a05a:	68e3      	ldr	r3, [r4, #12]
 800a05c:	6832      	ldr	r2, [r6, #0]
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	42ab      	cmp	r3, r5
 800a062:	dc26      	bgt.n	800a0b2 <_printf_common+0x96>
 800a064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a068:	6822      	ldr	r2, [r4, #0]
 800a06a:	3b00      	subs	r3, #0
 800a06c:	bf18      	it	ne
 800a06e:	2301      	movne	r3, #1
 800a070:	0692      	lsls	r2, r2, #26
 800a072:	d42b      	bmi.n	800a0cc <_printf_common+0xb0>
 800a074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a078:	4641      	mov	r1, r8
 800a07a:	4638      	mov	r0, r7
 800a07c:	47c8      	blx	r9
 800a07e:	3001      	adds	r0, #1
 800a080:	d01e      	beq.n	800a0c0 <_printf_common+0xa4>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	6922      	ldr	r2, [r4, #16]
 800a086:	f003 0306 	and.w	r3, r3, #6
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	bf02      	ittt	eq
 800a08e:	68e5      	ldreq	r5, [r4, #12]
 800a090:	6833      	ldreq	r3, [r6, #0]
 800a092:	1aed      	subeq	r5, r5, r3
 800a094:	68a3      	ldr	r3, [r4, #8]
 800a096:	bf0c      	ite	eq
 800a098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a09c:	2500      	movne	r5, #0
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	bfc4      	itt	gt
 800a0a2:	1a9b      	subgt	r3, r3, r2
 800a0a4:	18ed      	addgt	r5, r5, r3
 800a0a6:	2600      	movs	r6, #0
 800a0a8:	341a      	adds	r4, #26
 800a0aa:	42b5      	cmp	r5, r6
 800a0ac:	d11a      	bne.n	800a0e4 <_printf_common+0xc8>
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	e008      	b.n	800a0c4 <_printf_common+0xa8>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	4652      	mov	r2, sl
 800a0b6:	4641      	mov	r1, r8
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	47c8      	blx	r9
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d103      	bne.n	800a0c8 <_printf_common+0xac>
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c8:	3501      	adds	r5, #1
 800a0ca:	e7c6      	b.n	800a05a <_printf_common+0x3e>
 800a0cc:	18e1      	adds	r1, r4, r3
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	2030      	movs	r0, #48	@ 0x30
 800a0d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0d6:	4422      	add	r2, r4
 800a0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0e0:	3302      	adds	r3, #2
 800a0e2:	e7c7      	b.n	800a074 <_printf_common+0x58>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	4641      	mov	r1, r8
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	47c8      	blx	r9
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	d0e6      	beq.n	800a0c0 <_printf_common+0xa4>
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	e7d9      	b.n	800a0aa <_printf_common+0x8e>
	...

0800a0f8 <_printf_i>:
 800a0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	7e0f      	ldrb	r7, [r1, #24]
 800a0fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a100:	2f78      	cmp	r7, #120	@ 0x78
 800a102:	4691      	mov	r9, r2
 800a104:	4680      	mov	r8, r0
 800a106:	460c      	mov	r4, r1
 800a108:	469a      	mov	sl, r3
 800a10a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a10e:	d807      	bhi.n	800a120 <_printf_i+0x28>
 800a110:	2f62      	cmp	r7, #98	@ 0x62
 800a112:	d80a      	bhi.n	800a12a <_printf_i+0x32>
 800a114:	2f00      	cmp	r7, #0
 800a116:	f000 80d1 	beq.w	800a2bc <_printf_i+0x1c4>
 800a11a:	2f58      	cmp	r7, #88	@ 0x58
 800a11c:	f000 80b8 	beq.w	800a290 <_printf_i+0x198>
 800a120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a128:	e03a      	b.n	800a1a0 <_printf_i+0xa8>
 800a12a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a12e:	2b15      	cmp	r3, #21
 800a130:	d8f6      	bhi.n	800a120 <_printf_i+0x28>
 800a132:	a101      	add	r1, pc, #4	@ (adr r1, 800a138 <_printf_i+0x40>)
 800a134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a138:	0800a191 	.word	0x0800a191
 800a13c:	0800a1a5 	.word	0x0800a1a5
 800a140:	0800a121 	.word	0x0800a121
 800a144:	0800a121 	.word	0x0800a121
 800a148:	0800a121 	.word	0x0800a121
 800a14c:	0800a121 	.word	0x0800a121
 800a150:	0800a1a5 	.word	0x0800a1a5
 800a154:	0800a121 	.word	0x0800a121
 800a158:	0800a121 	.word	0x0800a121
 800a15c:	0800a121 	.word	0x0800a121
 800a160:	0800a121 	.word	0x0800a121
 800a164:	0800a2a3 	.word	0x0800a2a3
 800a168:	0800a1cf 	.word	0x0800a1cf
 800a16c:	0800a25d 	.word	0x0800a25d
 800a170:	0800a121 	.word	0x0800a121
 800a174:	0800a121 	.word	0x0800a121
 800a178:	0800a2c5 	.word	0x0800a2c5
 800a17c:	0800a121 	.word	0x0800a121
 800a180:	0800a1cf 	.word	0x0800a1cf
 800a184:	0800a121 	.word	0x0800a121
 800a188:	0800a121 	.word	0x0800a121
 800a18c:	0800a265 	.word	0x0800a265
 800a190:	6833      	ldr	r3, [r6, #0]
 800a192:	1d1a      	adds	r2, r3, #4
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6032      	str	r2, [r6, #0]
 800a198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a19c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e09c      	b.n	800a2de <_printf_i+0x1e6>
 800a1a4:	6833      	ldr	r3, [r6, #0]
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	1d19      	adds	r1, r3, #4
 800a1aa:	6031      	str	r1, [r6, #0]
 800a1ac:	0606      	lsls	r6, r0, #24
 800a1ae:	d501      	bpl.n	800a1b4 <_printf_i+0xbc>
 800a1b0:	681d      	ldr	r5, [r3, #0]
 800a1b2:	e003      	b.n	800a1bc <_printf_i+0xc4>
 800a1b4:	0645      	lsls	r5, r0, #25
 800a1b6:	d5fb      	bpl.n	800a1b0 <_printf_i+0xb8>
 800a1b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1bc:	2d00      	cmp	r5, #0
 800a1be:	da03      	bge.n	800a1c8 <_printf_i+0xd0>
 800a1c0:	232d      	movs	r3, #45	@ 0x2d
 800a1c2:	426d      	negs	r5, r5
 800a1c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1c8:	4858      	ldr	r0, [pc, #352]	@ (800a32c <_printf_i+0x234>)
 800a1ca:	230a      	movs	r3, #10
 800a1cc:	e011      	b.n	800a1f2 <_printf_i+0xfa>
 800a1ce:	6821      	ldr	r1, [r4, #0]
 800a1d0:	6833      	ldr	r3, [r6, #0]
 800a1d2:	0608      	lsls	r0, r1, #24
 800a1d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1d8:	d402      	bmi.n	800a1e0 <_printf_i+0xe8>
 800a1da:	0649      	lsls	r1, r1, #25
 800a1dc:	bf48      	it	mi
 800a1de:	b2ad      	uxthmi	r5, r5
 800a1e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1e2:	4852      	ldr	r0, [pc, #328]	@ (800a32c <_printf_i+0x234>)
 800a1e4:	6033      	str	r3, [r6, #0]
 800a1e6:	bf14      	ite	ne
 800a1e8:	230a      	movne	r3, #10
 800a1ea:	2308      	moveq	r3, #8
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1f2:	6866      	ldr	r6, [r4, #4]
 800a1f4:	60a6      	str	r6, [r4, #8]
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	db05      	blt.n	800a206 <_printf_i+0x10e>
 800a1fa:	6821      	ldr	r1, [r4, #0]
 800a1fc:	432e      	orrs	r6, r5
 800a1fe:	f021 0104 	bic.w	r1, r1, #4
 800a202:	6021      	str	r1, [r4, #0]
 800a204:	d04b      	beq.n	800a29e <_printf_i+0x1a6>
 800a206:	4616      	mov	r6, r2
 800a208:	fbb5 f1f3 	udiv	r1, r5, r3
 800a20c:	fb03 5711 	mls	r7, r3, r1, r5
 800a210:	5dc7      	ldrb	r7, [r0, r7]
 800a212:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a216:	462f      	mov	r7, r5
 800a218:	42bb      	cmp	r3, r7
 800a21a:	460d      	mov	r5, r1
 800a21c:	d9f4      	bls.n	800a208 <_printf_i+0x110>
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d10b      	bne.n	800a23a <_printf_i+0x142>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	07df      	lsls	r7, r3, #31
 800a226:	d508      	bpl.n	800a23a <_printf_i+0x142>
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	6861      	ldr	r1, [r4, #4]
 800a22c:	4299      	cmp	r1, r3
 800a22e:	bfde      	ittt	le
 800a230:	2330      	movle	r3, #48	@ 0x30
 800a232:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a236:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a23a:	1b92      	subs	r2, r2, r6
 800a23c:	6122      	str	r2, [r4, #16]
 800a23e:	f8cd a000 	str.w	sl, [sp]
 800a242:	464b      	mov	r3, r9
 800a244:	aa03      	add	r2, sp, #12
 800a246:	4621      	mov	r1, r4
 800a248:	4640      	mov	r0, r8
 800a24a:	f7ff fee7 	bl	800a01c <_printf_common>
 800a24e:	3001      	adds	r0, #1
 800a250:	d14a      	bne.n	800a2e8 <_printf_i+0x1f0>
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	b004      	add	sp, #16
 800a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	f043 0320 	orr.w	r3, r3, #32
 800a262:	6023      	str	r3, [r4, #0]
 800a264:	4832      	ldr	r0, [pc, #200]	@ (800a330 <_printf_i+0x238>)
 800a266:	2778      	movs	r7, #120	@ 0x78
 800a268:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	6831      	ldr	r1, [r6, #0]
 800a270:	061f      	lsls	r7, r3, #24
 800a272:	f851 5b04 	ldr.w	r5, [r1], #4
 800a276:	d402      	bmi.n	800a27e <_printf_i+0x186>
 800a278:	065f      	lsls	r7, r3, #25
 800a27a:	bf48      	it	mi
 800a27c:	b2ad      	uxthmi	r5, r5
 800a27e:	6031      	str	r1, [r6, #0]
 800a280:	07d9      	lsls	r1, r3, #31
 800a282:	bf44      	itt	mi
 800a284:	f043 0320 	orrmi.w	r3, r3, #32
 800a288:	6023      	strmi	r3, [r4, #0]
 800a28a:	b11d      	cbz	r5, 800a294 <_printf_i+0x19c>
 800a28c:	2310      	movs	r3, #16
 800a28e:	e7ad      	b.n	800a1ec <_printf_i+0xf4>
 800a290:	4826      	ldr	r0, [pc, #152]	@ (800a32c <_printf_i+0x234>)
 800a292:	e7e9      	b.n	800a268 <_printf_i+0x170>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	f023 0320 	bic.w	r3, r3, #32
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	e7f6      	b.n	800a28c <_printf_i+0x194>
 800a29e:	4616      	mov	r6, r2
 800a2a0:	e7bd      	b.n	800a21e <_printf_i+0x126>
 800a2a2:	6833      	ldr	r3, [r6, #0]
 800a2a4:	6825      	ldr	r5, [r4, #0]
 800a2a6:	6961      	ldr	r1, [r4, #20]
 800a2a8:	1d18      	adds	r0, r3, #4
 800a2aa:	6030      	str	r0, [r6, #0]
 800a2ac:	062e      	lsls	r6, r5, #24
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	d501      	bpl.n	800a2b6 <_printf_i+0x1be>
 800a2b2:	6019      	str	r1, [r3, #0]
 800a2b4:	e002      	b.n	800a2bc <_printf_i+0x1c4>
 800a2b6:	0668      	lsls	r0, r5, #25
 800a2b8:	d5fb      	bpl.n	800a2b2 <_printf_i+0x1ba>
 800a2ba:	8019      	strh	r1, [r3, #0]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	6123      	str	r3, [r4, #16]
 800a2c0:	4616      	mov	r6, r2
 800a2c2:	e7bc      	b.n	800a23e <_printf_i+0x146>
 800a2c4:	6833      	ldr	r3, [r6, #0]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	6032      	str	r2, [r6, #0]
 800a2ca:	681e      	ldr	r6, [r3, #0]
 800a2cc:	6862      	ldr	r2, [r4, #4]
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7f6 f805 	bl	80002e0 <memchr>
 800a2d6:	b108      	cbz	r0, 800a2dc <_printf_i+0x1e4>
 800a2d8:	1b80      	subs	r0, r0, r6
 800a2da:	6060      	str	r0, [r4, #4]
 800a2dc:	6863      	ldr	r3, [r4, #4]
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e6:	e7aa      	b.n	800a23e <_printf_i+0x146>
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	47d0      	blx	sl
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d0ad      	beq.n	800a252 <_printf_i+0x15a>
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	079b      	lsls	r3, r3, #30
 800a2fa:	d413      	bmi.n	800a324 <_printf_i+0x22c>
 800a2fc:	68e0      	ldr	r0, [r4, #12]
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	4298      	cmp	r0, r3
 800a302:	bfb8      	it	lt
 800a304:	4618      	movlt	r0, r3
 800a306:	e7a6      	b.n	800a256 <_printf_i+0x15e>
 800a308:	2301      	movs	r3, #1
 800a30a:	4632      	mov	r2, r6
 800a30c:	4649      	mov	r1, r9
 800a30e:	4640      	mov	r0, r8
 800a310:	47d0      	blx	sl
 800a312:	3001      	adds	r0, #1
 800a314:	d09d      	beq.n	800a252 <_printf_i+0x15a>
 800a316:	3501      	adds	r5, #1
 800a318:	68e3      	ldr	r3, [r4, #12]
 800a31a:	9903      	ldr	r1, [sp, #12]
 800a31c:	1a5b      	subs	r3, r3, r1
 800a31e:	42ab      	cmp	r3, r5
 800a320:	dcf2      	bgt.n	800a308 <_printf_i+0x210>
 800a322:	e7eb      	b.n	800a2fc <_printf_i+0x204>
 800a324:	2500      	movs	r5, #0
 800a326:	f104 0619 	add.w	r6, r4, #25
 800a32a:	e7f5      	b.n	800a318 <_printf_i+0x220>
 800a32c:	0800e14e 	.word	0x0800e14e
 800a330:	0800e15f 	.word	0x0800e15f

0800a334 <_scanf_float>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	b087      	sub	sp, #28
 800a33a:	4691      	mov	r9, r2
 800a33c:	9303      	str	r3, [sp, #12]
 800a33e:	688b      	ldr	r3, [r1, #8]
 800a340:	1e5a      	subs	r2, r3, #1
 800a342:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a346:	bf81      	itttt	hi
 800a348:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a34c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a350:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a354:	608b      	strhi	r3, [r1, #8]
 800a356:	680b      	ldr	r3, [r1, #0]
 800a358:	460a      	mov	r2, r1
 800a35a:	f04f 0500 	mov.w	r5, #0
 800a35e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a362:	f842 3b1c 	str.w	r3, [r2], #28
 800a366:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a36a:	4680      	mov	r8, r0
 800a36c:	460c      	mov	r4, r1
 800a36e:	bf98      	it	ls
 800a370:	f04f 0b00 	movls.w	fp, #0
 800a374:	9201      	str	r2, [sp, #4]
 800a376:	4616      	mov	r6, r2
 800a378:	46aa      	mov	sl, r5
 800a37a:	462f      	mov	r7, r5
 800a37c:	9502      	str	r5, [sp, #8]
 800a37e:	68a2      	ldr	r2, [r4, #8]
 800a380:	b15a      	cbz	r2, 800a39a <_scanf_float+0x66>
 800a382:	f8d9 3000 	ldr.w	r3, [r9]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b4e      	cmp	r3, #78	@ 0x4e
 800a38a:	d863      	bhi.n	800a454 <_scanf_float+0x120>
 800a38c:	2b40      	cmp	r3, #64	@ 0x40
 800a38e:	d83b      	bhi.n	800a408 <_scanf_float+0xd4>
 800a390:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a394:	b2c8      	uxtb	r0, r1
 800a396:	280e      	cmp	r0, #14
 800a398:	d939      	bls.n	800a40e <_scanf_float+0xda>
 800a39a:	b11f      	cbz	r7, 800a3a4 <_scanf_float+0x70>
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3a8:	f1ba 0f01 	cmp.w	sl, #1
 800a3ac:	f200 8114 	bhi.w	800a5d8 <_scanf_float+0x2a4>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	429e      	cmp	r6, r3
 800a3b4:	f200 8105 	bhi.w	800a5c2 <_scanf_float+0x28e>
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	b007      	add	sp, #28
 800a3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a3c4:	2a0d      	cmp	r2, #13
 800a3c6:	d8e8      	bhi.n	800a39a <_scanf_float+0x66>
 800a3c8:	a101      	add	r1, pc, #4	@ (adr r1, 800a3d0 <_scanf_float+0x9c>)
 800a3ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a519 	.word	0x0800a519
 800a3d4:	0800a39b 	.word	0x0800a39b
 800a3d8:	0800a39b 	.word	0x0800a39b
 800a3dc:	0800a39b 	.word	0x0800a39b
 800a3e0:	0800a575 	.word	0x0800a575
 800a3e4:	0800a54f 	.word	0x0800a54f
 800a3e8:	0800a39b 	.word	0x0800a39b
 800a3ec:	0800a39b 	.word	0x0800a39b
 800a3f0:	0800a527 	.word	0x0800a527
 800a3f4:	0800a39b 	.word	0x0800a39b
 800a3f8:	0800a39b 	.word	0x0800a39b
 800a3fc:	0800a39b 	.word	0x0800a39b
 800a400:	0800a39b 	.word	0x0800a39b
 800a404:	0800a4e3 	.word	0x0800a4e3
 800a408:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a40c:	e7da      	b.n	800a3c4 <_scanf_float+0x90>
 800a40e:	290e      	cmp	r1, #14
 800a410:	d8c3      	bhi.n	800a39a <_scanf_float+0x66>
 800a412:	a001      	add	r0, pc, #4	@ (adr r0, 800a418 <_scanf_float+0xe4>)
 800a414:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a418:	0800a4d3 	.word	0x0800a4d3
 800a41c:	0800a39b 	.word	0x0800a39b
 800a420:	0800a4d3 	.word	0x0800a4d3
 800a424:	0800a563 	.word	0x0800a563
 800a428:	0800a39b 	.word	0x0800a39b
 800a42c:	0800a475 	.word	0x0800a475
 800a430:	0800a4b9 	.word	0x0800a4b9
 800a434:	0800a4b9 	.word	0x0800a4b9
 800a438:	0800a4b9 	.word	0x0800a4b9
 800a43c:	0800a4b9 	.word	0x0800a4b9
 800a440:	0800a4b9 	.word	0x0800a4b9
 800a444:	0800a4b9 	.word	0x0800a4b9
 800a448:	0800a4b9 	.word	0x0800a4b9
 800a44c:	0800a4b9 	.word	0x0800a4b9
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	2b6e      	cmp	r3, #110	@ 0x6e
 800a456:	d809      	bhi.n	800a46c <_scanf_float+0x138>
 800a458:	2b60      	cmp	r3, #96	@ 0x60
 800a45a:	d8b1      	bhi.n	800a3c0 <_scanf_float+0x8c>
 800a45c:	2b54      	cmp	r3, #84	@ 0x54
 800a45e:	d07b      	beq.n	800a558 <_scanf_float+0x224>
 800a460:	2b59      	cmp	r3, #89	@ 0x59
 800a462:	d19a      	bne.n	800a39a <_scanf_float+0x66>
 800a464:	2d07      	cmp	r5, #7
 800a466:	d198      	bne.n	800a39a <_scanf_float+0x66>
 800a468:	2508      	movs	r5, #8
 800a46a:	e02f      	b.n	800a4cc <_scanf_float+0x198>
 800a46c:	2b74      	cmp	r3, #116	@ 0x74
 800a46e:	d073      	beq.n	800a558 <_scanf_float+0x224>
 800a470:	2b79      	cmp	r3, #121	@ 0x79
 800a472:	e7f6      	b.n	800a462 <_scanf_float+0x12e>
 800a474:	6821      	ldr	r1, [r4, #0]
 800a476:	05c8      	lsls	r0, r1, #23
 800a478:	d51e      	bpl.n	800a4b8 <_scanf_float+0x184>
 800a47a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a47e:	6021      	str	r1, [r4, #0]
 800a480:	3701      	adds	r7, #1
 800a482:	f1bb 0f00 	cmp.w	fp, #0
 800a486:	d003      	beq.n	800a490 <_scanf_float+0x15c>
 800a488:	3201      	adds	r2, #1
 800a48a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a48e:	60a2      	str	r2, [r4, #8]
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	3b01      	subs	r3, #1
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6923      	ldr	r3, [r4, #16]
 800a498:	3301      	adds	r3, #1
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f8c9 3004 	str.w	r3, [r9, #4]
 800a4a8:	f340 8082 	ble.w	800a5b0 <_scanf_float+0x27c>
 800a4ac:	f8d9 3000 	ldr.w	r3, [r9]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	f8c9 3000 	str.w	r3, [r9]
 800a4b6:	e762      	b.n	800a37e <_scanf_float+0x4a>
 800a4b8:	eb1a 0105 	adds.w	r1, sl, r5
 800a4bc:	f47f af6d 	bne.w	800a39a <_scanf_float+0x66>
 800a4c0:	6822      	ldr	r2, [r4, #0]
 800a4c2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a4c6:	6022      	str	r2, [r4, #0]
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	468a      	mov	sl, r1
 800a4cc:	f806 3b01 	strb.w	r3, [r6], #1
 800a4d0:	e7de      	b.n	800a490 <_scanf_float+0x15c>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	0610      	lsls	r0, r2, #24
 800a4d6:	f57f af60 	bpl.w	800a39a <_scanf_float+0x66>
 800a4da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4de:	6022      	str	r2, [r4, #0]
 800a4e0:	e7f4      	b.n	800a4cc <_scanf_float+0x198>
 800a4e2:	f1ba 0f00 	cmp.w	sl, #0
 800a4e6:	d10c      	bne.n	800a502 <_scanf_float+0x1ce>
 800a4e8:	b977      	cbnz	r7, 800a508 <_scanf_float+0x1d4>
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a4f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a4f4:	d108      	bne.n	800a508 <_scanf_float+0x1d4>
 800a4f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	f04f 0a01 	mov.w	sl, #1
 800a500:	e7e4      	b.n	800a4cc <_scanf_float+0x198>
 800a502:	f1ba 0f02 	cmp.w	sl, #2
 800a506:	d050      	beq.n	800a5aa <_scanf_float+0x276>
 800a508:	2d01      	cmp	r5, #1
 800a50a:	d002      	beq.n	800a512 <_scanf_float+0x1de>
 800a50c:	2d04      	cmp	r5, #4
 800a50e:	f47f af44 	bne.w	800a39a <_scanf_float+0x66>
 800a512:	3501      	adds	r5, #1
 800a514:	b2ed      	uxtb	r5, r5
 800a516:	e7d9      	b.n	800a4cc <_scanf_float+0x198>
 800a518:	f1ba 0f01 	cmp.w	sl, #1
 800a51c:	f47f af3d 	bne.w	800a39a <_scanf_float+0x66>
 800a520:	f04f 0a02 	mov.w	sl, #2
 800a524:	e7d2      	b.n	800a4cc <_scanf_float+0x198>
 800a526:	b975      	cbnz	r5, 800a546 <_scanf_float+0x212>
 800a528:	2f00      	cmp	r7, #0
 800a52a:	f47f af37 	bne.w	800a39c <_scanf_float+0x68>
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a534:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a538:	f040 80fc 	bne.w	800a734 <_scanf_float+0x400>
 800a53c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a540:	6022      	str	r2, [r4, #0]
 800a542:	2501      	movs	r5, #1
 800a544:	e7c2      	b.n	800a4cc <_scanf_float+0x198>
 800a546:	2d03      	cmp	r5, #3
 800a548:	d0e3      	beq.n	800a512 <_scanf_float+0x1de>
 800a54a:	2d05      	cmp	r5, #5
 800a54c:	e7df      	b.n	800a50e <_scanf_float+0x1da>
 800a54e:	2d02      	cmp	r5, #2
 800a550:	f47f af23 	bne.w	800a39a <_scanf_float+0x66>
 800a554:	2503      	movs	r5, #3
 800a556:	e7b9      	b.n	800a4cc <_scanf_float+0x198>
 800a558:	2d06      	cmp	r5, #6
 800a55a:	f47f af1e 	bne.w	800a39a <_scanf_float+0x66>
 800a55e:	2507      	movs	r5, #7
 800a560:	e7b4      	b.n	800a4cc <_scanf_float+0x198>
 800a562:	6822      	ldr	r2, [r4, #0]
 800a564:	0591      	lsls	r1, r2, #22
 800a566:	f57f af18 	bpl.w	800a39a <_scanf_float+0x66>
 800a56a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a56e:	6022      	str	r2, [r4, #0]
 800a570:	9702      	str	r7, [sp, #8]
 800a572:	e7ab      	b.n	800a4cc <_scanf_float+0x198>
 800a574:	6822      	ldr	r2, [r4, #0]
 800a576:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a57a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a57e:	d005      	beq.n	800a58c <_scanf_float+0x258>
 800a580:	0550      	lsls	r0, r2, #21
 800a582:	f57f af0a 	bpl.w	800a39a <_scanf_float+0x66>
 800a586:	2f00      	cmp	r7, #0
 800a588:	f000 80d4 	beq.w	800a734 <_scanf_float+0x400>
 800a58c:	0591      	lsls	r1, r2, #22
 800a58e:	bf58      	it	pl
 800a590:	9902      	ldrpl	r1, [sp, #8]
 800a592:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a596:	bf58      	it	pl
 800a598:	1a79      	subpl	r1, r7, r1
 800a59a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a59e:	bf58      	it	pl
 800a5a0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a5a4:	6022      	str	r2, [r4, #0]
 800a5a6:	2700      	movs	r7, #0
 800a5a8:	e790      	b.n	800a4cc <_scanf_float+0x198>
 800a5aa:	f04f 0a03 	mov.w	sl, #3
 800a5ae:	e78d      	b.n	800a4cc <_scanf_float+0x198>
 800a5b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4798      	blx	r3
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f aedf 	beq.w	800a37e <_scanf_float+0x4a>
 800a5c0:	e6eb      	b.n	800a39a <_scanf_float+0x66>
 800a5c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5ca:	464a      	mov	r2, r9
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4798      	blx	r3
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	e6eb      	b.n	800a3b0 <_scanf_float+0x7c>
 800a5d8:	1e6b      	subs	r3, r5, #1
 800a5da:	2b06      	cmp	r3, #6
 800a5dc:	d824      	bhi.n	800a628 <_scanf_float+0x2f4>
 800a5de:	2d02      	cmp	r5, #2
 800a5e0:	d836      	bhi.n	800a650 <_scanf_float+0x31c>
 800a5e2:	9b01      	ldr	r3, [sp, #4]
 800a5e4:	429e      	cmp	r6, r3
 800a5e6:	f67f aee7 	bls.w	800a3b8 <_scanf_float+0x84>
 800a5ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a5ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5f2:	464a      	mov	r2, r9
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	4798      	blx	r3
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	6123      	str	r3, [r4, #16]
 800a5fe:	e7f0      	b.n	800a5e2 <_scanf_float+0x2ae>
 800a600:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a604:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a608:	464a      	mov	r2, r9
 800a60a:	4640      	mov	r0, r8
 800a60c:	4798      	blx	r3
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	3b01      	subs	r3, #1
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a618:	fa5f fa8a 	uxtb.w	sl, sl
 800a61c:	f1ba 0f02 	cmp.w	sl, #2
 800a620:	d1ee      	bne.n	800a600 <_scanf_float+0x2cc>
 800a622:	3d03      	subs	r5, #3
 800a624:	b2ed      	uxtb	r5, r5
 800a626:	1b76      	subs	r6, r6, r5
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	05da      	lsls	r2, r3, #23
 800a62c:	d530      	bpl.n	800a690 <_scanf_float+0x35c>
 800a62e:	055b      	lsls	r3, r3, #21
 800a630:	d511      	bpl.n	800a656 <_scanf_float+0x322>
 800a632:	9b01      	ldr	r3, [sp, #4]
 800a634:	429e      	cmp	r6, r3
 800a636:	f67f aebf 	bls.w	800a3b8 <_scanf_float+0x84>
 800a63a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a63e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a642:	464a      	mov	r2, r9
 800a644:	4640      	mov	r0, r8
 800a646:	4798      	blx	r3
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	e7f0      	b.n	800a632 <_scanf_float+0x2fe>
 800a650:	46aa      	mov	sl, r5
 800a652:	46b3      	mov	fp, r6
 800a654:	e7de      	b.n	800a614 <_scanf_float+0x2e0>
 800a656:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	2965      	cmp	r1, #101	@ 0x65
 800a65e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a662:	f106 35ff 	add.w	r5, r6, #4294967295
 800a666:	6123      	str	r3, [r4, #16]
 800a668:	d00c      	beq.n	800a684 <_scanf_float+0x350>
 800a66a:	2945      	cmp	r1, #69	@ 0x45
 800a66c:	d00a      	beq.n	800a684 <_scanf_float+0x350>
 800a66e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a672:	464a      	mov	r2, r9
 800a674:	4640      	mov	r0, r8
 800a676:	4798      	blx	r3
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a67e:	3b01      	subs	r3, #1
 800a680:	1eb5      	subs	r5, r6, #2
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a688:	464a      	mov	r2, r9
 800a68a:	4640      	mov	r0, r8
 800a68c:	4798      	blx	r3
 800a68e:	462e      	mov	r6, r5
 800a690:	6822      	ldr	r2, [r4, #0]
 800a692:	f012 0210 	ands.w	r2, r2, #16
 800a696:	d001      	beq.n	800a69c <_scanf_float+0x368>
 800a698:	2000      	movs	r0, #0
 800a69a:	e68e      	b.n	800a3ba <_scanf_float+0x86>
 800a69c:	7032      	strb	r2, [r6, #0]
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a6a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6a8:	d123      	bne.n	800a6f2 <_scanf_float+0x3be>
 800a6aa:	9b02      	ldr	r3, [sp, #8]
 800a6ac:	429f      	cmp	r7, r3
 800a6ae:	d00a      	beq.n	800a6c6 <_scanf_float+0x392>
 800a6b0:	1bda      	subs	r2, r3, r7
 800a6b2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a6b6:	429e      	cmp	r6, r3
 800a6b8:	bf28      	it	cs
 800a6ba:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a6be:	491e      	ldr	r1, [pc, #120]	@ (800a738 <_scanf_float+0x404>)
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f000 f8ff 	bl	800a8c4 <siprintf>
 800a6c6:	9901      	ldr	r1, [sp, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f002 fb2a 	bl	800cd24 <_strtod_r>
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f011 0f02 	tst.w	r1, #2
 800a6da:	f103 0204 	add.w	r2, r3, #4
 800a6de:	d015      	beq.n	800a70c <_scanf_float+0x3d8>
 800a6e0:	9903      	ldr	r1, [sp, #12]
 800a6e2:	600a      	str	r2, [r1, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	ed83 0b00 	vstr	d0, [r3]
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	60e3      	str	r3, [r4, #12]
 800a6f0:	e7d2      	b.n	800a698 <_scanf_float+0x364>
 800a6f2:	9b04      	ldr	r3, [sp, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0e6      	beq.n	800a6c6 <_scanf_float+0x392>
 800a6f8:	9905      	ldr	r1, [sp, #20]
 800a6fa:	230a      	movs	r3, #10
 800a6fc:	3101      	adds	r1, #1
 800a6fe:	4640      	mov	r0, r8
 800a700:	f002 fb90 	bl	800ce24 <_strtol_r>
 800a704:	9b04      	ldr	r3, [sp, #16]
 800a706:	9e05      	ldr	r6, [sp, #20]
 800a708:	1ac2      	subs	r2, r0, r3
 800a70a:	e7d2      	b.n	800a6b2 <_scanf_float+0x37e>
 800a70c:	f011 0f04 	tst.w	r1, #4
 800a710:	9903      	ldr	r1, [sp, #12]
 800a712:	600a      	str	r2, [r1, #0]
 800a714:	d1e6      	bne.n	800a6e4 <_scanf_float+0x3b0>
 800a716:	eeb4 0b40 	vcmp.f64	d0, d0
 800a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71e:	681d      	ldr	r5, [r3, #0]
 800a720:	d705      	bvc.n	800a72e <_scanf_float+0x3fa>
 800a722:	4806      	ldr	r0, [pc, #24]	@ (800a73c <_scanf_float+0x408>)
 800a724:	f000 f9b4 	bl	800aa90 <nanf>
 800a728:	ed85 0a00 	vstr	s0, [r5]
 800a72c:	e7dd      	b.n	800a6ea <_scanf_float+0x3b6>
 800a72e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a732:	e7f9      	b.n	800a728 <_scanf_float+0x3f4>
 800a734:	2700      	movs	r7, #0
 800a736:	e635      	b.n	800a3a4 <_scanf_float+0x70>
 800a738:	0800e170 	.word	0x0800e170
 800a73c:	0800e2b1 	.word	0x0800e2b1

0800a740 <std>:
 800a740:	2300      	movs	r3, #0
 800a742:	b510      	push	{r4, lr}
 800a744:	4604      	mov	r4, r0
 800a746:	e9c0 3300 	strd	r3, r3, [r0]
 800a74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a74e:	6083      	str	r3, [r0, #8]
 800a750:	8181      	strh	r1, [r0, #12]
 800a752:	6643      	str	r3, [r0, #100]	@ 0x64
 800a754:	81c2      	strh	r2, [r0, #14]
 800a756:	6183      	str	r3, [r0, #24]
 800a758:	4619      	mov	r1, r3
 800a75a:	2208      	movs	r2, #8
 800a75c:	305c      	adds	r0, #92	@ 0x5c
 800a75e:	f000 f916 	bl	800a98e <memset>
 800a762:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <std+0x58>)
 800a764:	6263      	str	r3, [r4, #36]	@ 0x24
 800a766:	4b0d      	ldr	r3, [pc, #52]	@ (800a79c <std+0x5c>)
 800a768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a76a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a0 <std+0x60>)
 800a76c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a76e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a4 <std+0x64>)
 800a770:	6323      	str	r3, [r4, #48]	@ 0x30
 800a772:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a8 <std+0x68>)
 800a774:	6224      	str	r4, [r4, #32]
 800a776:	429c      	cmp	r4, r3
 800a778:	d006      	beq.n	800a788 <std+0x48>
 800a77a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a77e:	4294      	cmp	r4, r2
 800a780:	d002      	beq.n	800a788 <std+0x48>
 800a782:	33d0      	adds	r3, #208	@ 0xd0
 800a784:	429c      	cmp	r4, r3
 800a786:	d105      	bne.n	800a794 <std+0x54>
 800a788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a790:	f000 b97a 	b.w	800aa88 <__retarget_lock_init_recursive>
 800a794:	bd10      	pop	{r4, pc}
 800a796:	bf00      	nop
 800a798:	0800a909 	.word	0x0800a909
 800a79c:	0800a92b 	.word	0x0800a92b
 800a7a0:	0800a963 	.word	0x0800a963
 800a7a4:	0800a987 	.word	0x0800a987
 800a7a8:	24000488 	.word	0x24000488

0800a7ac <stdio_exit_handler>:
 800a7ac:	4a02      	ldr	r2, [pc, #8]	@ (800a7b8 <stdio_exit_handler+0xc>)
 800a7ae:	4903      	ldr	r1, [pc, #12]	@ (800a7bc <stdio_exit_handler+0x10>)
 800a7b0:	4803      	ldr	r0, [pc, #12]	@ (800a7c0 <stdio_exit_handler+0x14>)
 800a7b2:	f000 b869 	b.w	800a888 <_fwalk_sglue>
 800a7b6:	bf00      	nop
 800a7b8:	24000010 	.word	0x24000010
 800a7bc:	0800d1e1 	.word	0x0800d1e1
 800a7c0:	24000020 	.word	0x24000020

0800a7c4 <cleanup_stdio>:
 800a7c4:	6841      	ldr	r1, [r0, #4]
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f8 <cleanup_stdio+0x34>)
 800a7c8:	4299      	cmp	r1, r3
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	d001      	beq.n	800a7d4 <cleanup_stdio+0x10>
 800a7d0:	f002 fd06 	bl	800d1e0 <_fflush_r>
 800a7d4:	68a1      	ldr	r1, [r4, #8]
 800a7d6:	4b09      	ldr	r3, [pc, #36]	@ (800a7fc <cleanup_stdio+0x38>)
 800a7d8:	4299      	cmp	r1, r3
 800a7da:	d002      	beq.n	800a7e2 <cleanup_stdio+0x1e>
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f002 fcff 	bl	800d1e0 <_fflush_r>
 800a7e2:	68e1      	ldr	r1, [r4, #12]
 800a7e4:	4b06      	ldr	r3, [pc, #24]	@ (800a800 <cleanup_stdio+0x3c>)
 800a7e6:	4299      	cmp	r1, r3
 800a7e8:	d004      	beq.n	800a7f4 <cleanup_stdio+0x30>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f0:	f002 bcf6 	b.w	800d1e0 <_fflush_r>
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	bf00      	nop
 800a7f8:	24000488 	.word	0x24000488
 800a7fc:	240004f0 	.word	0x240004f0
 800a800:	24000558 	.word	0x24000558

0800a804 <global_stdio_init.part.0>:
 800a804:	b510      	push	{r4, lr}
 800a806:	4b0b      	ldr	r3, [pc, #44]	@ (800a834 <global_stdio_init.part.0+0x30>)
 800a808:	4c0b      	ldr	r4, [pc, #44]	@ (800a838 <global_stdio_init.part.0+0x34>)
 800a80a:	4a0c      	ldr	r2, [pc, #48]	@ (800a83c <global_stdio_init.part.0+0x38>)
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	4620      	mov	r0, r4
 800a810:	2200      	movs	r2, #0
 800a812:	2104      	movs	r1, #4
 800a814:	f7ff ff94 	bl	800a740 <std>
 800a818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a81c:	2201      	movs	r2, #1
 800a81e:	2109      	movs	r1, #9
 800a820:	f7ff ff8e 	bl	800a740 <std>
 800a824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a828:	2202      	movs	r2, #2
 800a82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a82e:	2112      	movs	r1, #18
 800a830:	f7ff bf86 	b.w	800a740 <std>
 800a834:	240005c0 	.word	0x240005c0
 800a838:	24000488 	.word	0x24000488
 800a83c:	0800a7ad 	.word	0x0800a7ad

0800a840 <__sfp_lock_acquire>:
 800a840:	4801      	ldr	r0, [pc, #4]	@ (800a848 <__sfp_lock_acquire+0x8>)
 800a842:	f000 b922 	b.w	800aa8a <__retarget_lock_acquire_recursive>
 800a846:	bf00      	nop
 800a848:	240005c9 	.word	0x240005c9

0800a84c <__sfp_lock_release>:
 800a84c:	4801      	ldr	r0, [pc, #4]	@ (800a854 <__sfp_lock_release+0x8>)
 800a84e:	f000 b91d 	b.w	800aa8c <__retarget_lock_release_recursive>
 800a852:	bf00      	nop
 800a854:	240005c9 	.word	0x240005c9

0800a858 <__sinit>:
 800a858:	b510      	push	{r4, lr}
 800a85a:	4604      	mov	r4, r0
 800a85c:	f7ff fff0 	bl	800a840 <__sfp_lock_acquire>
 800a860:	6a23      	ldr	r3, [r4, #32]
 800a862:	b11b      	cbz	r3, 800a86c <__sinit+0x14>
 800a864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a868:	f7ff bff0 	b.w	800a84c <__sfp_lock_release>
 800a86c:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <__sinit+0x28>)
 800a86e:	6223      	str	r3, [r4, #32]
 800a870:	4b04      	ldr	r3, [pc, #16]	@ (800a884 <__sinit+0x2c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f5      	bne.n	800a864 <__sinit+0xc>
 800a878:	f7ff ffc4 	bl	800a804 <global_stdio_init.part.0>
 800a87c:	e7f2      	b.n	800a864 <__sinit+0xc>
 800a87e:	bf00      	nop
 800a880:	0800a7c5 	.word	0x0800a7c5
 800a884:	240005c0 	.word	0x240005c0

0800a888 <_fwalk_sglue>:
 800a888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a88c:	4607      	mov	r7, r0
 800a88e:	4688      	mov	r8, r1
 800a890:	4614      	mov	r4, r2
 800a892:	2600      	movs	r6, #0
 800a894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a898:	f1b9 0901 	subs.w	r9, r9, #1
 800a89c:	d505      	bpl.n	800a8aa <_fwalk_sglue+0x22>
 800a89e:	6824      	ldr	r4, [r4, #0]
 800a8a0:	2c00      	cmp	r4, #0
 800a8a2:	d1f7      	bne.n	800a894 <_fwalk_sglue+0xc>
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d907      	bls.n	800a8c0 <_fwalk_sglue+0x38>
 800a8b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	d003      	beq.n	800a8c0 <_fwalk_sglue+0x38>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	47c0      	blx	r8
 800a8be:	4306      	orrs	r6, r0
 800a8c0:	3568      	adds	r5, #104	@ 0x68
 800a8c2:	e7e9      	b.n	800a898 <_fwalk_sglue+0x10>

0800a8c4 <siprintf>:
 800a8c4:	b40e      	push	{r1, r2, r3}
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	b09d      	sub	sp, #116	@ 0x74
 800a8ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a8cc:	9002      	str	r0, [sp, #8]
 800a8ce:	9006      	str	r0, [sp, #24]
 800a8d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8d4:	480a      	ldr	r0, [pc, #40]	@ (800a900 <siprintf+0x3c>)
 800a8d6:	9107      	str	r1, [sp, #28]
 800a8d8:	9104      	str	r1, [sp, #16]
 800a8da:	490a      	ldr	r1, [pc, #40]	@ (800a904 <siprintf+0x40>)
 800a8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e0:	9105      	str	r1, [sp, #20]
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	a902      	add	r1, sp, #8
 800a8e6:	6800      	ldr	r0, [r0, #0]
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a8ec:	f002 faf8 	bl	800cee0 <_svfiprintf_r>
 800a8f0:	9b02      	ldr	r3, [sp, #8]
 800a8f2:	701c      	strb	r4, [r3, #0]
 800a8f4:	b01d      	add	sp, #116	@ 0x74
 800a8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8fa:	b003      	add	sp, #12
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	2400001c 	.word	0x2400001c
 800a904:	ffff0208 	.word	0xffff0208

0800a908 <__sread>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	460c      	mov	r4, r1
 800a90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a910:	f000 f86c 	bl	800a9ec <_read_r>
 800a914:	2800      	cmp	r0, #0
 800a916:	bfab      	itete	ge
 800a918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a91a:	89a3      	ldrhlt	r3, [r4, #12]
 800a91c:	181b      	addge	r3, r3, r0
 800a91e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a922:	bfac      	ite	ge
 800a924:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a926:	81a3      	strhlt	r3, [r4, #12]
 800a928:	bd10      	pop	{r4, pc}

0800a92a <__swrite>:
 800a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	461f      	mov	r7, r3
 800a930:	898b      	ldrh	r3, [r1, #12]
 800a932:	05db      	lsls	r3, r3, #23
 800a934:	4605      	mov	r5, r0
 800a936:	460c      	mov	r4, r1
 800a938:	4616      	mov	r6, r2
 800a93a:	d505      	bpl.n	800a948 <__swrite+0x1e>
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	2302      	movs	r3, #2
 800a942:	2200      	movs	r2, #0
 800a944:	f000 f840 	bl	800a9c8 <_lseek_r>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	4632      	mov	r2, r6
 800a956:	463b      	mov	r3, r7
 800a958:	4628      	mov	r0, r5
 800a95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	f000 b857 	b.w	800aa10 <_write_r>

0800a962 <__sseek>:
 800a962:	b510      	push	{r4, lr}
 800a964:	460c      	mov	r4, r1
 800a966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96a:	f000 f82d 	bl	800a9c8 <_lseek_r>
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	bf15      	itete	ne
 800a974:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a97a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a97e:	81a3      	strheq	r3, [r4, #12]
 800a980:	bf18      	it	ne
 800a982:	81a3      	strhne	r3, [r4, #12]
 800a984:	bd10      	pop	{r4, pc}

0800a986 <__sclose>:
 800a986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98a:	f000 b80d 	b.w	800a9a8 <_close_r>

0800a98e <memset>:
 800a98e:	4402      	add	r2, r0
 800a990:	4603      	mov	r3, r0
 800a992:	4293      	cmp	r3, r2
 800a994:	d100      	bne.n	800a998 <memset+0xa>
 800a996:	4770      	bx	lr
 800a998:	f803 1b01 	strb.w	r1, [r3], #1
 800a99c:	e7f9      	b.n	800a992 <memset+0x4>
	...

0800a9a0 <_localeconv_r>:
 800a9a0:	4800      	ldr	r0, [pc, #0]	@ (800a9a4 <_localeconv_r+0x4>)
 800a9a2:	4770      	bx	lr
 800a9a4:	2400015c 	.word	0x2400015c

0800a9a8 <_close_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d06      	ldr	r5, [pc, #24]	@ (800a9c4 <_close_r+0x1c>)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	f7f6 fd3c 	bl	8001430 <_close>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_close_r+0x1a>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_close_r+0x1a>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	240005c4 	.word	0x240005c4

0800a9c8 <_lseek_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d07      	ldr	r5, [pc, #28]	@ (800a9e8 <_lseek_r+0x20>)
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f7f6 fd51 	bl	800147e <_lseek>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_lseek_r+0x1e>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_lseek_r+0x1e>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	240005c4 	.word	0x240005c4

0800a9ec <_read_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d07      	ldr	r5, [pc, #28]	@ (800aa0c <_read_r+0x20>)
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	602a      	str	r2, [r5, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f7f6 fcfb 	bl	80013f6 <_read>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	d102      	bne.n	800aa0a <_read_r+0x1e>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	b103      	cbz	r3, 800aa0a <_read_r+0x1e>
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	240005c4 	.word	0x240005c4

0800aa10 <_write_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d07      	ldr	r5, [pc, #28]	@ (800aa30 <_write_r+0x20>)
 800aa14:	4604      	mov	r4, r0
 800aa16:	4608      	mov	r0, r1
 800aa18:	4611      	mov	r1, r2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	602a      	str	r2, [r5, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f7f6 ff4a 	bl	80018b8 <_write>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_write_r+0x1e>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_write_r+0x1e>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	240005c4 	.word	0x240005c4

0800aa34 <__errno>:
 800aa34:	4b01      	ldr	r3, [pc, #4]	@ (800aa3c <__errno+0x8>)
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	2400001c 	.word	0x2400001c

0800aa40 <__libc_init_array>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4d0d      	ldr	r5, [pc, #52]	@ (800aa78 <__libc_init_array+0x38>)
 800aa44:	4c0d      	ldr	r4, [pc, #52]	@ (800aa7c <__libc_init_array+0x3c>)
 800aa46:	1b64      	subs	r4, r4, r5
 800aa48:	10a4      	asrs	r4, r4, #2
 800aa4a:	2600      	movs	r6, #0
 800aa4c:	42a6      	cmp	r6, r4
 800aa4e:	d109      	bne.n	800aa64 <__libc_init_array+0x24>
 800aa50:	4d0b      	ldr	r5, [pc, #44]	@ (800aa80 <__libc_init_array+0x40>)
 800aa52:	4c0c      	ldr	r4, [pc, #48]	@ (800aa84 <__libc_init_array+0x44>)
 800aa54:	f003 fab6 	bl	800dfc4 <_init>
 800aa58:	1b64      	subs	r4, r4, r5
 800aa5a:	10a4      	asrs	r4, r4, #2
 800aa5c:	2600      	movs	r6, #0
 800aa5e:	42a6      	cmp	r6, r4
 800aa60:	d105      	bne.n	800aa6e <__libc_init_array+0x2e>
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa68:	4798      	blx	r3
 800aa6a:	3601      	adds	r6, #1
 800aa6c:	e7ee      	b.n	800aa4c <__libc_init_array+0xc>
 800aa6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa72:	4798      	blx	r3
 800aa74:	3601      	adds	r6, #1
 800aa76:	e7f2      	b.n	800aa5e <__libc_init_array+0x1e>
 800aa78:	0800e56c 	.word	0x0800e56c
 800aa7c:	0800e56c 	.word	0x0800e56c
 800aa80:	0800e56c 	.word	0x0800e56c
 800aa84:	0800e570 	.word	0x0800e570

0800aa88 <__retarget_lock_init_recursive>:
 800aa88:	4770      	bx	lr

0800aa8a <__retarget_lock_acquire_recursive>:
 800aa8a:	4770      	bx	lr

0800aa8c <__retarget_lock_release_recursive>:
 800aa8c:	4770      	bx	lr
	...

0800aa90 <nanf>:
 800aa90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aa98 <nanf+0x8>
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	7fc00000 	.word	0x7fc00000

0800aa9c <quorem>:
 800aa9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	6903      	ldr	r3, [r0, #16]
 800aaa2:	690c      	ldr	r4, [r1, #16]
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	db7e      	blt.n	800aba8 <quorem+0x10c>
 800aaaa:	3c01      	subs	r4, #1
 800aaac:	f101 0814 	add.w	r8, r1, #20
 800aab0:	00a3      	lsls	r3, r4, #2
 800aab2:	f100 0514 	add.w	r5, r0, #20
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac6:	3301      	adds	r3, #1
 800aac8:	429a      	cmp	r2, r3
 800aaca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aace:	fbb2 f6f3 	udiv	r6, r2, r3
 800aad2:	d32e      	bcc.n	800ab32 <quorem+0x96>
 800aad4:	f04f 0a00 	mov.w	sl, #0
 800aad8:	46c4      	mov	ip, r8
 800aada:	46ae      	mov	lr, r5
 800aadc:	46d3      	mov	fp, sl
 800aade:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aae2:	b298      	uxth	r0, r3
 800aae4:	fb06 a000 	mla	r0, r6, r0, sl
 800aae8:	0c02      	lsrs	r2, r0, #16
 800aaea:	0c1b      	lsrs	r3, r3, #16
 800aaec:	fb06 2303 	mla	r3, r6, r3, r2
 800aaf0:	f8de 2000 	ldr.w	r2, [lr]
 800aaf4:	b280      	uxth	r0, r0
 800aaf6:	b292      	uxth	r2, r2
 800aaf8:	1a12      	subs	r2, r2, r0
 800aafa:	445a      	add	r2, fp
 800aafc:	f8de 0000 	ldr.w	r0, [lr]
 800ab00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ab0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ab0e:	b292      	uxth	r2, r2
 800ab10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab14:	45e1      	cmp	r9, ip
 800ab16:	f84e 2b04 	str.w	r2, [lr], #4
 800ab1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ab1e:	d2de      	bcs.n	800aade <quorem+0x42>
 800ab20:	9b00      	ldr	r3, [sp, #0]
 800ab22:	58eb      	ldr	r3, [r5, r3]
 800ab24:	b92b      	cbnz	r3, 800ab32 <quorem+0x96>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	3b04      	subs	r3, #4
 800ab2a:	429d      	cmp	r5, r3
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	d32f      	bcc.n	800ab90 <quorem+0xf4>
 800ab30:	613c      	str	r4, [r7, #16]
 800ab32:	4638      	mov	r0, r7
 800ab34:	f001 f956 	bl	800bde4 <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	db25      	blt.n	800ab88 <quorem+0xec>
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	2000      	movs	r0, #0
 800ab40:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab44:	f8d1 c000 	ldr.w	ip, [r1]
 800ab48:	fa1f fe82 	uxth.w	lr, r2
 800ab4c:	fa1f f38c 	uxth.w	r3, ip
 800ab50:	eba3 030e 	sub.w	r3, r3, lr
 800ab54:	4403      	add	r3, r0
 800ab56:	0c12      	lsrs	r2, r2, #16
 800ab58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab66:	45c1      	cmp	r9, r8
 800ab68:	f841 3b04 	str.w	r3, [r1], #4
 800ab6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab70:	d2e6      	bcs.n	800ab40 <quorem+0xa4>
 800ab72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab7a:	b922      	cbnz	r2, 800ab86 <quorem+0xea>
 800ab7c:	3b04      	subs	r3, #4
 800ab7e:	429d      	cmp	r5, r3
 800ab80:	461a      	mov	r2, r3
 800ab82:	d30b      	bcc.n	800ab9c <quorem+0x100>
 800ab84:	613c      	str	r4, [r7, #16]
 800ab86:	3601      	adds	r6, #1
 800ab88:	4630      	mov	r0, r6
 800ab8a:	b003      	add	sp, #12
 800ab8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab90:	6812      	ldr	r2, [r2, #0]
 800ab92:	3b04      	subs	r3, #4
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	d1cb      	bne.n	800ab30 <quorem+0x94>
 800ab98:	3c01      	subs	r4, #1
 800ab9a:	e7c6      	b.n	800ab2a <quorem+0x8e>
 800ab9c:	6812      	ldr	r2, [r2, #0]
 800ab9e:	3b04      	subs	r3, #4
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	d1ef      	bne.n	800ab84 <quorem+0xe8>
 800aba4:	3c01      	subs	r4, #1
 800aba6:	e7ea      	b.n	800ab7e <quorem+0xe2>
 800aba8:	2000      	movs	r0, #0
 800abaa:	e7ee      	b.n	800ab8a <quorem+0xee>
 800abac:	0000      	movs	r0, r0
	...

0800abb0 <_dtoa_r>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	ed2d 8b02 	vpush	{d8}
 800abb8:	69c7      	ldr	r7, [r0, #28]
 800abba:	b091      	sub	sp, #68	@ 0x44
 800abbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800abc0:	ec55 4b10 	vmov	r4, r5, d0
 800abc4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800abc6:	9107      	str	r1, [sp, #28]
 800abc8:	4681      	mov	r9, r0
 800abca:	9209      	str	r2, [sp, #36]	@ 0x24
 800abcc:	930d      	str	r3, [sp, #52]	@ 0x34
 800abce:	b97f      	cbnz	r7, 800abf0 <_dtoa_r+0x40>
 800abd0:	2010      	movs	r0, #16
 800abd2:	f000 fd95 	bl	800b700 <malloc>
 800abd6:	4602      	mov	r2, r0
 800abd8:	f8c9 001c 	str.w	r0, [r9, #28]
 800abdc:	b920      	cbnz	r0, 800abe8 <_dtoa_r+0x38>
 800abde:	4ba0      	ldr	r3, [pc, #640]	@ (800ae60 <_dtoa_r+0x2b0>)
 800abe0:	21ef      	movs	r1, #239	@ 0xef
 800abe2:	48a0      	ldr	r0, [pc, #640]	@ (800ae64 <_dtoa_r+0x2b4>)
 800abe4:	f002 fb78 	bl	800d2d8 <__assert_func>
 800abe8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800abec:	6007      	str	r7, [r0, #0]
 800abee:	60c7      	str	r7, [r0, #12]
 800abf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abf4:	6819      	ldr	r1, [r3, #0]
 800abf6:	b159      	cbz	r1, 800ac10 <_dtoa_r+0x60>
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	604a      	str	r2, [r1, #4]
 800abfc:	2301      	movs	r3, #1
 800abfe:	4093      	lsls	r3, r2
 800ac00:	608b      	str	r3, [r1, #8]
 800ac02:	4648      	mov	r0, r9
 800ac04:	f000 fe72 	bl	800b8ec <_Bfree>
 800ac08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	1e2b      	subs	r3, r5, #0
 800ac12:	bfbb      	ittet	lt
 800ac14:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ac18:	9303      	strlt	r3, [sp, #12]
 800ac1a:	2300      	movge	r3, #0
 800ac1c:	2201      	movlt	r2, #1
 800ac1e:	bfac      	ite	ge
 800ac20:	6033      	strge	r3, [r6, #0]
 800ac22:	6032      	strlt	r2, [r6, #0]
 800ac24:	4b90      	ldr	r3, [pc, #576]	@ (800ae68 <_dtoa_r+0x2b8>)
 800ac26:	9e03      	ldr	r6, [sp, #12]
 800ac28:	43b3      	bics	r3, r6
 800ac2a:	d110      	bne.n	800ac4e <_dtoa_r+0x9e>
 800ac2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ac38:	4323      	orrs	r3, r4
 800ac3a:	f000 84e6 	beq.w	800b60a <_dtoa_r+0xa5a>
 800ac3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac40:	4f8a      	ldr	r7, [pc, #552]	@ (800ae6c <_dtoa_r+0x2bc>)
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 84e8 	beq.w	800b618 <_dtoa_r+0xa68>
 800ac48:	1cfb      	adds	r3, r7, #3
 800ac4a:	f000 bce3 	b.w	800b614 <_dtoa_r+0xa64>
 800ac4e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ac52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5a:	d10a      	bne.n	800ac72 <_dtoa_r+0xc2>
 800ac5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac5e:	2301      	movs	r3, #1
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac64:	b113      	cbz	r3, 800ac6c <_dtoa_r+0xbc>
 800ac66:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ac68:	4b81      	ldr	r3, [pc, #516]	@ (800ae70 <_dtoa_r+0x2c0>)
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	4f81      	ldr	r7, [pc, #516]	@ (800ae74 <_dtoa_r+0x2c4>)
 800ac6e:	f000 bcd3 	b.w	800b618 <_dtoa_r+0xa68>
 800ac72:	aa0e      	add	r2, sp, #56	@ 0x38
 800ac74:	a90f      	add	r1, sp, #60	@ 0x3c
 800ac76:	4648      	mov	r0, r9
 800ac78:	eeb0 0b48 	vmov.f64	d0, d8
 800ac7c:	f001 f9d2 	bl	800c024 <__d2b>
 800ac80:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ac84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac86:	9001      	str	r0, [sp, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d045      	beq.n	800ad18 <_dtoa_r+0x168>
 800ac8c:	eeb0 7b48 	vmov.f64	d7, d8
 800ac90:	ee18 1a90 	vmov	r1, s17
 800ac94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ac98:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ac9c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800aca0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800aca4:	2500      	movs	r5, #0
 800aca6:	ee07 1a90 	vmov	s15, r1
 800acaa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800acae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ae48 <_dtoa_r+0x298>
 800acb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800acb6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ae50 <_dtoa_r+0x2a0>
 800acba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800acbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ae58 <_dtoa_r+0x2a8>
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800acca:	eeb0 7b46 	vmov.f64	d7, d6
 800acce:	eea4 7b05 	vfma.f64	d7, d4, d5
 800acd2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800acd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800acda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acde:	ee16 8a90 	vmov	r8, s13
 800ace2:	d508      	bpl.n	800acf6 <_dtoa_r+0x146>
 800ace4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ace8:	eeb4 6b47 	vcmp.f64	d6, d7
 800acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf0:	bf18      	it	ne
 800acf2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800acf6:	f1b8 0f16 	cmp.w	r8, #22
 800acfa:	d82b      	bhi.n	800ad54 <_dtoa_r+0x1a4>
 800acfc:	495e      	ldr	r1, [pc, #376]	@ (800ae78 <_dtoa_r+0x2c8>)
 800acfe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ad02:	ed91 7b00 	vldr	d7, [r1]
 800ad06:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0e:	d501      	bpl.n	800ad14 <_dtoa_r+0x164>
 800ad10:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad14:	2100      	movs	r1, #0
 800ad16:	e01e      	b.n	800ad56 <_dtoa_r+0x1a6>
 800ad18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ad20:	2920      	cmp	r1, #32
 800ad22:	bfc1      	itttt	gt
 800ad24:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ad28:	408e      	lslgt	r6, r1
 800ad2a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ad2e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ad32:	bfd6      	itet	le
 800ad34:	f1c1 0120 	rsble	r1, r1, #32
 800ad38:	4331      	orrgt	r1, r6
 800ad3a:	fa04 f101 	lslle.w	r1, r4, r1
 800ad3e:	ee07 1a90 	vmov	s15, r1
 800ad42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad46:	3b01      	subs	r3, #1
 800ad48:	ee17 1a90 	vmov	r1, s15
 800ad4c:	2501      	movs	r5, #1
 800ad4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ad52:	e7a8      	b.n	800aca6 <_dtoa_r+0xf6>
 800ad54:	2101      	movs	r1, #1
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	1e53      	subs	r3, r2, #1
 800ad5a:	9306      	str	r3, [sp, #24]
 800ad5c:	bf45      	ittet	mi
 800ad5e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ad62:	9304      	strmi	r3, [sp, #16]
 800ad64:	2300      	movpl	r3, #0
 800ad66:	2300      	movmi	r3, #0
 800ad68:	bf4c      	ite	mi
 800ad6a:	9306      	strmi	r3, [sp, #24]
 800ad6c:	9304      	strpl	r3, [sp, #16]
 800ad6e:	f1b8 0f00 	cmp.w	r8, #0
 800ad72:	910c      	str	r1, [sp, #48]	@ 0x30
 800ad74:	db18      	blt.n	800ada8 <_dtoa_r+0x1f8>
 800ad76:	9b06      	ldr	r3, [sp, #24]
 800ad78:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ad7c:	4443      	add	r3, r8
 800ad7e:	9306      	str	r3, [sp, #24]
 800ad80:	2300      	movs	r3, #0
 800ad82:	9a07      	ldr	r2, [sp, #28]
 800ad84:	2a09      	cmp	r2, #9
 800ad86:	d845      	bhi.n	800ae14 <_dtoa_r+0x264>
 800ad88:	2a05      	cmp	r2, #5
 800ad8a:	bfc4      	itt	gt
 800ad8c:	3a04      	subgt	r2, #4
 800ad8e:	9207      	strgt	r2, [sp, #28]
 800ad90:	9a07      	ldr	r2, [sp, #28]
 800ad92:	f1a2 0202 	sub.w	r2, r2, #2
 800ad96:	bfcc      	ite	gt
 800ad98:	2400      	movgt	r4, #0
 800ad9a:	2401      	movle	r4, #1
 800ad9c:	2a03      	cmp	r2, #3
 800ad9e:	d844      	bhi.n	800ae2a <_dtoa_r+0x27a>
 800ada0:	e8df f002 	tbb	[pc, r2]
 800ada4:	0b173634 	.word	0x0b173634
 800ada8:	9b04      	ldr	r3, [sp, #16]
 800adaa:	2200      	movs	r2, #0
 800adac:	eba3 0308 	sub.w	r3, r3, r8
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	920a      	str	r2, [sp, #40]	@ 0x28
 800adb4:	f1c8 0300 	rsb	r3, r8, #0
 800adb8:	e7e3      	b.n	800ad82 <_dtoa_r+0x1d2>
 800adba:	2201      	movs	r2, #1
 800adbc:	9208      	str	r2, [sp, #32]
 800adbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc0:	eb08 0b02 	add.w	fp, r8, r2
 800adc4:	f10b 0a01 	add.w	sl, fp, #1
 800adc8:	4652      	mov	r2, sl
 800adca:	2a01      	cmp	r2, #1
 800adcc:	bfb8      	it	lt
 800adce:	2201      	movlt	r2, #1
 800add0:	e006      	b.n	800ade0 <_dtoa_r+0x230>
 800add2:	2201      	movs	r2, #1
 800add4:	9208      	str	r2, [sp, #32]
 800add6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800add8:	2a00      	cmp	r2, #0
 800adda:	dd29      	ble.n	800ae30 <_dtoa_r+0x280>
 800addc:	4693      	mov	fp, r2
 800adde:	4692      	mov	sl, r2
 800ade0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ade4:	2100      	movs	r1, #0
 800ade6:	2004      	movs	r0, #4
 800ade8:	f100 0614 	add.w	r6, r0, #20
 800adec:	4296      	cmp	r6, r2
 800adee:	d926      	bls.n	800ae3e <_dtoa_r+0x28e>
 800adf0:	6079      	str	r1, [r7, #4]
 800adf2:	4648      	mov	r0, r9
 800adf4:	9305      	str	r3, [sp, #20]
 800adf6:	f000 fd39 	bl	800b86c <_Balloc>
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	4607      	mov	r7, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d13e      	bne.n	800ae80 <_dtoa_r+0x2d0>
 800ae02:	4b1e      	ldr	r3, [pc, #120]	@ (800ae7c <_dtoa_r+0x2cc>)
 800ae04:	4602      	mov	r2, r0
 800ae06:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae0a:	e6ea      	b.n	800abe2 <_dtoa_r+0x32>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	e7e1      	b.n	800add4 <_dtoa_r+0x224>
 800ae10:	2200      	movs	r2, #0
 800ae12:	e7d3      	b.n	800adbc <_dtoa_r+0x20c>
 800ae14:	2401      	movs	r4, #1
 800ae16:	2200      	movs	r2, #0
 800ae18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ae1c:	f04f 3bff 	mov.w	fp, #4294967295
 800ae20:	2100      	movs	r1, #0
 800ae22:	46da      	mov	sl, fp
 800ae24:	2212      	movs	r2, #18
 800ae26:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae28:	e7da      	b.n	800ade0 <_dtoa_r+0x230>
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	9208      	str	r2, [sp, #32]
 800ae2e:	e7f5      	b.n	800ae1c <_dtoa_r+0x26c>
 800ae30:	f04f 0b01 	mov.w	fp, #1
 800ae34:	46da      	mov	sl, fp
 800ae36:	465a      	mov	r2, fp
 800ae38:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ae3c:	e7d0      	b.n	800ade0 <_dtoa_r+0x230>
 800ae3e:	3101      	adds	r1, #1
 800ae40:	0040      	lsls	r0, r0, #1
 800ae42:	e7d1      	b.n	800ade8 <_dtoa_r+0x238>
 800ae44:	f3af 8000 	nop.w
 800ae48:	636f4361 	.word	0x636f4361
 800ae4c:	3fd287a7 	.word	0x3fd287a7
 800ae50:	8b60c8b3 	.word	0x8b60c8b3
 800ae54:	3fc68a28 	.word	0x3fc68a28
 800ae58:	509f79fb 	.word	0x509f79fb
 800ae5c:	3fd34413 	.word	0x3fd34413
 800ae60:	0800e182 	.word	0x0800e182
 800ae64:	0800e199 	.word	0x0800e199
 800ae68:	7ff00000 	.word	0x7ff00000
 800ae6c:	0800e17e 	.word	0x0800e17e
 800ae70:	0800e14d 	.word	0x0800e14d
 800ae74:	0800e14c 	.word	0x0800e14c
 800ae78:	0800e348 	.word	0x0800e348
 800ae7c:	0800e1f1 	.word	0x0800e1f1
 800ae80:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ae84:	f1ba 0f0e 	cmp.w	sl, #14
 800ae88:	6010      	str	r0, [r2, #0]
 800ae8a:	d86e      	bhi.n	800af6a <_dtoa_r+0x3ba>
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	d06c      	beq.n	800af6a <_dtoa_r+0x3ba>
 800ae90:	f1b8 0f00 	cmp.w	r8, #0
 800ae94:	f340 80b4 	ble.w	800b000 <_dtoa_r+0x450>
 800ae98:	4ac8      	ldr	r2, [pc, #800]	@ (800b1bc <_dtoa_r+0x60c>)
 800ae9a:	f008 010f 	and.w	r1, r8, #15
 800ae9e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aea2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800aea6:	ed92 7b00 	vldr	d7, [r2]
 800aeaa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800aeae:	f000 809b 	beq.w	800afe8 <_dtoa_r+0x438>
 800aeb2:	4ac3      	ldr	r2, [pc, #780]	@ (800b1c0 <_dtoa_r+0x610>)
 800aeb4:	ed92 6b08 	vldr	d6, [r2, #32]
 800aeb8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800aebc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800aec0:	f001 010f 	and.w	r1, r1, #15
 800aec4:	2203      	movs	r2, #3
 800aec6:	48be      	ldr	r0, [pc, #760]	@ (800b1c0 <_dtoa_r+0x610>)
 800aec8:	2900      	cmp	r1, #0
 800aeca:	f040 808f 	bne.w	800afec <_dtoa_r+0x43c>
 800aece:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aed2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aed6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aeda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aedc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aee0:	2900      	cmp	r1, #0
 800aee2:	f000 80b3 	beq.w	800b04c <_dtoa_r+0x49c>
 800aee6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800aeea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef2:	f140 80ab 	bpl.w	800b04c <_dtoa_r+0x49c>
 800aef6:	f1ba 0f00 	cmp.w	sl, #0
 800aefa:	f000 80a7 	beq.w	800b04c <_dtoa_r+0x49c>
 800aefe:	f1bb 0f00 	cmp.w	fp, #0
 800af02:	dd30      	ble.n	800af66 <_dtoa_r+0x3b6>
 800af04:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800af08:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af10:	f108 31ff 	add.w	r1, r8, #4294967295
 800af14:	9105      	str	r1, [sp, #20]
 800af16:	3201      	adds	r2, #1
 800af18:	465c      	mov	r4, fp
 800af1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800af1e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800af22:	ee07 2a90 	vmov	s15, r2
 800af26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800af2e:	ee15 2a90 	vmov	r2, s11
 800af32:	ec51 0b15 	vmov	r0, r1, d5
 800af36:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800af3a:	2c00      	cmp	r4, #0
 800af3c:	f040 808a 	bne.w	800b054 <_dtoa_r+0x4a4>
 800af40:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800af44:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af48:	ec41 0b17 	vmov	d7, r0, r1
 800af4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af54:	f300 826a 	bgt.w	800b42c <_dtoa_r+0x87c>
 800af58:	eeb1 7b47 	vneg.f64	d7, d7
 800af5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af64:	d423      	bmi.n	800afae <_dtoa_r+0x3fe>
 800af66:	ed8d 8b02 	vstr	d8, [sp, #8]
 800af6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af6c:	2a00      	cmp	r2, #0
 800af6e:	f2c0 8129 	blt.w	800b1c4 <_dtoa_r+0x614>
 800af72:	f1b8 0f0e 	cmp.w	r8, #14
 800af76:	f300 8125 	bgt.w	800b1c4 <_dtoa_r+0x614>
 800af7a:	4b90      	ldr	r3, [pc, #576]	@ (800b1bc <_dtoa_r+0x60c>)
 800af7c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af80:	ed93 6b00 	vldr	d6, [r3]
 800af84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af86:	2b00      	cmp	r3, #0
 800af88:	f280 80c8 	bge.w	800b11c <_dtoa_r+0x56c>
 800af8c:	f1ba 0f00 	cmp.w	sl, #0
 800af90:	f300 80c4 	bgt.w	800b11c <_dtoa_r+0x56c>
 800af94:	d10b      	bne.n	800afae <_dtoa_r+0x3fe>
 800af96:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800af9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afa2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800afa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afaa:	f2c0 823c 	blt.w	800b426 <_dtoa_r+0x876>
 800afae:	2400      	movs	r4, #0
 800afb0:	4625      	mov	r5, r4
 800afb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb4:	43db      	mvns	r3, r3
 800afb6:	9305      	str	r3, [sp, #20]
 800afb8:	463e      	mov	r6, r7
 800afba:	f04f 0800 	mov.w	r8, #0
 800afbe:	4621      	mov	r1, r4
 800afc0:	4648      	mov	r0, r9
 800afc2:	f000 fc93 	bl	800b8ec <_Bfree>
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	f000 80a2 	beq.w	800b110 <_dtoa_r+0x560>
 800afcc:	f1b8 0f00 	cmp.w	r8, #0
 800afd0:	d005      	beq.n	800afde <_dtoa_r+0x42e>
 800afd2:	45a8      	cmp	r8, r5
 800afd4:	d003      	beq.n	800afde <_dtoa_r+0x42e>
 800afd6:	4641      	mov	r1, r8
 800afd8:	4648      	mov	r0, r9
 800afda:	f000 fc87 	bl	800b8ec <_Bfree>
 800afde:	4629      	mov	r1, r5
 800afe0:	4648      	mov	r0, r9
 800afe2:	f000 fc83 	bl	800b8ec <_Bfree>
 800afe6:	e093      	b.n	800b110 <_dtoa_r+0x560>
 800afe8:	2202      	movs	r2, #2
 800afea:	e76c      	b.n	800aec6 <_dtoa_r+0x316>
 800afec:	07cc      	lsls	r4, r1, #31
 800afee:	d504      	bpl.n	800affa <_dtoa_r+0x44a>
 800aff0:	ed90 6b00 	vldr	d6, [r0]
 800aff4:	3201      	adds	r2, #1
 800aff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800affa:	1049      	asrs	r1, r1, #1
 800affc:	3008      	adds	r0, #8
 800affe:	e763      	b.n	800aec8 <_dtoa_r+0x318>
 800b000:	d022      	beq.n	800b048 <_dtoa_r+0x498>
 800b002:	f1c8 0100 	rsb	r1, r8, #0
 800b006:	4a6d      	ldr	r2, [pc, #436]	@ (800b1bc <_dtoa_r+0x60c>)
 800b008:	f001 000f 	and.w	r0, r1, #15
 800b00c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b010:	ed92 7b00 	vldr	d7, [r2]
 800b014:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b018:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b01c:	4868      	ldr	r0, [pc, #416]	@ (800b1c0 <_dtoa_r+0x610>)
 800b01e:	1109      	asrs	r1, r1, #4
 800b020:	2400      	movs	r4, #0
 800b022:	2202      	movs	r2, #2
 800b024:	b929      	cbnz	r1, 800b032 <_dtoa_r+0x482>
 800b026:	2c00      	cmp	r4, #0
 800b028:	f43f af57 	beq.w	800aeda <_dtoa_r+0x32a>
 800b02c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b030:	e753      	b.n	800aeda <_dtoa_r+0x32a>
 800b032:	07ce      	lsls	r6, r1, #31
 800b034:	d505      	bpl.n	800b042 <_dtoa_r+0x492>
 800b036:	ed90 6b00 	vldr	d6, [r0]
 800b03a:	3201      	adds	r2, #1
 800b03c:	2401      	movs	r4, #1
 800b03e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b042:	1049      	asrs	r1, r1, #1
 800b044:	3008      	adds	r0, #8
 800b046:	e7ed      	b.n	800b024 <_dtoa_r+0x474>
 800b048:	2202      	movs	r2, #2
 800b04a:	e746      	b.n	800aeda <_dtoa_r+0x32a>
 800b04c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b050:	4654      	mov	r4, sl
 800b052:	e762      	b.n	800af1a <_dtoa_r+0x36a>
 800b054:	4a59      	ldr	r2, [pc, #356]	@ (800b1bc <_dtoa_r+0x60c>)
 800b056:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b05a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b05e:	9a08      	ldr	r2, [sp, #32]
 800b060:	ec41 0b17 	vmov	d7, r0, r1
 800b064:	443c      	add	r4, r7
 800b066:	b34a      	cbz	r2, 800b0bc <_dtoa_r+0x50c>
 800b068:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b06c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b070:	463e      	mov	r6, r7
 800b072:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b076:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b07a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b07e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b082:	ee14 2a90 	vmov	r2, s9
 800b086:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b08a:	3230      	adds	r2, #48	@ 0x30
 800b08c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b098:	f806 2b01 	strb.w	r2, [r6], #1
 800b09c:	d438      	bmi.n	800b110 <_dtoa_r+0x560>
 800b09e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b0a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0aa:	d46e      	bmi.n	800b18a <_dtoa_r+0x5da>
 800b0ac:	42a6      	cmp	r6, r4
 800b0ae:	f43f af5a 	beq.w	800af66 <_dtoa_r+0x3b6>
 800b0b2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b0b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b0ba:	e7e0      	b.n	800b07e <_dtoa_r+0x4ce>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	463e      	mov	r6, r7
 800b0c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b0c4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b0c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b0cc:	ee14 2a90 	vmov	r2, s9
 800b0d0:	3230      	adds	r2, #48	@ 0x30
 800b0d2:	f806 2b01 	strb.w	r2, [r6], #1
 800b0d6:	42a6      	cmp	r6, r4
 800b0d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b0dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b0e0:	d119      	bne.n	800b116 <_dtoa_r+0x566>
 800b0e2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b0e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b0ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f2:	dc4a      	bgt.n	800b18a <_dtoa_r+0x5da>
 800b0f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b0f8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b100:	f57f af31 	bpl.w	800af66 <_dtoa_r+0x3b6>
 800b104:	460e      	mov	r6, r1
 800b106:	3901      	subs	r1, #1
 800b108:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b10c:	2b30      	cmp	r3, #48	@ 0x30
 800b10e:	d0f9      	beq.n	800b104 <_dtoa_r+0x554>
 800b110:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b114:	e027      	b.n	800b166 <_dtoa_r+0x5b6>
 800b116:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b11a:	e7d5      	b.n	800b0c8 <_dtoa_r+0x518>
 800b11c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b120:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b124:	463e      	mov	r6, r7
 800b126:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b12a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b12e:	ee15 3a10 	vmov	r3, s10
 800b132:	3330      	adds	r3, #48	@ 0x30
 800b134:	f806 3b01 	strb.w	r3, [r6], #1
 800b138:	1bf3      	subs	r3, r6, r7
 800b13a:	459a      	cmp	sl, r3
 800b13c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b140:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b144:	d132      	bne.n	800b1ac <_dtoa_r+0x5fc>
 800b146:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b14a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b152:	dc18      	bgt.n	800b186 <_dtoa_r+0x5d6>
 800b154:	eeb4 7b46 	vcmp.f64	d7, d6
 800b158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15c:	d103      	bne.n	800b166 <_dtoa_r+0x5b6>
 800b15e:	ee15 3a10 	vmov	r3, s10
 800b162:	07db      	lsls	r3, r3, #31
 800b164:	d40f      	bmi.n	800b186 <_dtoa_r+0x5d6>
 800b166:	9901      	ldr	r1, [sp, #4]
 800b168:	4648      	mov	r0, r9
 800b16a:	f000 fbbf 	bl	800b8ec <_Bfree>
 800b16e:	2300      	movs	r3, #0
 800b170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b172:	7033      	strb	r3, [r6, #0]
 800b174:	f108 0301 	add.w	r3, r8, #1
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 824b 	beq.w	800b618 <_dtoa_r+0xa68>
 800b182:	601e      	str	r6, [r3, #0]
 800b184:	e248      	b.n	800b618 <_dtoa_r+0xa68>
 800b186:	f8cd 8014 	str.w	r8, [sp, #20]
 800b18a:	4633      	mov	r3, r6
 800b18c:	461e      	mov	r6, r3
 800b18e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b192:	2a39      	cmp	r2, #57	@ 0x39
 800b194:	d106      	bne.n	800b1a4 <_dtoa_r+0x5f4>
 800b196:	429f      	cmp	r7, r3
 800b198:	d1f8      	bne.n	800b18c <_dtoa_r+0x5dc>
 800b19a:	9a05      	ldr	r2, [sp, #20]
 800b19c:	3201      	adds	r2, #1
 800b19e:	9205      	str	r2, [sp, #20]
 800b1a0:	2230      	movs	r2, #48	@ 0x30
 800b1a2:	703a      	strb	r2, [r7, #0]
 800b1a4:	781a      	ldrb	r2, [r3, #0]
 800b1a6:	3201      	adds	r2, #1
 800b1a8:	701a      	strb	r2, [r3, #0]
 800b1aa:	e7b1      	b.n	800b110 <_dtoa_r+0x560>
 800b1ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b8:	d1b5      	bne.n	800b126 <_dtoa_r+0x576>
 800b1ba:	e7d4      	b.n	800b166 <_dtoa_r+0x5b6>
 800b1bc:	0800e348 	.word	0x0800e348
 800b1c0:	0800e320 	.word	0x0800e320
 800b1c4:	9908      	ldr	r1, [sp, #32]
 800b1c6:	2900      	cmp	r1, #0
 800b1c8:	f000 80e9 	beq.w	800b39e <_dtoa_r+0x7ee>
 800b1cc:	9907      	ldr	r1, [sp, #28]
 800b1ce:	2901      	cmp	r1, #1
 800b1d0:	f300 80cb 	bgt.w	800b36a <_dtoa_r+0x7ba>
 800b1d4:	2d00      	cmp	r5, #0
 800b1d6:	f000 80c4 	beq.w	800b362 <_dtoa_r+0x7b2>
 800b1da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b1de:	9e04      	ldr	r6, [sp, #16]
 800b1e0:	461c      	mov	r4, r3
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	9304      	str	r3, [sp, #16]
 800b1ea:	9b06      	ldr	r3, [sp, #24]
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	4648      	mov	r0, r9
 800b1f2:	9306      	str	r3, [sp, #24]
 800b1f4:	f000 fc78 	bl	800bae8 <__i2b>
 800b1f8:	9b05      	ldr	r3, [sp, #20]
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	b166      	cbz	r6, 800b218 <_dtoa_r+0x668>
 800b1fe:	9a06      	ldr	r2, [sp, #24]
 800b200:	2a00      	cmp	r2, #0
 800b202:	dd09      	ble.n	800b218 <_dtoa_r+0x668>
 800b204:	42b2      	cmp	r2, r6
 800b206:	9904      	ldr	r1, [sp, #16]
 800b208:	bfa8      	it	ge
 800b20a:	4632      	movge	r2, r6
 800b20c:	1a89      	subs	r1, r1, r2
 800b20e:	9104      	str	r1, [sp, #16]
 800b210:	9906      	ldr	r1, [sp, #24]
 800b212:	1ab6      	subs	r6, r6, r2
 800b214:	1a8a      	subs	r2, r1, r2
 800b216:	9206      	str	r2, [sp, #24]
 800b218:	b30b      	cbz	r3, 800b25e <_dtoa_r+0x6ae>
 800b21a:	9a08      	ldr	r2, [sp, #32]
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	f000 80c5 	beq.w	800b3ac <_dtoa_r+0x7fc>
 800b222:	2c00      	cmp	r4, #0
 800b224:	f000 80bf 	beq.w	800b3a6 <_dtoa_r+0x7f6>
 800b228:	4629      	mov	r1, r5
 800b22a:	4622      	mov	r2, r4
 800b22c:	4648      	mov	r0, r9
 800b22e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b230:	f000 fd12 	bl	800bc58 <__pow5mult>
 800b234:	9a01      	ldr	r2, [sp, #4]
 800b236:	4601      	mov	r1, r0
 800b238:	4605      	mov	r5, r0
 800b23a:	4648      	mov	r0, r9
 800b23c:	f000 fc6a 	bl	800bb14 <__multiply>
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	9005      	str	r0, [sp, #20]
 800b244:	4648      	mov	r0, r9
 800b246:	f000 fb51 	bl	800b8ec <_Bfree>
 800b24a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b24c:	1b1b      	subs	r3, r3, r4
 800b24e:	f000 80b0 	beq.w	800b3b2 <_dtoa_r+0x802>
 800b252:	9905      	ldr	r1, [sp, #20]
 800b254:	461a      	mov	r2, r3
 800b256:	4648      	mov	r0, r9
 800b258:	f000 fcfe 	bl	800bc58 <__pow5mult>
 800b25c:	9001      	str	r0, [sp, #4]
 800b25e:	2101      	movs	r1, #1
 800b260:	4648      	mov	r0, r9
 800b262:	f000 fc41 	bl	800bae8 <__i2b>
 800b266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b268:	4604      	mov	r4, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 81da 	beq.w	800b624 <_dtoa_r+0xa74>
 800b270:	461a      	mov	r2, r3
 800b272:	4601      	mov	r1, r0
 800b274:	4648      	mov	r0, r9
 800b276:	f000 fcef 	bl	800bc58 <__pow5mult>
 800b27a:	9b07      	ldr	r3, [sp, #28]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	4604      	mov	r4, r0
 800b280:	f300 80a0 	bgt.w	800b3c4 <_dtoa_r+0x814>
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f040 8096 	bne.w	800b3b8 <_dtoa_r+0x808>
 800b28c:	9b03      	ldr	r3, [sp, #12]
 800b28e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b292:	2a00      	cmp	r2, #0
 800b294:	f040 8092 	bne.w	800b3bc <_dtoa_r+0x80c>
 800b298:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b29c:	0d12      	lsrs	r2, r2, #20
 800b29e:	0512      	lsls	r2, r2, #20
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	f000 808d 	beq.w	800b3c0 <_dtoa_r+0x810>
 800b2a6:	9b04      	ldr	r3, [sp, #16]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	9306      	str	r3, [sp, #24]
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 81b9 	beq.w	800b630 <_dtoa_r+0xa80>
 800b2be:	6922      	ldr	r2, [r4, #16]
 800b2c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b2c4:	6910      	ldr	r0, [r2, #16]
 800b2c6:	f000 fbc3 	bl	800ba50 <__hi0bits>
 800b2ca:	f1c0 0020 	rsb	r0, r0, #32
 800b2ce:	9b06      	ldr	r3, [sp, #24]
 800b2d0:	4418      	add	r0, r3
 800b2d2:	f010 001f 	ands.w	r0, r0, #31
 800b2d6:	f000 8081 	beq.w	800b3dc <_dtoa_r+0x82c>
 800b2da:	f1c0 0220 	rsb	r2, r0, #32
 800b2de:	2a04      	cmp	r2, #4
 800b2e0:	dd73      	ble.n	800b3ca <_dtoa_r+0x81a>
 800b2e2:	9b04      	ldr	r3, [sp, #16]
 800b2e4:	f1c0 001c 	rsb	r0, r0, #28
 800b2e8:	4403      	add	r3, r0
 800b2ea:	9304      	str	r3, [sp, #16]
 800b2ec:	9b06      	ldr	r3, [sp, #24]
 800b2ee:	4406      	add	r6, r0
 800b2f0:	4403      	add	r3, r0
 800b2f2:	9306      	str	r3, [sp, #24]
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dd05      	ble.n	800b306 <_dtoa_r+0x756>
 800b2fa:	9901      	ldr	r1, [sp, #4]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4648      	mov	r0, r9
 800b300:	f000 fd04 	bl	800bd0c <__lshift>
 800b304:	9001      	str	r0, [sp, #4]
 800b306:	9b06      	ldr	r3, [sp, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dd05      	ble.n	800b318 <_dtoa_r+0x768>
 800b30c:	4621      	mov	r1, r4
 800b30e:	461a      	mov	r2, r3
 800b310:	4648      	mov	r0, r9
 800b312:	f000 fcfb 	bl	800bd0c <__lshift>
 800b316:	4604      	mov	r4, r0
 800b318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d060      	beq.n	800b3e0 <_dtoa_r+0x830>
 800b31e:	9801      	ldr	r0, [sp, #4]
 800b320:	4621      	mov	r1, r4
 800b322:	f000 fd5f 	bl	800bde4 <__mcmp>
 800b326:	2800      	cmp	r0, #0
 800b328:	da5a      	bge.n	800b3e0 <_dtoa_r+0x830>
 800b32a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b32e:	9305      	str	r3, [sp, #20]
 800b330:	9901      	ldr	r1, [sp, #4]
 800b332:	2300      	movs	r3, #0
 800b334:	220a      	movs	r2, #10
 800b336:	4648      	mov	r0, r9
 800b338:	f000 fafa 	bl	800b930 <__multadd>
 800b33c:	9b08      	ldr	r3, [sp, #32]
 800b33e:	9001      	str	r0, [sp, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8177 	beq.w	800b634 <_dtoa_r+0xa84>
 800b346:	4629      	mov	r1, r5
 800b348:	2300      	movs	r3, #0
 800b34a:	220a      	movs	r2, #10
 800b34c:	4648      	mov	r0, r9
 800b34e:	f000 faef 	bl	800b930 <__multadd>
 800b352:	f1bb 0f00 	cmp.w	fp, #0
 800b356:	4605      	mov	r5, r0
 800b358:	dc6e      	bgt.n	800b438 <_dtoa_r+0x888>
 800b35a:	9b07      	ldr	r3, [sp, #28]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	dc48      	bgt.n	800b3f2 <_dtoa_r+0x842>
 800b360:	e06a      	b.n	800b438 <_dtoa_r+0x888>
 800b362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b364:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b368:	e739      	b.n	800b1de <_dtoa_r+0x62e>
 800b36a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b36e:	42a3      	cmp	r3, r4
 800b370:	db07      	blt.n	800b382 <_dtoa_r+0x7d2>
 800b372:	f1ba 0f00 	cmp.w	sl, #0
 800b376:	eba3 0404 	sub.w	r4, r3, r4
 800b37a:	db0b      	blt.n	800b394 <_dtoa_r+0x7e4>
 800b37c:	9e04      	ldr	r6, [sp, #16]
 800b37e:	4652      	mov	r2, sl
 800b380:	e72f      	b.n	800b1e2 <_dtoa_r+0x632>
 800b382:	1ae2      	subs	r2, r4, r3
 800b384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b386:	9e04      	ldr	r6, [sp, #16]
 800b388:	4413      	add	r3, r2
 800b38a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b38c:	4652      	mov	r2, sl
 800b38e:	4623      	mov	r3, r4
 800b390:	2400      	movs	r4, #0
 800b392:	e726      	b.n	800b1e2 <_dtoa_r+0x632>
 800b394:	9a04      	ldr	r2, [sp, #16]
 800b396:	eba2 060a 	sub.w	r6, r2, sl
 800b39a:	2200      	movs	r2, #0
 800b39c:	e721      	b.n	800b1e2 <_dtoa_r+0x632>
 800b39e:	9e04      	ldr	r6, [sp, #16]
 800b3a0:	9d08      	ldr	r5, [sp, #32]
 800b3a2:	461c      	mov	r4, r3
 800b3a4:	e72a      	b.n	800b1fc <_dtoa_r+0x64c>
 800b3a6:	9a01      	ldr	r2, [sp, #4]
 800b3a8:	9205      	str	r2, [sp, #20]
 800b3aa:	e752      	b.n	800b252 <_dtoa_r+0x6a2>
 800b3ac:	9901      	ldr	r1, [sp, #4]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	e751      	b.n	800b256 <_dtoa_r+0x6a6>
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	e752      	b.n	800b25e <_dtoa_r+0x6ae>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e77b      	b.n	800b2b4 <_dtoa_r+0x704>
 800b3bc:	9b02      	ldr	r3, [sp, #8]
 800b3be:	e779      	b.n	800b2b4 <_dtoa_r+0x704>
 800b3c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b3c2:	e778      	b.n	800b2b6 <_dtoa_r+0x706>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3c8:	e779      	b.n	800b2be <_dtoa_r+0x70e>
 800b3ca:	d093      	beq.n	800b2f4 <_dtoa_r+0x744>
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	321c      	adds	r2, #28
 800b3d0:	4413      	add	r3, r2
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	9b06      	ldr	r3, [sp, #24]
 800b3d6:	4416      	add	r6, r2
 800b3d8:	4413      	add	r3, r2
 800b3da:	e78a      	b.n	800b2f2 <_dtoa_r+0x742>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	e7f5      	b.n	800b3cc <_dtoa_r+0x81c>
 800b3e0:	f1ba 0f00 	cmp.w	sl, #0
 800b3e4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b3e8:	46d3      	mov	fp, sl
 800b3ea:	dc21      	bgt.n	800b430 <_dtoa_r+0x880>
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	dd1e      	ble.n	800b430 <_dtoa_r+0x880>
 800b3f2:	f1bb 0f00 	cmp.w	fp, #0
 800b3f6:	f47f addc 	bne.w	800afb2 <_dtoa_r+0x402>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	2205      	movs	r2, #5
 800b400:	4648      	mov	r0, r9
 800b402:	f000 fa95 	bl	800b930 <__multadd>
 800b406:	4601      	mov	r1, r0
 800b408:	4604      	mov	r4, r0
 800b40a:	9801      	ldr	r0, [sp, #4]
 800b40c:	f000 fcea 	bl	800bde4 <__mcmp>
 800b410:	2800      	cmp	r0, #0
 800b412:	f77f adce 	ble.w	800afb2 <_dtoa_r+0x402>
 800b416:	463e      	mov	r6, r7
 800b418:	2331      	movs	r3, #49	@ 0x31
 800b41a:	f806 3b01 	strb.w	r3, [r6], #1
 800b41e:	9b05      	ldr	r3, [sp, #20]
 800b420:	3301      	adds	r3, #1
 800b422:	9305      	str	r3, [sp, #20]
 800b424:	e5c9      	b.n	800afba <_dtoa_r+0x40a>
 800b426:	f8cd 8014 	str.w	r8, [sp, #20]
 800b42a:	4654      	mov	r4, sl
 800b42c:	4625      	mov	r5, r4
 800b42e:	e7f2      	b.n	800b416 <_dtoa_r+0x866>
 800b430:	9b08      	ldr	r3, [sp, #32]
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 8102 	beq.w	800b63c <_dtoa_r+0xa8c>
 800b438:	2e00      	cmp	r6, #0
 800b43a:	dd05      	ble.n	800b448 <_dtoa_r+0x898>
 800b43c:	4629      	mov	r1, r5
 800b43e:	4632      	mov	r2, r6
 800b440:	4648      	mov	r0, r9
 800b442:	f000 fc63 	bl	800bd0c <__lshift>
 800b446:	4605      	mov	r5, r0
 800b448:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d058      	beq.n	800b500 <_dtoa_r+0x950>
 800b44e:	6869      	ldr	r1, [r5, #4]
 800b450:	4648      	mov	r0, r9
 800b452:	f000 fa0b 	bl	800b86c <_Balloc>
 800b456:	4606      	mov	r6, r0
 800b458:	b928      	cbnz	r0, 800b466 <_dtoa_r+0x8b6>
 800b45a:	4b82      	ldr	r3, [pc, #520]	@ (800b664 <_dtoa_r+0xab4>)
 800b45c:	4602      	mov	r2, r0
 800b45e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b462:	f7ff bbbe 	b.w	800abe2 <_dtoa_r+0x32>
 800b466:	692a      	ldr	r2, [r5, #16]
 800b468:	3202      	adds	r2, #2
 800b46a:	0092      	lsls	r2, r2, #2
 800b46c:	f105 010c 	add.w	r1, r5, #12
 800b470:	300c      	adds	r0, #12
 800b472:	f001 ff19 	bl	800d2a8 <memcpy>
 800b476:	2201      	movs	r2, #1
 800b478:	4631      	mov	r1, r6
 800b47a:	4648      	mov	r0, r9
 800b47c:	f000 fc46 	bl	800bd0c <__lshift>
 800b480:	1c7b      	adds	r3, r7, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	eb07 030b 	add.w	r3, r7, fp
 800b488:	9309      	str	r3, [sp, #36]	@ 0x24
 800b48a:	9b02      	ldr	r3, [sp, #8]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	46a8      	mov	r8, r5
 800b492:	9308      	str	r3, [sp, #32]
 800b494:	4605      	mov	r5, r0
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	9801      	ldr	r0, [sp, #4]
 800b49a:	4621      	mov	r1, r4
 800b49c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4a0:	f7ff fafc 	bl	800aa9c <quorem>
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	9002      	str	r0, [sp, #8]
 800b4a8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b4ac:	9801      	ldr	r0, [sp, #4]
 800b4ae:	f000 fc99 	bl	800bde4 <__mcmp>
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	9006      	str	r0, [sp, #24]
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	4648      	mov	r0, r9
 800b4ba:	f000 fcaf 	bl	800be1c <__mdiff>
 800b4be:	68c2      	ldr	r2, [r0, #12]
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	b9fa      	cbnz	r2, 800b504 <_dtoa_r+0x954>
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	9801      	ldr	r0, [sp, #4]
 800b4c8:	f000 fc8c 	bl	800bde4 <__mcmp>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4648      	mov	r0, r9
 800b4d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b4d4:	f000 fa0a 	bl	800b8ec <_Bfree>
 800b4d8:	9b07      	ldr	r3, [sp, #28]
 800b4da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4dc:	9e04      	ldr	r6, [sp, #16]
 800b4de:	ea42 0103 	orr.w	r1, r2, r3
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	4319      	orrs	r1, r3
 800b4e6:	d10f      	bne.n	800b508 <_dtoa_r+0x958>
 800b4e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b4ec:	d028      	beq.n	800b540 <_dtoa_r+0x990>
 800b4ee:	9b06      	ldr	r3, [sp, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dd02      	ble.n	800b4fa <_dtoa_r+0x94a>
 800b4f4:	9b02      	ldr	r3, [sp, #8]
 800b4f6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b4fa:	f88b a000 	strb.w	sl, [fp]
 800b4fe:	e55e      	b.n	800afbe <_dtoa_r+0x40e>
 800b500:	4628      	mov	r0, r5
 800b502:	e7bd      	b.n	800b480 <_dtoa_r+0x8d0>
 800b504:	2201      	movs	r2, #1
 800b506:	e7e2      	b.n	800b4ce <_dtoa_r+0x91e>
 800b508:	9b06      	ldr	r3, [sp, #24]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	db04      	blt.n	800b518 <_dtoa_r+0x968>
 800b50e:	9907      	ldr	r1, [sp, #28]
 800b510:	430b      	orrs	r3, r1
 800b512:	9908      	ldr	r1, [sp, #32]
 800b514:	430b      	orrs	r3, r1
 800b516:	d120      	bne.n	800b55a <_dtoa_r+0x9aa>
 800b518:	2a00      	cmp	r2, #0
 800b51a:	ddee      	ble.n	800b4fa <_dtoa_r+0x94a>
 800b51c:	9901      	ldr	r1, [sp, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	4648      	mov	r0, r9
 800b522:	f000 fbf3 	bl	800bd0c <__lshift>
 800b526:	4621      	mov	r1, r4
 800b528:	9001      	str	r0, [sp, #4]
 800b52a:	f000 fc5b 	bl	800bde4 <__mcmp>
 800b52e:	2800      	cmp	r0, #0
 800b530:	dc03      	bgt.n	800b53a <_dtoa_r+0x98a>
 800b532:	d1e2      	bne.n	800b4fa <_dtoa_r+0x94a>
 800b534:	f01a 0f01 	tst.w	sl, #1
 800b538:	d0df      	beq.n	800b4fa <_dtoa_r+0x94a>
 800b53a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b53e:	d1d9      	bne.n	800b4f4 <_dtoa_r+0x944>
 800b540:	2339      	movs	r3, #57	@ 0x39
 800b542:	f88b 3000 	strb.w	r3, [fp]
 800b546:	4633      	mov	r3, r6
 800b548:	461e      	mov	r6, r3
 800b54a:	3b01      	subs	r3, #1
 800b54c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b550:	2a39      	cmp	r2, #57	@ 0x39
 800b552:	d052      	beq.n	800b5fa <_dtoa_r+0xa4a>
 800b554:	3201      	adds	r2, #1
 800b556:	701a      	strb	r2, [r3, #0]
 800b558:	e531      	b.n	800afbe <_dtoa_r+0x40e>
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	dd07      	ble.n	800b56e <_dtoa_r+0x9be>
 800b55e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b562:	d0ed      	beq.n	800b540 <_dtoa_r+0x990>
 800b564:	f10a 0301 	add.w	r3, sl, #1
 800b568:	f88b 3000 	strb.w	r3, [fp]
 800b56c:	e527      	b.n	800afbe <_dtoa_r+0x40e>
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b572:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b576:	4293      	cmp	r3, r2
 800b578:	d029      	beq.n	800b5ce <_dtoa_r+0xa1e>
 800b57a:	9901      	ldr	r1, [sp, #4]
 800b57c:	2300      	movs	r3, #0
 800b57e:	220a      	movs	r2, #10
 800b580:	4648      	mov	r0, r9
 800b582:	f000 f9d5 	bl	800b930 <__multadd>
 800b586:	45a8      	cmp	r8, r5
 800b588:	9001      	str	r0, [sp, #4]
 800b58a:	f04f 0300 	mov.w	r3, #0
 800b58e:	f04f 020a 	mov.w	r2, #10
 800b592:	4641      	mov	r1, r8
 800b594:	4648      	mov	r0, r9
 800b596:	d107      	bne.n	800b5a8 <_dtoa_r+0x9f8>
 800b598:	f000 f9ca 	bl	800b930 <__multadd>
 800b59c:	4680      	mov	r8, r0
 800b59e:	4605      	mov	r5, r0
 800b5a0:	9b04      	ldr	r3, [sp, #16]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	e776      	b.n	800b496 <_dtoa_r+0x8e6>
 800b5a8:	f000 f9c2 	bl	800b930 <__multadd>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	220a      	movs	r2, #10
 800b5b4:	4648      	mov	r0, r9
 800b5b6:	f000 f9bb 	bl	800b930 <__multadd>
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	e7f0      	b.n	800b5a0 <_dtoa_r+0x9f0>
 800b5be:	f1bb 0f00 	cmp.w	fp, #0
 800b5c2:	bfcc      	ite	gt
 800b5c4:	465e      	movgt	r6, fp
 800b5c6:	2601      	movle	r6, #1
 800b5c8:	443e      	add	r6, r7
 800b5ca:	f04f 0800 	mov.w	r8, #0
 800b5ce:	9901      	ldr	r1, [sp, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	4648      	mov	r0, r9
 800b5d4:	f000 fb9a 	bl	800bd0c <__lshift>
 800b5d8:	4621      	mov	r1, r4
 800b5da:	9001      	str	r0, [sp, #4]
 800b5dc:	f000 fc02 	bl	800bde4 <__mcmp>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	dcb0      	bgt.n	800b546 <_dtoa_r+0x996>
 800b5e4:	d102      	bne.n	800b5ec <_dtoa_r+0xa3c>
 800b5e6:	f01a 0f01 	tst.w	sl, #1
 800b5ea:	d1ac      	bne.n	800b546 <_dtoa_r+0x996>
 800b5ec:	4633      	mov	r3, r6
 800b5ee:	461e      	mov	r6, r3
 800b5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f4:	2a30      	cmp	r2, #48	@ 0x30
 800b5f6:	d0fa      	beq.n	800b5ee <_dtoa_r+0xa3e>
 800b5f8:	e4e1      	b.n	800afbe <_dtoa_r+0x40e>
 800b5fa:	429f      	cmp	r7, r3
 800b5fc:	d1a4      	bne.n	800b548 <_dtoa_r+0x998>
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	3301      	adds	r3, #1
 800b602:	9305      	str	r3, [sp, #20]
 800b604:	2331      	movs	r3, #49	@ 0x31
 800b606:	703b      	strb	r3, [r7, #0]
 800b608:	e4d9      	b.n	800afbe <_dtoa_r+0x40e>
 800b60a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b60c:	4f16      	ldr	r7, [pc, #88]	@ (800b668 <_dtoa_r+0xab8>)
 800b60e:	b11b      	cbz	r3, 800b618 <_dtoa_r+0xa68>
 800b610:	f107 0308 	add.w	r3, r7, #8
 800b614:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	4638      	mov	r0, r7
 800b61a:	b011      	add	sp, #68	@ 0x44
 800b61c:	ecbd 8b02 	vpop	{d8}
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	9b07      	ldr	r3, [sp, #28]
 800b626:	2b01      	cmp	r3, #1
 800b628:	f77f ae2c 	ble.w	800b284 <_dtoa_r+0x6d4>
 800b62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b62e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b630:	2001      	movs	r0, #1
 800b632:	e64c      	b.n	800b2ce <_dtoa_r+0x71e>
 800b634:	f1bb 0f00 	cmp.w	fp, #0
 800b638:	f77f aed8 	ble.w	800b3ec <_dtoa_r+0x83c>
 800b63c:	463e      	mov	r6, r7
 800b63e:	9801      	ldr	r0, [sp, #4]
 800b640:	4621      	mov	r1, r4
 800b642:	f7ff fa2b 	bl	800aa9c <quorem>
 800b646:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b64a:	f806 ab01 	strb.w	sl, [r6], #1
 800b64e:	1bf2      	subs	r2, r6, r7
 800b650:	4593      	cmp	fp, r2
 800b652:	ddb4      	ble.n	800b5be <_dtoa_r+0xa0e>
 800b654:	9901      	ldr	r1, [sp, #4]
 800b656:	2300      	movs	r3, #0
 800b658:	220a      	movs	r2, #10
 800b65a:	4648      	mov	r0, r9
 800b65c:	f000 f968 	bl	800b930 <__multadd>
 800b660:	9001      	str	r0, [sp, #4]
 800b662:	e7ec      	b.n	800b63e <_dtoa_r+0xa8e>
 800b664:	0800e1f1 	.word	0x0800e1f1
 800b668:	0800e175 	.word	0x0800e175

0800b66c <_free_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4605      	mov	r5, r0
 800b670:	2900      	cmp	r1, #0
 800b672:	d041      	beq.n	800b6f8 <_free_r+0x8c>
 800b674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b678:	1f0c      	subs	r4, r1, #4
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	bfb8      	it	lt
 800b67e:	18e4      	addlt	r4, r4, r3
 800b680:	f000 f8e8 	bl	800b854 <__malloc_lock>
 800b684:	4a1d      	ldr	r2, [pc, #116]	@ (800b6fc <_free_r+0x90>)
 800b686:	6813      	ldr	r3, [r2, #0]
 800b688:	b933      	cbnz	r3, 800b698 <_free_r+0x2c>
 800b68a:	6063      	str	r3, [r4, #4]
 800b68c:	6014      	str	r4, [r2, #0]
 800b68e:	4628      	mov	r0, r5
 800b690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b694:	f000 b8e4 	b.w	800b860 <__malloc_unlock>
 800b698:	42a3      	cmp	r3, r4
 800b69a:	d908      	bls.n	800b6ae <_free_r+0x42>
 800b69c:	6820      	ldr	r0, [r4, #0]
 800b69e:	1821      	adds	r1, r4, r0
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf01      	itttt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	1809      	addeq	r1, r1, r0
 800b6aa:	6021      	streq	r1, [r4, #0]
 800b6ac:	e7ed      	b.n	800b68a <_free_r+0x1e>
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	b10b      	cbz	r3, 800b6b8 <_free_r+0x4c>
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	d9fa      	bls.n	800b6ae <_free_r+0x42>
 800b6b8:	6811      	ldr	r1, [r2, #0]
 800b6ba:	1850      	adds	r0, r2, r1
 800b6bc:	42a0      	cmp	r0, r4
 800b6be:	d10b      	bne.n	800b6d8 <_free_r+0x6c>
 800b6c0:	6820      	ldr	r0, [r4, #0]
 800b6c2:	4401      	add	r1, r0
 800b6c4:	1850      	adds	r0, r2, r1
 800b6c6:	4283      	cmp	r3, r0
 800b6c8:	6011      	str	r1, [r2, #0]
 800b6ca:	d1e0      	bne.n	800b68e <_free_r+0x22>
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	6053      	str	r3, [r2, #4]
 800b6d2:	4408      	add	r0, r1
 800b6d4:	6010      	str	r0, [r2, #0]
 800b6d6:	e7da      	b.n	800b68e <_free_r+0x22>
 800b6d8:	d902      	bls.n	800b6e0 <_free_r+0x74>
 800b6da:	230c      	movs	r3, #12
 800b6dc:	602b      	str	r3, [r5, #0]
 800b6de:	e7d6      	b.n	800b68e <_free_r+0x22>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	1821      	adds	r1, r4, r0
 800b6e4:	428b      	cmp	r3, r1
 800b6e6:	bf04      	itt	eq
 800b6e8:	6819      	ldreq	r1, [r3, #0]
 800b6ea:	685b      	ldreq	r3, [r3, #4]
 800b6ec:	6063      	str	r3, [r4, #4]
 800b6ee:	bf04      	itt	eq
 800b6f0:	1809      	addeq	r1, r1, r0
 800b6f2:	6021      	streq	r1, [r4, #0]
 800b6f4:	6054      	str	r4, [r2, #4]
 800b6f6:	e7ca      	b.n	800b68e <_free_r+0x22>
 800b6f8:	bd38      	pop	{r3, r4, r5, pc}
 800b6fa:	bf00      	nop
 800b6fc:	240005d0 	.word	0x240005d0

0800b700 <malloc>:
 800b700:	4b02      	ldr	r3, [pc, #8]	@ (800b70c <malloc+0xc>)
 800b702:	4601      	mov	r1, r0
 800b704:	6818      	ldr	r0, [r3, #0]
 800b706:	f000 b825 	b.w	800b754 <_malloc_r>
 800b70a:	bf00      	nop
 800b70c:	2400001c 	.word	0x2400001c

0800b710 <sbrk_aligned>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	4e0f      	ldr	r6, [pc, #60]	@ (800b750 <sbrk_aligned+0x40>)
 800b714:	460c      	mov	r4, r1
 800b716:	6831      	ldr	r1, [r6, #0]
 800b718:	4605      	mov	r5, r0
 800b71a:	b911      	cbnz	r1, 800b722 <sbrk_aligned+0x12>
 800b71c:	f001 fdb4 	bl	800d288 <_sbrk_r>
 800b720:	6030      	str	r0, [r6, #0]
 800b722:	4621      	mov	r1, r4
 800b724:	4628      	mov	r0, r5
 800b726:	f001 fdaf 	bl	800d288 <_sbrk_r>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	d103      	bne.n	800b736 <sbrk_aligned+0x26>
 800b72e:	f04f 34ff 	mov.w	r4, #4294967295
 800b732:	4620      	mov	r0, r4
 800b734:	bd70      	pop	{r4, r5, r6, pc}
 800b736:	1cc4      	adds	r4, r0, #3
 800b738:	f024 0403 	bic.w	r4, r4, #3
 800b73c:	42a0      	cmp	r0, r4
 800b73e:	d0f8      	beq.n	800b732 <sbrk_aligned+0x22>
 800b740:	1a21      	subs	r1, r4, r0
 800b742:	4628      	mov	r0, r5
 800b744:	f001 fda0 	bl	800d288 <_sbrk_r>
 800b748:	3001      	adds	r0, #1
 800b74a:	d1f2      	bne.n	800b732 <sbrk_aligned+0x22>
 800b74c:	e7ef      	b.n	800b72e <sbrk_aligned+0x1e>
 800b74e:	bf00      	nop
 800b750:	240005cc 	.word	0x240005cc

0800b754 <_malloc_r>:
 800b754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b758:	1ccd      	adds	r5, r1, #3
 800b75a:	f025 0503 	bic.w	r5, r5, #3
 800b75e:	3508      	adds	r5, #8
 800b760:	2d0c      	cmp	r5, #12
 800b762:	bf38      	it	cc
 800b764:	250c      	movcc	r5, #12
 800b766:	2d00      	cmp	r5, #0
 800b768:	4606      	mov	r6, r0
 800b76a:	db01      	blt.n	800b770 <_malloc_r+0x1c>
 800b76c:	42a9      	cmp	r1, r5
 800b76e:	d904      	bls.n	800b77a <_malloc_r+0x26>
 800b770:	230c      	movs	r3, #12
 800b772:	6033      	str	r3, [r6, #0]
 800b774:	2000      	movs	r0, #0
 800b776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b850 <_malloc_r+0xfc>
 800b77e:	f000 f869 	bl	800b854 <__malloc_lock>
 800b782:	f8d8 3000 	ldr.w	r3, [r8]
 800b786:	461c      	mov	r4, r3
 800b788:	bb44      	cbnz	r4, 800b7dc <_malloc_r+0x88>
 800b78a:	4629      	mov	r1, r5
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7ff ffbf 	bl	800b710 <sbrk_aligned>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	4604      	mov	r4, r0
 800b796:	d158      	bne.n	800b84a <_malloc_r+0xf6>
 800b798:	f8d8 4000 	ldr.w	r4, [r8]
 800b79c:	4627      	mov	r7, r4
 800b79e:	2f00      	cmp	r7, #0
 800b7a0:	d143      	bne.n	800b82a <_malloc_r+0xd6>
 800b7a2:	2c00      	cmp	r4, #0
 800b7a4:	d04b      	beq.n	800b83e <_malloc_r+0xea>
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	eb04 0903 	add.w	r9, r4, r3
 800b7b0:	f001 fd6a 	bl	800d288 <_sbrk_r>
 800b7b4:	4581      	cmp	r9, r0
 800b7b6:	d142      	bne.n	800b83e <_malloc_r+0xea>
 800b7b8:	6821      	ldr	r1, [r4, #0]
 800b7ba:	1a6d      	subs	r5, r5, r1
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff ffa6 	bl	800b710 <sbrk_aligned>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d03a      	beq.n	800b83e <_malloc_r+0xea>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	442b      	add	r3, r5
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	bb62      	cbnz	r2, 800b830 <_malloc_r+0xdc>
 800b7d6:	f8c8 7000 	str.w	r7, [r8]
 800b7da:	e00f      	b.n	800b7fc <_malloc_r+0xa8>
 800b7dc:	6822      	ldr	r2, [r4, #0]
 800b7de:	1b52      	subs	r2, r2, r5
 800b7e0:	d420      	bmi.n	800b824 <_malloc_r+0xd0>
 800b7e2:	2a0b      	cmp	r2, #11
 800b7e4:	d917      	bls.n	800b816 <_malloc_r+0xc2>
 800b7e6:	1961      	adds	r1, r4, r5
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	6025      	str	r5, [r4, #0]
 800b7ec:	bf18      	it	ne
 800b7ee:	6059      	strne	r1, [r3, #4]
 800b7f0:	6863      	ldr	r3, [r4, #4]
 800b7f2:	bf08      	it	eq
 800b7f4:	f8c8 1000 	streq.w	r1, [r8]
 800b7f8:	5162      	str	r2, [r4, r5]
 800b7fa:	604b      	str	r3, [r1, #4]
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f000 f82f 	bl	800b860 <__malloc_unlock>
 800b802:	f104 000b 	add.w	r0, r4, #11
 800b806:	1d23      	adds	r3, r4, #4
 800b808:	f020 0007 	bic.w	r0, r0, #7
 800b80c:	1ac2      	subs	r2, r0, r3
 800b80e:	bf1c      	itt	ne
 800b810:	1a1b      	subne	r3, r3, r0
 800b812:	50a3      	strne	r3, [r4, r2]
 800b814:	e7af      	b.n	800b776 <_malloc_r+0x22>
 800b816:	6862      	ldr	r2, [r4, #4]
 800b818:	42a3      	cmp	r3, r4
 800b81a:	bf0c      	ite	eq
 800b81c:	f8c8 2000 	streq.w	r2, [r8]
 800b820:	605a      	strne	r2, [r3, #4]
 800b822:	e7eb      	b.n	800b7fc <_malloc_r+0xa8>
 800b824:	4623      	mov	r3, r4
 800b826:	6864      	ldr	r4, [r4, #4]
 800b828:	e7ae      	b.n	800b788 <_malloc_r+0x34>
 800b82a:	463c      	mov	r4, r7
 800b82c:	687f      	ldr	r7, [r7, #4]
 800b82e:	e7b6      	b.n	800b79e <_malloc_r+0x4a>
 800b830:	461a      	mov	r2, r3
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	42a3      	cmp	r3, r4
 800b836:	d1fb      	bne.n	800b830 <_malloc_r+0xdc>
 800b838:	2300      	movs	r3, #0
 800b83a:	6053      	str	r3, [r2, #4]
 800b83c:	e7de      	b.n	800b7fc <_malloc_r+0xa8>
 800b83e:	230c      	movs	r3, #12
 800b840:	6033      	str	r3, [r6, #0]
 800b842:	4630      	mov	r0, r6
 800b844:	f000 f80c 	bl	800b860 <__malloc_unlock>
 800b848:	e794      	b.n	800b774 <_malloc_r+0x20>
 800b84a:	6005      	str	r5, [r0, #0]
 800b84c:	e7d6      	b.n	800b7fc <_malloc_r+0xa8>
 800b84e:	bf00      	nop
 800b850:	240005d0 	.word	0x240005d0

0800b854 <__malloc_lock>:
 800b854:	4801      	ldr	r0, [pc, #4]	@ (800b85c <__malloc_lock+0x8>)
 800b856:	f7ff b918 	b.w	800aa8a <__retarget_lock_acquire_recursive>
 800b85a:	bf00      	nop
 800b85c:	240005c8 	.word	0x240005c8

0800b860 <__malloc_unlock>:
 800b860:	4801      	ldr	r0, [pc, #4]	@ (800b868 <__malloc_unlock+0x8>)
 800b862:	f7ff b913 	b.w	800aa8c <__retarget_lock_release_recursive>
 800b866:	bf00      	nop
 800b868:	240005c8 	.word	0x240005c8

0800b86c <_Balloc>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	69c6      	ldr	r6, [r0, #28]
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	b976      	cbnz	r6, 800b894 <_Balloc+0x28>
 800b876:	2010      	movs	r0, #16
 800b878:	f7ff ff42 	bl	800b700 <malloc>
 800b87c:	4602      	mov	r2, r0
 800b87e:	61e0      	str	r0, [r4, #28]
 800b880:	b920      	cbnz	r0, 800b88c <_Balloc+0x20>
 800b882:	4b18      	ldr	r3, [pc, #96]	@ (800b8e4 <_Balloc+0x78>)
 800b884:	4818      	ldr	r0, [pc, #96]	@ (800b8e8 <_Balloc+0x7c>)
 800b886:	216b      	movs	r1, #107	@ 0x6b
 800b888:	f001 fd26 	bl	800d2d8 <__assert_func>
 800b88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b890:	6006      	str	r6, [r0, #0]
 800b892:	60c6      	str	r6, [r0, #12]
 800b894:	69e6      	ldr	r6, [r4, #28]
 800b896:	68f3      	ldr	r3, [r6, #12]
 800b898:	b183      	cbz	r3, 800b8bc <_Balloc+0x50>
 800b89a:	69e3      	ldr	r3, [r4, #28]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8a2:	b9b8      	cbnz	r0, 800b8d4 <_Balloc+0x68>
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b8aa:	1d72      	adds	r2, r6, #5
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f001 fd30 	bl	800d314 <_calloc_r>
 800b8b4:	b160      	cbz	r0, 800b8d0 <_Balloc+0x64>
 800b8b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ba:	e00e      	b.n	800b8da <_Balloc+0x6e>
 800b8bc:	2221      	movs	r2, #33	@ 0x21
 800b8be:	2104      	movs	r1, #4
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f001 fd27 	bl	800d314 <_calloc_r>
 800b8c6:	69e3      	ldr	r3, [r4, #28]
 800b8c8:	60f0      	str	r0, [r6, #12]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e4      	bne.n	800b89a <_Balloc+0x2e>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	6802      	ldr	r2, [r0, #0]
 800b8d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8e0:	e7f7      	b.n	800b8d2 <_Balloc+0x66>
 800b8e2:	bf00      	nop
 800b8e4:	0800e182 	.word	0x0800e182
 800b8e8:	0800e202 	.word	0x0800e202

0800b8ec <_Bfree>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	69c6      	ldr	r6, [r0, #28]
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	b976      	cbnz	r6, 800b914 <_Bfree+0x28>
 800b8f6:	2010      	movs	r0, #16
 800b8f8:	f7ff ff02 	bl	800b700 <malloc>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	61e8      	str	r0, [r5, #28]
 800b900:	b920      	cbnz	r0, 800b90c <_Bfree+0x20>
 800b902:	4b09      	ldr	r3, [pc, #36]	@ (800b928 <_Bfree+0x3c>)
 800b904:	4809      	ldr	r0, [pc, #36]	@ (800b92c <_Bfree+0x40>)
 800b906:	218f      	movs	r1, #143	@ 0x8f
 800b908:	f001 fce6 	bl	800d2d8 <__assert_func>
 800b90c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b910:	6006      	str	r6, [r0, #0]
 800b912:	60c6      	str	r6, [r0, #12]
 800b914:	b13c      	cbz	r4, 800b926 <_Bfree+0x3a>
 800b916:	69eb      	ldr	r3, [r5, #28]
 800b918:	6862      	ldr	r2, [r4, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b920:	6021      	str	r1, [r4, #0]
 800b922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	0800e182 	.word	0x0800e182
 800b92c:	0800e202 	.word	0x0800e202

0800b930 <__multadd>:
 800b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b934:	690d      	ldr	r5, [r1, #16]
 800b936:	4607      	mov	r7, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	461e      	mov	r6, r3
 800b93c:	f101 0c14 	add.w	ip, r1, #20
 800b940:	2000      	movs	r0, #0
 800b942:	f8dc 3000 	ldr.w	r3, [ip]
 800b946:	b299      	uxth	r1, r3
 800b948:	fb02 6101 	mla	r1, r2, r1, r6
 800b94c:	0c1e      	lsrs	r6, r3, #16
 800b94e:	0c0b      	lsrs	r3, r1, #16
 800b950:	fb02 3306 	mla	r3, r2, r6, r3
 800b954:	b289      	uxth	r1, r1
 800b956:	3001      	adds	r0, #1
 800b958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b95c:	4285      	cmp	r5, r0
 800b95e:	f84c 1b04 	str.w	r1, [ip], #4
 800b962:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b966:	dcec      	bgt.n	800b942 <__multadd+0x12>
 800b968:	b30e      	cbz	r6, 800b9ae <__multadd+0x7e>
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	42ab      	cmp	r3, r5
 800b96e:	dc19      	bgt.n	800b9a4 <__multadd+0x74>
 800b970:	6861      	ldr	r1, [r4, #4]
 800b972:	4638      	mov	r0, r7
 800b974:	3101      	adds	r1, #1
 800b976:	f7ff ff79 	bl	800b86c <_Balloc>
 800b97a:	4680      	mov	r8, r0
 800b97c:	b928      	cbnz	r0, 800b98a <__multadd+0x5a>
 800b97e:	4602      	mov	r2, r0
 800b980:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b4 <__multadd+0x84>)
 800b982:	480d      	ldr	r0, [pc, #52]	@ (800b9b8 <__multadd+0x88>)
 800b984:	21ba      	movs	r1, #186	@ 0xba
 800b986:	f001 fca7 	bl	800d2d8 <__assert_func>
 800b98a:	6922      	ldr	r2, [r4, #16]
 800b98c:	3202      	adds	r2, #2
 800b98e:	f104 010c 	add.w	r1, r4, #12
 800b992:	0092      	lsls	r2, r2, #2
 800b994:	300c      	adds	r0, #12
 800b996:	f001 fc87 	bl	800d2a8 <memcpy>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7ff ffa5 	bl	800b8ec <_Bfree>
 800b9a2:	4644      	mov	r4, r8
 800b9a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	615e      	str	r6, [r3, #20]
 800b9ac:	6125      	str	r5, [r4, #16]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b4:	0800e1f1 	.word	0x0800e1f1
 800b9b8:	0800e202 	.word	0x0800e202

0800b9bc <__s2b>:
 800b9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	4615      	mov	r5, r2
 800b9c4:	461f      	mov	r7, r3
 800b9c6:	2209      	movs	r2, #9
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	db09      	blt.n	800b9ec <__s2b+0x30>
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff ff47 	bl	800b86c <_Balloc>
 800b9de:	b940      	cbnz	r0, 800b9f2 <__s2b+0x36>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	4b19      	ldr	r3, [pc, #100]	@ (800ba48 <__s2b+0x8c>)
 800b9e4:	4819      	ldr	r0, [pc, #100]	@ (800ba4c <__s2b+0x90>)
 800b9e6:	21d3      	movs	r1, #211	@ 0xd3
 800b9e8:	f001 fc76 	bl	800d2d8 <__assert_func>
 800b9ec:	0052      	lsls	r2, r2, #1
 800b9ee:	3101      	adds	r1, #1
 800b9f0:	e7f0      	b.n	800b9d4 <__s2b+0x18>
 800b9f2:	9b08      	ldr	r3, [sp, #32]
 800b9f4:	6143      	str	r3, [r0, #20]
 800b9f6:	2d09      	cmp	r5, #9
 800b9f8:	f04f 0301 	mov.w	r3, #1
 800b9fc:	6103      	str	r3, [r0, #16]
 800b9fe:	dd16      	ble.n	800ba2e <__s2b+0x72>
 800ba00:	f104 0909 	add.w	r9, r4, #9
 800ba04:	46c8      	mov	r8, r9
 800ba06:	442c      	add	r4, r5
 800ba08:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba0c:	4601      	mov	r1, r0
 800ba0e:	3b30      	subs	r3, #48	@ 0x30
 800ba10:	220a      	movs	r2, #10
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ff8c 	bl	800b930 <__multadd>
 800ba18:	45a0      	cmp	r8, r4
 800ba1a:	d1f5      	bne.n	800ba08 <__s2b+0x4c>
 800ba1c:	f1a5 0408 	sub.w	r4, r5, #8
 800ba20:	444c      	add	r4, r9
 800ba22:	1b2d      	subs	r5, r5, r4
 800ba24:	1963      	adds	r3, r4, r5
 800ba26:	42bb      	cmp	r3, r7
 800ba28:	db04      	blt.n	800ba34 <__s2b+0x78>
 800ba2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2e:	340a      	adds	r4, #10
 800ba30:	2509      	movs	r5, #9
 800ba32:	e7f6      	b.n	800ba22 <__s2b+0x66>
 800ba34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba38:	4601      	mov	r1, r0
 800ba3a:	3b30      	subs	r3, #48	@ 0x30
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f7ff ff76 	bl	800b930 <__multadd>
 800ba44:	e7ee      	b.n	800ba24 <__s2b+0x68>
 800ba46:	bf00      	nop
 800ba48:	0800e1f1 	.word	0x0800e1f1
 800ba4c:	0800e202 	.word	0x0800e202

0800ba50 <__hi0bits>:
 800ba50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba54:	4603      	mov	r3, r0
 800ba56:	bf36      	itet	cc
 800ba58:	0403      	lslcc	r3, r0, #16
 800ba5a:	2000      	movcs	r0, #0
 800ba5c:	2010      	movcc	r0, #16
 800ba5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba62:	bf3c      	itt	cc
 800ba64:	021b      	lslcc	r3, r3, #8
 800ba66:	3008      	addcc	r0, #8
 800ba68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba6c:	bf3c      	itt	cc
 800ba6e:	011b      	lslcc	r3, r3, #4
 800ba70:	3004      	addcc	r0, #4
 800ba72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba76:	bf3c      	itt	cc
 800ba78:	009b      	lslcc	r3, r3, #2
 800ba7a:	3002      	addcc	r0, #2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	db05      	blt.n	800ba8c <__hi0bits+0x3c>
 800ba80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba84:	f100 0001 	add.w	r0, r0, #1
 800ba88:	bf08      	it	eq
 800ba8a:	2020      	moveq	r0, #32
 800ba8c:	4770      	bx	lr

0800ba8e <__lo0bits>:
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	4602      	mov	r2, r0
 800ba92:	f013 0007 	ands.w	r0, r3, #7
 800ba96:	d00b      	beq.n	800bab0 <__lo0bits+0x22>
 800ba98:	07d9      	lsls	r1, r3, #31
 800ba9a:	d421      	bmi.n	800bae0 <__lo0bits+0x52>
 800ba9c:	0798      	lsls	r0, r3, #30
 800ba9e:	bf49      	itett	mi
 800baa0:	085b      	lsrmi	r3, r3, #1
 800baa2:	089b      	lsrpl	r3, r3, #2
 800baa4:	2001      	movmi	r0, #1
 800baa6:	6013      	strmi	r3, [r2, #0]
 800baa8:	bf5c      	itt	pl
 800baaa:	6013      	strpl	r3, [r2, #0]
 800baac:	2002      	movpl	r0, #2
 800baae:	4770      	bx	lr
 800bab0:	b299      	uxth	r1, r3
 800bab2:	b909      	cbnz	r1, 800bab8 <__lo0bits+0x2a>
 800bab4:	0c1b      	lsrs	r3, r3, #16
 800bab6:	2010      	movs	r0, #16
 800bab8:	b2d9      	uxtb	r1, r3
 800baba:	b909      	cbnz	r1, 800bac0 <__lo0bits+0x32>
 800babc:	3008      	adds	r0, #8
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	0719      	lsls	r1, r3, #28
 800bac2:	bf04      	itt	eq
 800bac4:	091b      	lsreq	r3, r3, #4
 800bac6:	3004      	addeq	r0, #4
 800bac8:	0799      	lsls	r1, r3, #30
 800baca:	bf04      	itt	eq
 800bacc:	089b      	lsreq	r3, r3, #2
 800bace:	3002      	addeq	r0, #2
 800bad0:	07d9      	lsls	r1, r3, #31
 800bad2:	d403      	bmi.n	800badc <__lo0bits+0x4e>
 800bad4:	085b      	lsrs	r3, r3, #1
 800bad6:	f100 0001 	add.w	r0, r0, #1
 800bada:	d003      	beq.n	800bae4 <__lo0bits+0x56>
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	4770      	bx	lr
 800bae0:	2000      	movs	r0, #0
 800bae2:	4770      	bx	lr
 800bae4:	2020      	movs	r0, #32
 800bae6:	4770      	bx	lr

0800bae8 <__i2b>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	460c      	mov	r4, r1
 800baec:	2101      	movs	r1, #1
 800baee:	f7ff febd 	bl	800b86c <_Balloc>
 800baf2:	4602      	mov	r2, r0
 800baf4:	b928      	cbnz	r0, 800bb02 <__i2b+0x1a>
 800baf6:	4b05      	ldr	r3, [pc, #20]	@ (800bb0c <__i2b+0x24>)
 800baf8:	4805      	ldr	r0, [pc, #20]	@ (800bb10 <__i2b+0x28>)
 800bafa:	f240 1145 	movw	r1, #325	@ 0x145
 800bafe:	f001 fbeb 	bl	800d2d8 <__assert_func>
 800bb02:	2301      	movs	r3, #1
 800bb04:	6144      	str	r4, [r0, #20]
 800bb06:	6103      	str	r3, [r0, #16]
 800bb08:	bd10      	pop	{r4, pc}
 800bb0a:	bf00      	nop
 800bb0c:	0800e1f1 	.word	0x0800e1f1
 800bb10:	0800e202 	.word	0x0800e202

0800bb14 <__multiply>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	4617      	mov	r7, r2
 800bb1a:	690a      	ldr	r2, [r1, #16]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	bfa8      	it	ge
 800bb22:	463b      	movge	r3, r7
 800bb24:	4689      	mov	r9, r1
 800bb26:	bfa4      	itt	ge
 800bb28:	460f      	movge	r7, r1
 800bb2a:	4699      	movge	r9, r3
 800bb2c:	693d      	ldr	r5, [r7, #16]
 800bb2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	eb05 060a 	add.w	r6, r5, sl
 800bb3a:	42b3      	cmp	r3, r6
 800bb3c:	b085      	sub	sp, #20
 800bb3e:	bfb8      	it	lt
 800bb40:	3101      	addlt	r1, #1
 800bb42:	f7ff fe93 	bl	800b86c <_Balloc>
 800bb46:	b930      	cbnz	r0, 800bb56 <__multiply+0x42>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	4b41      	ldr	r3, [pc, #260]	@ (800bc50 <__multiply+0x13c>)
 800bb4c:	4841      	ldr	r0, [pc, #260]	@ (800bc54 <__multiply+0x140>)
 800bb4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb52:	f001 fbc1 	bl	800d2d8 <__assert_func>
 800bb56:	f100 0414 	add.w	r4, r0, #20
 800bb5a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bb5e:	4623      	mov	r3, r4
 800bb60:	2200      	movs	r2, #0
 800bb62:	4573      	cmp	r3, lr
 800bb64:	d320      	bcc.n	800bba8 <__multiply+0x94>
 800bb66:	f107 0814 	add.w	r8, r7, #20
 800bb6a:	f109 0114 	add.w	r1, r9, #20
 800bb6e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb72:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	1beb      	subs	r3, r5, r7
 800bb7a:	3b15      	subs	r3, #21
 800bb7c:	f023 0303 	bic.w	r3, r3, #3
 800bb80:	3304      	adds	r3, #4
 800bb82:	3715      	adds	r7, #21
 800bb84:	42bd      	cmp	r5, r7
 800bb86:	bf38      	it	cc
 800bb88:	2304      	movcc	r3, #4
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	9b02      	ldr	r3, [sp, #8]
 800bb8e:	9103      	str	r1, [sp, #12]
 800bb90:	428b      	cmp	r3, r1
 800bb92:	d80c      	bhi.n	800bbae <__multiply+0x9a>
 800bb94:	2e00      	cmp	r6, #0
 800bb96:	dd03      	ble.n	800bba0 <__multiply+0x8c>
 800bb98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d055      	beq.n	800bc4c <__multiply+0x138>
 800bba0:	6106      	str	r6, [r0, #16]
 800bba2:	b005      	add	sp, #20
 800bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba8:	f843 2b04 	str.w	r2, [r3], #4
 800bbac:	e7d9      	b.n	800bb62 <__multiply+0x4e>
 800bbae:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbb2:	f1ba 0f00 	cmp.w	sl, #0
 800bbb6:	d01f      	beq.n	800bbf8 <__multiply+0xe4>
 800bbb8:	46c4      	mov	ip, r8
 800bbba:	46a1      	mov	r9, r4
 800bbbc:	2700      	movs	r7, #0
 800bbbe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbc2:	f8d9 3000 	ldr.w	r3, [r9]
 800bbc6:	fa1f fb82 	uxth.w	fp, r2
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbd0:	443b      	add	r3, r7
 800bbd2:	f8d9 7000 	ldr.w	r7, [r9]
 800bbd6:	0c12      	lsrs	r2, r2, #16
 800bbd8:	0c3f      	lsrs	r7, r7, #16
 800bbda:	fb0a 7202 	mla	r2, sl, r2, r7
 800bbde:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbe8:	4565      	cmp	r5, ip
 800bbea:	f849 3b04 	str.w	r3, [r9], #4
 800bbee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bbf2:	d8e4      	bhi.n	800bbbe <__multiply+0xaa>
 800bbf4:	9b01      	ldr	r3, [sp, #4]
 800bbf6:	50e7      	str	r7, [r4, r3]
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbfe:	3104      	adds	r1, #4
 800bc00:	f1b9 0f00 	cmp.w	r9, #0
 800bc04:	d020      	beq.n	800bc48 <__multiply+0x134>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	4647      	mov	r7, r8
 800bc0a:	46a4      	mov	ip, r4
 800bc0c:	f04f 0a00 	mov.w	sl, #0
 800bc10:	f8b7 b000 	ldrh.w	fp, [r7]
 800bc14:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bc18:	fb09 220b 	mla	r2, r9, fp, r2
 800bc1c:	4452      	add	r2, sl
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc24:	f84c 3b04 	str.w	r3, [ip], #4
 800bc28:	f857 3b04 	ldr.w	r3, [r7], #4
 800bc2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc30:	f8bc 3000 	ldrh.w	r3, [ip]
 800bc34:	fb09 330a 	mla	r3, r9, sl, r3
 800bc38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bc3c:	42bd      	cmp	r5, r7
 800bc3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc42:	d8e5      	bhi.n	800bc10 <__multiply+0xfc>
 800bc44:	9a01      	ldr	r2, [sp, #4]
 800bc46:	50a3      	str	r3, [r4, r2]
 800bc48:	3404      	adds	r4, #4
 800bc4a:	e79f      	b.n	800bb8c <__multiply+0x78>
 800bc4c:	3e01      	subs	r6, #1
 800bc4e:	e7a1      	b.n	800bb94 <__multiply+0x80>
 800bc50:	0800e1f1 	.word	0x0800e1f1
 800bc54:	0800e202 	.word	0x0800e202

0800bc58 <__pow5mult>:
 800bc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	4615      	mov	r5, r2
 800bc5e:	f012 0203 	ands.w	r2, r2, #3
 800bc62:	4607      	mov	r7, r0
 800bc64:	460e      	mov	r6, r1
 800bc66:	d007      	beq.n	800bc78 <__pow5mult+0x20>
 800bc68:	4c25      	ldr	r4, [pc, #148]	@ (800bd00 <__pow5mult+0xa8>)
 800bc6a:	3a01      	subs	r2, #1
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc72:	f7ff fe5d 	bl	800b930 <__multadd>
 800bc76:	4606      	mov	r6, r0
 800bc78:	10ad      	asrs	r5, r5, #2
 800bc7a:	d03d      	beq.n	800bcf8 <__pow5mult+0xa0>
 800bc7c:	69fc      	ldr	r4, [r7, #28]
 800bc7e:	b97c      	cbnz	r4, 800bca0 <__pow5mult+0x48>
 800bc80:	2010      	movs	r0, #16
 800bc82:	f7ff fd3d 	bl	800b700 <malloc>
 800bc86:	4602      	mov	r2, r0
 800bc88:	61f8      	str	r0, [r7, #28]
 800bc8a:	b928      	cbnz	r0, 800bc98 <__pow5mult+0x40>
 800bc8c:	4b1d      	ldr	r3, [pc, #116]	@ (800bd04 <__pow5mult+0xac>)
 800bc8e:	481e      	ldr	r0, [pc, #120]	@ (800bd08 <__pow5mult+0xb0>)
 800bc90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc94:	f001 fb20 	bl	800d2d8 <__assert_func>
 800bc98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc9c:	6004      	str	r4, [r0, #0]
 800bc9e:	60c4      	str	r4, [r0, #12]
 800bca0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bca8:	b94c      	cbnz	r4, 800bcbe <__pow5mult+0x66>
 800bcaa:	f240 2171 	movw	r1, #625	@ 0x271
 800bcae:	4638      	mov	r0, r7
 800bcb0:	f7ff ff1a 	bl	800bae8 <__i2b>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcba:	4604      	mov	r4, r0
 800bcbc:	6003      	str	r3, [r0, #0]
 800bcbe:	f04f 0900 	mov.w	r9, #0
 800bcc2:	07eb      	lsls	r3, r5, #31
 800bcc4:	d50a      	bpl.n	800bcdc <__pow5mult+0x84>
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4638      	mov	r0, r7
 800bccc:	f7ff ff22 	bl	800bb14 <__multiply>
 800bcd0:	4631      	mov	r1, r6
 800bcd2:	4680      	mov	r8, r0
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	f7ff fe09 	bl	800b8ec <_Bfree>
 800bcda:	4646      	mov	r6, r8
 800bcdc:	106d      	asrs	r5, r5, #1
 800bcde:	d00b      	beq.n	800bcf8 <__pow5mult+0xa0>
 800bce0:	6820      	ldr	r0, [r4, #0]
 800bce2:	b938      	cbnz	r0, 800bcf4 <__pow5mult+0x9c>
 800bce4:	4622      	mov	r2, r4
 800bce6:	4621      	mov	r1, r4
 800bce8:	4638      	mov	r0, r7
 800bcea:	f7ff ff13 	bl	800bb14 <__multiply>
 800bcee:	6020      	str	r0, [r4, #0]
 800bcf0:	f8c0 9000 	str.w	r9, [r0]
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	e7e4      	b.n	800bcc2 <__pow5mult+0x6a>
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfe:	bf00      	nop
 800bd00:	0800e314 	.word	0x0800e314
 800bd04:	0800e182 	.word	0x0800e182
 800bd08:	0800e202 	.word	0x0800e202

0800bd0c <__lshift>:
 800bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd10:	460c      	mov	r4, r1
 800bd12:	6849      	ldr	r1, [r1, #4]
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd1a:	68a3      	ldr	r3, [r4, #8]
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	4691      	mov	r9, r2
 800bd20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd24:	f108 0601 	add.w	r6, r8, #1
 800bd28:	42b3      	cmp	r3, r6
 800bd2a:	db0b      	blt.n	800bd44 <__lshift+0x38>
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f7ff fd9d 	bl	800b86c <_Balloc>
 800bd32:	4605      	mov	r5, r0
 800bd34:	b948      	cbnz	r0, 800bd4a <__lshift+0x3e>
 800bd36:	4602      	mov	r2, r0
 800bd38:	4b28      	ldr	r3, [pc, #160]	@ (800bddc <__lshift+0xd0>)
 800bd3a:	4829      	ldr	r0, [pc, #164]	@ (800bde0 <__lshift+0xd4>)
 800bd3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd40:	f001 faca 	bl	800d2d8 <__assert_func>
 800bd44:	3101      	adds	r1, #1
 800bd46:	005b      	lsls	r3, r3, #1
 800bd48:	e7ee      	b.n	800bd28 <__lshift+0x1c>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f100 0114 	add.w	r1, r0, #20
 800bd50:	f100 0210 	add.w	r2, r0, #16
 800bd54:	4618      	mov	r0, r3
 800bd56:	4553      	cmp	r3, sl
 800bd58:	db33      	blt.n	800bdc2 <__lshift+0xb6>
 800bd5a:	6920      	ldr	r0, [r4, #16]
 800bd5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd60:	f104 0314 	add.w	r3, r4, #20
 800bd64:	f019 091f 	ands.w	r9, r9, #31
 800bd68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd70:	d02b      	beq.n	800bdca <__lshift+0xbe>
 800bd72:	f1c9 0e20 	rsb	lr, r9, #32
 800bd76:	468a      	mov	sl, r1
 800bd78:	2200      	movs	r2, #0
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd80:	4310      	orrs	r0, r2
 800bd82:	f84a 0b04 	str.w	r0, [sl], #4
 800bd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8a:	459c      	cmp	ip, r3
 800bd8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd90:	d8f3      	bhi.n	800bd7a <__lshift+0x6e>
 800bd92:	ebac 0304 	sub.w	r3, ip, r4
 800bd96:	3b15      	subs	r3, #21
 800bd98:	f023 0303 	bic.w	r3, r3, #3
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	f104 0015 	add.w	r0, r4, #21
 800bda2:	4560      	cmp	r0, ip
 800bda4:	bf88      	it	hi
 800bda6:	2304      	movhi	r3, #4
 800bda8:	50ca      	str	r2, [r1, r3]
 800bdaa:	b10a      	cbz	r2, 800bdb0 <__lshift+0xa4>
 800bdac:	f108 0602 	add.w	r6, r8, #2
 800bdb0:	3e01      	subs	r6, #1
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	612e      	str	r6, [r5, #16]
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	f7ff fd98 	bl	800b8ec <_Bfree>
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	e7c5      	b.n	800bd56 <__lshift+0x4a>
 800bdca:	3904      	subs	r1, #4
 800bdcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdd4:	459c      	cmp	ip, r3
 800bdd6:	d8f9      	bhi.n	800bdcc <__lshift+0xc0>
 800bdd8:	e7ea      	b.n	800bdb0 <__lshift+0xa4>
 800bdda:	bf00      	nop
 800bddc:	0800e1f1 	.word	0x0800e1f1
 800bde0:	0800e202 	.word	0x0800e202

0800bde4 <__mcmp>:
 800bde4:	690a      	ldr	r2, [r1, #16]
 800bde6:	4603      	mov	r3, r0
 800bde8:	6900      	ldr	r0, [r0, #16]
 800bdea:	1a80      	subs	r0, r0, r2
 800bdec:	b530      	push	{r4, r5, lr}
 800bdee:	d10e      	bne.n	800be0e <__mcmp+0x2a>
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	3114      	adds	r1, #20
 800bdf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bdf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be04:	4295      	cmp	r5, r2
 800be06:	d003      	beq.n	800be10 <__mcmp+0x2c>
 800be08:	d205      	bcs.n	800be16 <__mcmp+0x32>
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
 800be0e:	bd30      	pop	{r4, r5, pc}
 800be10:	42a3      	cmp	r3, r4
 800be12:	d3f3      	bcc.n	800bdfc <__mcmp+0x18>
 800be14:	e7fb      	b.n	800be0e <__mcmp+0x2a>
 800be16:	2001      	movs	r0, #1
 800be18:	e7f9      	b.n	800be0e <__mcmp+0x2a>
	...

0800be1c <__mdiff>:
 800be1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	4689      	mov	r9, r1
 800be22:	4606      	mov	r6, r0
 800be24:	4611      	mov	r1, r2
 800be26:	4648      	mov	r0, r9
 800be28:	4614      	mov	r4, r2
 800be2a:	f7ff ffdb 	bl	800bde4 <__mcmp>
 800be2e:	1e05      	subs	r5, r0, #0
 800be30:	d112      	bne.n	800be58 <__mdiff+0x3c>
 800be32:	4629      	mov	r1, r5
 800be34:	4630      	mov	r0, r6
 800be36:	f7ff fd19 	bl	800b86c <_Balloc>
 800be3a:	4602      	mov	r2, r0
 800be3c:	b928      	cbnz	r0, 800be4a <__mdiff+0x2e>
 800be3e:	4b3f      	ldr	r3, [pc, #252]	@ (800bf3c <__mdiff+0x120>)
 800be40:	f240 2137 	movw	r1, #567	@ 0x237
 800be44:	483e      	ldr	r0, [pc, #248]	@ (800bf40 <__mdiff+0x124>)
 800be46:	f001 fa47 	bl	800d2d8 <__assert_func>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be50:	4610      	mov	r0, r2
 800be52:	b003      	add	sp, #12
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	bfbc      	itt	lt
 800be5a:	464b      	movlt	r3, r9
 800be5c:	46a1      	movlt	r9, r4
 800be5e:	4630      	mov	r0, r6
 800be60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be64:	bfba      	itte	lt
 800be66:	461c      	movlt	r4, r3
 800be68:	2501      	movlt	r5, #1
 800be6a:	2500      	movge	r5, #0
 800be6c:	f7ff fcfe 	bl	800b86c <_Balloc>
 800be70:	4602      	mov	r2, r0
 800be72:	b918      	cbnz	r0, 800be7c <__mdiff+0x60>
 800be74:	4b31      	ldr	r3, [pc, #196]	@ (800bf3c <__mdiff+0x120>)
 800be76:	f240 2145 	movw	r1, #581	@ 0x245
 800be7a:	e7e3      	b.n	800be44 <__mdiff+0x28>
 800be7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be80:	6926      	ldr	r6, [r4, #16]
 800be82:	60c5      	str	r5, [r0, #12]
 800be84:	f109 0310 	add.w	r3, r9, #16
 800be88:	f109 0514 	add.w	r5, r9, #20
 800be8c:	f104 0e14 	add.w	lr, r4, #20
 800be90:	f100 0b14 	add.w	fp, r0, #20
 800be94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	46d9      	mov	r9, fp
 800bea0:	f04f 0c00 	mov.w	ip, #0
 800bea4:	9b01      	ldr	r3, [sp, #4]
 800bea6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800beaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	fa1f f38a 	uxth.w	r3, sl
 800beb4:	4619      	mov	r1, r3
 800beb6:	b283      	uxth	r3, r0
 800beb8:	1acb      	subs	r3, r1, r3
 800beba:	0c00      	lsrs	r0, r0, #16
 800bebc:	4463      	add	r3, ip
 800bebe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bec2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800becc:	4576      	cmp	r6, lr
 800bece:	f849 3b04 	str.w	r3, [r9], #4
 800bed2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bed6:	d8e5      	bhi.n	800bea4 <__mdiff+0x88>
 800bed8:	1b33      	subs	r3, r6, r4
 800beda:	3b15      	subs	r3, #21
 800bedc:	f023 0303 	bic.w	r3, r3, #3
 800bee0:	3415      	adds	r4, #21
 800bee2:	3304      	adds	r3, #4
 800bee4:	42a6      	cmp	r6, r4
 800bee6:	bf38      	it	cc
 800bee8:	2304      	movcc	r3, #4
 800beea:	441d      	add	r5, r3
 800beec:	445b      	add	r3, fp
 800beee:	461e      	mov	r6, r3
 800bef0:	462c      	mov	r4, r5
 800bef2:	4544      	cmp	r4, r8
 800bef4:	d30e      	bcc.n	800bf14 <__mdiff+0xf8>
 800bef6:	f108 0103 	add.w	r1, r8, #3
 800befa:	1b49      	subs	r1, r1, r5
 800befc:	f021 0103 	bic.w	r1, r1, #3
 800bf00:	3d03      	subs	r5, #3
 800bf02:	45a8      	cmp	r8, r5
 800bf04:	bf38      	it	cc
 800bf06:	2100      	movcc	r1, #0
 800bf08:	440b      	add	r3, r1
 800bf0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf0e:	b191      	cbz	r1, 800bf36 <__mdiff+0x11a>
 800bf10:	6117      	str	r7, [r2, #16]
 800bf12:	e79d      	b.n	800be50 <__mdiff+0x34>
 800bf14:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf18:	46e6      	mov	lr, ip
 800bf1a:	0c08      	lsrs	r0, r1, #16
 800bf1c:	fa1c fc81 	uxtah	ip, ip, r1
 800bf20:	4471      	add	r1, lr
 800bf22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf26:	b289      	uxth	r1, r1
 800bf28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf2c:	f846 1b04 	str.w	r1, [r6], #4
 800bf30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf34:	e7dd      	b.n	800bef2 <__mdiff+0xd6>
 800bf36:	3f01      	subs	r7, #1
 800bf38:	e7e7      	b.n	800bf0a <__mdiff+0xee>
 800bf3a:	bf00      	nop
 800bf3c:	0800e1f1 	.word	0x0800e1f1
 800bf40:	0800e202 	.word	0x0800e202

0800bf44 <__ulp>:
 800bf44:	b082      	sub	sp, #8
 800bf46:	ed8d 0b00 	vstr	d0, [sp]
 800bf4a:	9a01      	ldr	r2, [sp, #4]
 800bf4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bf8c <__ulp+0x48>)
 800bf4e:	4013      	ands	r3, r2
 800bf50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dc08      	bgt.n	800bf6a <__ulp+0x26>
 800bf58:	425b      	negs	r3, r3
 800bf5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bf5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf62:	da04      	bge.n	800bf6e <__ulp+0x2a>
 800bf64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bf68:	4113      	asrs	r3, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	e008      	b.n	800bf80 <__ulp+0x3c>
 800bf6e:	f1a2 0314 	sub.w	r3, r2, #20
 800bf72:	2b1e      	cmp	r3, #30
 800bf74:	bfda      	itte	le
 800bf76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bf7a:	40da      	lsrle	r2, r3
 800bf7c:	2201      	movgt	r2, #1
 800bf7e:	2300      	movs	r3, #0
 800bf80:	4619      	mov	r1, r3
 800bf82:	4610      	mov	r0, r2
 800bf84:	ec41 0b10 	vmov	d0, r0, r1
 800bf88:	b002      	add	sp, #8
 800bf8a:	4770      	bx	lr
 800bf8c:	7ff00000 	.word	0x7ff00000

0800bf90 <__b2d>:
 800bf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf94:	6906      	ldr	r6, [r0, #16]
 800bf96:	f100 0814 	add.w	r8, r0, #20
 800bf9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf9e:	1f37      	subs	r7, r6, #4
 800bfa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7ff fd53 	bl	800ba50 <__hi0bits>
 800bfaa:	f1c0 0320 	rsb	r3, r0, #32
 800bfae:	280a      	cmp	r0, #10
 800bfb0:	600b      	str	r3, [r1, #0]
 800bfb2:	491b      	ldr	r1, [pc, #108]	@ (800c020 <__b2d+0x90>)
 800bfb4:	dc15      	bgt.n	800bfe2 <__b2d+0x52>
 800bfb6:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfba:	fa22 f30c 	lsr.w	r3, r2, ip
 800bfbe:	45b8      	cmp	r8, r7
 800bfc0:	ea43 0501 	orr.w	r5, r3, r1
 800bfc4:	bf34      	ite	cc
 800bfc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfca:	2300      	movcs	r3, #0
 800bfcc:	3015      	adds	r0, #21
 800bfce:	fa02 f000 	lsl.w	r0, r2, r0
 800bfd2:	fa23 f30c 	lsr.w	r3, r3, ip
 800bfd6:	4303      	orrs	r3, r0
 800bfd8:	461c      	mov	r4, r3
 800bfda:	ec45 4b10 	vmov	d0, r4, r5
 800bfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe2:	45b8      	cmp	r8, r7
 800bfe4:	bf3a      	itte	cc
 800bfe6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfea:	f1a6 0708 	subcc.w	r7, r6, #8
 800bfee:	2300      	movcs	r3, #0
 800bff0:	380b      	subs	r0, #11
 800bff2:	d012      	beq.n	800c01a <__b2d+0x8a>
 800bff4:	f1c0 0120 	rsb	r1, r0, #32
 800bff8:	fa23 f401 	lsr.w	r4, r3, r1
 800bffc:	4082      	lsls	r2, r0
 800bffe:	4322      	orrs	r2, r4
 800c000:	4547      	cmp	r7, r8
 800c002:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c006:	bf8c      	ite	hi
 800c008:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c00c:	2200      	movls	r2, #0
 800c00e:	4083      	lsls	r3, r0
 800c010:	40ca      	lsrs	r2, r1
 800c012:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c016:	4313      	orrs	r3, r2
 800c018:	e7de      	b.n	800bfd8 <__b2d+0x48>
 800c01a:	ea42 0501 	orr.w	r5, r2, r1
 800c01e:	e7db      	b.n	800bfd8 <__b2d+0x48>
 800c020:	3ff00000 	.word	0x3ff00000

0800c024 <__d2b>:
 800c024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c028:	460f      	mov	r7, r1
 800c02a:	2101      	movs	r1, #1
 800c02c:	ec59 8b10 	vmov	r8, r9, d0
 800c030:	4616      	mov	r6, r2
 800c032:	f7ff fc1b 	bl	800b86c <_Balloc>
 800c036:	4604      	mov	r4, r0
 800c038:	b930      	cbnz	r0, 800c048 <__d2b+0x24>
 800c03a:	4602      	mov	r2, r0
 800c03c:	4b23      	ldr	r3, [pc, #140]	@ (800c0cc <__d2b+0xa8>)
 800c03e:	4824      	ldr	r0, [pc, #144]	@ (800c0d0 <__d2b+0xac>)
 800c040:	f240 310f 	movw	r1, #783	@ 0x30f
 800c044:	f001 f948 	bl	800d2d8 <__assert_func>
 800c048:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c04c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c050:	b10d      	cbz	r5, 800c056 <__d2b+0x32>
 800c052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	f1b8 0300 	subs.w	r3, r8, #0
 800c05c:	d023      	beq.n	800c0a6 <__d2b+0x82>
 800c05e:	4668      	mov	r0, sp
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	f7ff fd14 	bl	800ba8e <__lo0bits>
 800c066:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c06a:	b1d0      	cbz	r0, 800c0a2 <__d2b+0x7e>
 800c06c:	f1c0 0320 	rsb	r3, r0, #32
 800c070:	fa02 f303 	lsl.w	r3, r2, r3
 800c074:	430b      	orrs	r3, r1
 800c076:	40c2      	lsrs	r2, r0
 800c078:	6163      	str	r3, [r4, #20]
 800c07a:	9201      	str	r2, [sp, #4]
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	61a3      	str	r3, [r4, #24]
 800c080:	2b00      	cmp	r3, #0
 800c082:	bf0c      	ite	eq
 800c084:	2201      	moveq	r2, #1
 800c086:	2202      	movne	r2, #2
 800c088:	6122      	str	r2, [r4, #16]
 800c08a:	b1a5      	cbz	r5, 800c0b6 <__d2b+0x92>
 800c08c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c090:	4405      	add	r5, r0
 800c092:	603d      	str	r5, [r7, #0]
 800c094:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c098:	6030      	str	r0, [r6, #0]
 800c09a:	4620      	mov	r0, r4
 800c09c:	b003      	add	sp, #12
 800c09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	6161      	str	r1, [r4, #20]
 800c0a4:	e7ea      	b.n	800c07c <__d2b+0x58>
 800c0a6:	a801      	add	r0, sp, #4
 800c0a8:	f7ff fcf1 	bl	800ba8e <__lo0bits>
 800c0ac:	9b01      	ldr	r3, [sp, #4]
 800c0ae:	6163      	str	r3, [r4, #20]
 800c0b0:	3020      	adds	r0, #32
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	e7e8      	b.n	800c088 <__d2b+0x64>
 800c0b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0be:	6038      	str	r0, [r7, #0]
 800c0c0:	6918      	ldr	r0, [r3, #16]
 800c0c2:	f7ff fcc5 	bl	800ba50 <__hi0bits>
 800c0c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0ca:	e7e5      	b.n	800c098 <__d2b+0x74>
 800c0cc:	0800e1f1 	.word	0x0800e1f1
 800c0d0:	0800e202 	.word	0x0800e202

0800c0d4 <__ratio>:
 800c0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	4688      	mov	r8, r1
 800c0da:	4669      	mov	r1, sp
 800c0dc:	4681      	mov	r9, r0
 800c0de:	f7ff ff57 	bl	800bf90 <__b2d>
 800c0e2:	a901      	add	r1, sp, #4
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	ec55 4b10 	vmov	r4, r5, d0
 800c0ea:	f7ff ff51 	bl	800bf90 <__b2d>
 800c0ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c0f2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c0f6:	1ad2      	subs	r2, r2, r3
 800c0f8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c0fc:	1a5b      	subs	r3, r3, r1
 800c0fe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c102:	ec57 6b10 	vmov	r6, r7, d0
 800c106:	2b00      	cmp	r3, #0
 800c108:	bfd6      	itet	le
 800c10a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c10e:	462a      	movgt	r2, r5
 800c110:	463a      	movle	r2, r7
 800c112:	46ab      	mov	fp, r5
 800c114:	46a2      	mov	sl, r4
 800c116:	bfce      	itee	gt
 800c118:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c11c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c120:	ee00 3a90 	vmovle	s1, r3
 800c124:	ec4b ab17 	vmov	d7, sl, fp
 800c128:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c12c:	b003      	add	sp, #12
 800c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c132 <__copybits>:
 800c132:	3901      	subs	r1, #1
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	1149      	asrs	r1, r1, #5
 800c138:	6914      	ldr	r4, [r2, #16]
 800c13a:	3101      	adds	r1, #1
 800c13c:	f102 0314 	add.w	r3, r2, #20
 800c140:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c144:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c148:	1f05      	subs	r5, r0, #4
 800c14a:	42a3      	cmp	r3, r4
 800c14c:	d30c      	bcc.n	800c168 <__copybits+0x36>
 800c14e:	1aa3      	subs	r3, r4, r2
 800c150:	3b11      	subs	r3, #17
 800c152:	f023 0303 	bic.w	r3, r3, #3
 800c156:	3211      	adds	r2, #17
 800c158:	42a2      	cmp	r2, r4
 800c15a:	bf88      	it	hi
 800c15c:	2300      	movhi	r3, #0
 800c15e:	4418      	add	r0, r3
 800c160:	2300      	movs	r3, #0
 800c162:	4288      	cmp	r0, r1
 800c164:	d305      	bcc.n	800c172 <__copybits+0x40>
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	f853 6b04 	ldr.w	r6, [r3], #4
 800c16c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c170:	e7eb      	b.n	800c14a <__copybits+0x18>
 800c172:	f840 3b04 	str.w	r3, [r0], #4
 800c176:	e7f4      	b.n	800c162 <__copybits+0x30>

0800c178 <__any_on>:
 800c178:	f100 0214 	add.w	r2, r0, #20
 800c17c:	6900      	ldr	r0, [r0, #16]
 800c17e:	114b      	asrs	r3, r1, #5
 800c180:	4298      	cmp	r0, r3
 800c182:	b510      	push	{r4, lr}
 800c184:	db11      	blt.n	800c1aa <__any_on+0x32>
 800c186:	dd0a      	ble.n	800c19e <__any_on+0x26>
 800c188:	f011 011f 	ands.w	r1, r1, #31
 800c18c:	d007      	beq.n	800c19e <__any_on+0x26>
 800c18e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c192:	fa24 f001 	lsr.w	r0, r4, r1
 800c196:	fa00 f101 	lsl.w	r1, r0, r1
 800c19a:	428c      	cmp	r4, r1
 800c19c:	d10b      	bne.n	800c1b6 <__any_on+0x3e>
 800c19e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d803      	bhi.n	800c1ae <__any_on+0x36>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	e7f7      	b.n	800c19e <__any_on+0x26>
 800c1ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1b2:	2900      	cmp	r1, #0
 800c1b4:	d0f5      	beq.n	800c1a2 <__any_on+0x2a>
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7f6      	b.n	800c1a8 <__any_on+0x30>

0800c1ba <sulp>:
 800c1ba:	b570      	push	{r4, r5, r6, lr}
 800c1bc:	4604      	mov	r4, r0
 800c1be:	460d      	mov	r5, r1
 800c1c0:	4616      	mov	r6, r2
 800c1c2:	ec45 4b10 	vmov	d0, r4, r5
 800c1c6:	f7ff febd 	bl	800bf44 <__ulp>
 800c1ca:	b17e      	cbz	r6, 800c1ec <sulp+0x32>
 800c1cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dd09      	ble.n	800c1ec <sulp+0x32>
 800c1d8:	051b      	lsls	r3, r3, #20
 800c1da:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c1e4:	ec41 0b17 	vmov	d7, r0, r1
 800c1e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c1ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1f0 <_strtod_l>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	ed2d 8b0a 	vpush	{d8-d12}
 800c1f8:	b097      	sub	sp, #92	@ 0x5c
 800c1fa:	4688      	mov	r8, r1
 800c1fc:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1fe:	2200      	movs	r2, #0
 800c200:	9212      	str	r2, [sp, #72]	@ 0x48
 800c202:	9005      	str	r0, [sp, #20]
 800c204:	f04f 0a00 	mov.w	sl, #0
 800c208:	f04f 0b00 	mov.w	fp, #0
 800c20c:	460a      	mov	r2, r1
 800c20e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c210:	7811      	ldrb	r1, [r2, #0]
 800c212:	292b      	cmp	r1, #43	@ 0x2b
 800c214:	d04c      	beq.n	800c2b0 <_strtod_l+0xc0>
 800c216:	d839      	bhi.n	800c28c <_strtod_l+0x9c>
 800c218:	290d      	cmp	r1, #13
 800c21a:	d833      	bhi.n	800c284 <_strtod_l+0x94>
 800c21c:	2908      	cmp	r1, #8
 800c21e:	d833      	bhi.n	800c288 <_strtod_l+0x98>
 800c220:	2900      	cmp	r1, #0
 800c222:	d03c      	beq.n	800c29e <_strtod_l+0xae>
 800c224:	2200      	movs	r2, #0
 800c226:	9208      	str	r2, [sp, #32]
 800c228:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c22a:	782a      	ldrb	r2, [r5, #0]
 800c22c:	2a30      	cmp	r2, #48	@ 0x30
 800c22e:	f040 80b7 	bne.w	800c3a0 <_strtod_l+0x1b0>
 800c232:	786a      	ldrb	r2, [r5, #1]
 800c234:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c238:	2a58      	cmp	r2, #88	@ 0x58
 800c23a:	d170      	bne.n	800c31e <_strtod_l+0x12e>
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	9b08      	ldr	r3, [sp, #32]
 800c240:	9301      	str	r3, [sp, #4]
 800c242:	ab12      	add	r3, sp, #72	@ 0x48
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	4a90      	ldr	r2, [pc, #576]	@ (800c488 <_strtod_l+0x298>)
 800c248:	9805      	ldr	r0, [sp, #20]
 800c24a:	ab13      	add	r3, sp, #76	@ 0x4c
 800c24c:	a911      	add	r1, sp, #68	@ 0x44
 800c24e:	f001 f8dd 	bl	800d40c <__gethex>
 800c252:	f010 060f 	ands.w	r6, r0, #15
 800c256:	4604      	mov	r4, r0
 800c258:	d005      	beq.n	800c266 <_strtod_l+0x76>
 800c25a:	2e06      	cmp	r6, #6
 800c25c:	d12a      	bne.n	800c2b4 <_strtod_l+0xc4>
 800c25e:	3501      	adds	r5, #1
 800c260:	2300      	movs	r3, #0
 800c262:	9511      	str	r5, [sp, #68]	@ 0x44
 800c264:	9308      	str	r3, [sp, #32]
 800c266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f040 8537 	bne.w	800ccdc <_strtod_l+0xaec>
 800c26e:	9b08      	ldr	r3, [sp, #32]
 800c270:	ec4b ab10 	vmov	d0, sl, fp
 800c274:	b1cb      	cbz	r3, 800c2aa <_strtod_l+0xba>
 800c276:	eeb1 0b40 	vneg.f64	d0, d0
 800c27a:	b017      	add	sp, #92	@ 0x5c
 800c27c:	ecbd 8b0a 	vpop	{d8-d12}
 800c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c284:	2920      	cmp	r1, #32
 800c286:	d1cd      	bne.n	800c224 <_strtod_l+0x34>
 800c288:	3201      	adds	r2, #1
 800c28a:	e7c0      	b.n	800c20e <_strtod_l+0x1e>
 800c28c:	292d      	cmp	r1, #45	@ 0x2d
 800c28e:	d1c9      	bne.n	800c224 <_strtod_l+0x34>
 800c290:	2101      	movs	r1, #1
 800c292:	9108      	str	r1, [sp, #32]
 800c294:	1c51      	adds	r1, r2, #1
 800c296:	9111      	str	r1, [sp, #68]	@ 0x44
 800c298:	7852      	ldrb	r2, [r2, #1]
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	d1c4      	bne.n	800c228 <_strtod_l+0x38>
 800c29e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2a0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f040 8517 	bne.w	800ccd8 <_strtod_l+0xae8>
 800c2aa:	ec4b ab10 	vmov	d0, sl, fp
 800c2ae:	e7e4      	b.n	800c27a <_strtod_l+0x8a>
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	e7ee      	b.n	800c292 <_strtod_l+0xa2>
 800c2b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c2b6:	b13a      	cbz	r2, 800c2c8 <_strtod_l+0xd8>
 800c2b8:	2135      	movs	r1, #53	@ 0x35
 800c2ba:	a814      	add	r0, sp, #80	@ 0x50
 800c2bc:	f7ff ff39 	bl	800c132 <__copybits>
 800c2c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c2c2:	9805      	ldr	r0, [sp, #20]
 800c2c4:	f7ff fb12 	bl	800b8ec <_Bfree>
 800c2c8:	1e73      	subs	r3, r6, #1
 800c2ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2cc:	2b04      	cmp	r3, #4
 800c2ce:	d806      	bhi.n	800c2de <_strtod_l+0xee>
 800c2d0:	e8df f003 	tbb	[pc, r3]
 800c2d4:	201d0314 	.word	0x201d0314
 800c2d8:	14          	.byte	0x14
 800c2d9:	00          	.byte	0x00
 800c2da:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c2de:	05e3      	lsls	r3, r4, #23
 800c2e0:	bf48      	it	mi
 800c2e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c2e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2ea:	0d1b      	lsrs	r3, r3, #20
 800c2ec:	051b      	lsls	r3, r3, #20
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1b9      	bne.n	800c266 <_strtod_l+0x76>
 800c2f2:	f7fe fb9f 	bl	800aa34 <__errno>
 800c2f6:	2322      	movs	r3, #34	@ 0x22
 800c2f8:	6003      	str	r3, [r0, #0]
 800c2fa:	e7b4      	b.n	800c266 <_strtod_l+0x76>
 800c2fc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c300:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c304:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c308:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c30c:	e7e7      	b.n	800c2de <_strtod_l+0xee>
 800c30e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c490 <_strtod_l+0x2a0>
 800c312:	e7e4      	b.n	800c2de <_strtod_l+0xee>
 800c314:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c318:	f04f 3aff 	mov.w	sl, #4294967295
 800c31c:	e7df      	b.n	800c2de <_strtod_l+0xee>
 800c31e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	9211      	str	r2, [sp, #68]	@ 0x44
 800c324:	785b      	ldrb	r3, [r3, #1]
 800c326:	2b30      	cmp	r3, #48	@ 0x30
 800c328:	d0f9      	beq.n	800c31e <_strtod_l+0x12e>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d09b      	beq.n	800c266 <_strtod_l+0x76>
 800c32e:	2301      	movs	r3, #1
 800c330:	9307      	str	r3, [sp, #28]
 800c332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c334:	930a      	str	r3, [sp, #40]	@ 0x28
 800c336:	2300      	movs	r3, #0
 800c338:	9306      	str	r3, [sp, #24]
 800c33a:	4699      	mov	r9, r3
 800c33c:	461d      	mov	r5, r3
 800c33e:	220a      	movs	r2, #10
 800c340:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c342:	7804      	ldrb	r4, [r0, #0]
 800c344:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c348:	b2d9      	uxtb	r1, r3
 800c34a:	2909      	cmp	r1, #9
 800c34c:	d92a      	bls.n	800c3a4 <_strtod_l+0x1b4>
 800c34e:	494f      	ldr	r1, [pc, #316]	@ (800c48c <_strtod_l+0x29c>)
 800c350:	2201      	movs	r2, #1
 800c352:	f000 ff87 	bl	800d264 <strncmp>
 800c356:	b398      	cbz	r0, 800c3c0 <_strtod_l+0x1d0>
 800c358:	2000      	movs	r0, #0
 800c35a:	4622      	mov	r2, r4
 800c35c:	462b      	mov	r3, r5
 800c35e:	4607      	mov	r7, r0
 800c360:	4601      	mov	r1, r0
 800c362:	2a65      	cmp	r2, #101	@ 0x65
 800c364:	d001      	beq.n	800c36a <_strtod_l+0x17a>
 800c366:	2a45      	cmp	r2, #69	@ 0x45
 800c368:	d118      	bne.n	800c39c <_strtod_l+0x1ac>
 800c36a:	b91b      	cbnz	r3, 800c374 <_strtod_l+0x184>
 800c36c:	9b07      	ldr	r3, [sp, #28]
 800c36e:	4303      	orrs	r3, r0
 800c370:	d095      	beq.n	800c29e <_strtod_l+0xae>
 800c372:	2300      	movs	r3, #0
 800c374:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c378:	f108 0201 	add.w	r2, r8, #1
 800c37c:	9211      	str	r2, [sp, #68]	@ 0x44
 800c37e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c382:	2a2b      	cmp	r2, #43	@ 0x2b
 800c384:	d074      	beq.n	800c470 <_strtod_l+0x280>
 800c386:	2a2d      	cmp	r2, #45	@ 0x2d
 800c388:	d07a      	beq.n	800c480 <_strtod_l+0x290>
 800c38a:	f04f 0e00 	mov.w	lr, #0
 800c38e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c392:	2c09      	cmp	r4, #9
 800c394:	f240 8082 	bls.w	800c49c <_strtod_l+0x2ac>
 800c398:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c39c:	2400      	movs	r4, #0
 800c39e:	e09d      	b.n	800c4dc <_strtod_l+0x2ec>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e7c5      	b.n	800c330 <_strtod_l+0x140>
 800c3a4:	2d08      	cmp	r5, #8
 800c3a6:	bfc8      	it	gt
 800c3a8:	9906      	ldrgt	r1, [sp, #24]
 800c3aa:	f100 0001 	add.w	r0, r0, #1
 800c3ae:	bfca      	itet	gt
 800c3b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c3b4:	fb02 3909 	mlale	r9, r2, r9, r3
 800c3b8:	9306      	strgt	r3, [sp, #24]
 800c3ba:	3501      	adds	r5, #1
 800c3bc:	9011      	str	r0, [sp, #68]	@ 0x44
 800c3be:	e7bf      	b.n	800c340 <_strtod_l+0x150>
 800c3c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	9211      	str	r2, [sp, #68]	@ 0x44
 800c3c6:	785a      	ldrb	r2, [r3, #1]
 800c3c8:	b3bd      	cbz	r5, 800c43a <_strtod_l+0x24a>
 800c3ca:	4607      	mov	r7, r0
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c3d2:	2909      	cmp	r1, #9
 800c3d4:	d912      	bls.n	800c3fc <_strtod_l+0x20c>
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	e7c3      	b.n	800c362 <_strtod_l+0x172>
 800c3da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	9211      	str	r2, [sp, #68]	@ 0x44
 800c3e0:	785a      	ldrb	r2, [r3, #1]
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	2a30      	cmp	r2, #48	@ 0x30
 800c3e6:	d0f8      	beq.n	800c3da <_strtod_l+0x1ea>
 800c3e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c3ec:	2b08      	cmp	r3, #8
 800c3ee:	f200 847a 	bhi.w	800cce6 <_strtod_l+0xaf6>
 800c3f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	3a30      	subs	r2, #48	@ 0x30
 800c3fe:	f100 0101 	add.w	r1, r0, #1
 800c402:	d014      	beq.n	800c42e <_strtod_l+0x23e>
 800c404:	440f      	add	r7, r1
 800c406:	469c      	mov	ip, r3
 800c408:	f04f 0e0a 	mov.w	lr, #10
 800c40c:	f10c 0401 	add.w	r4, ip, #1
 800c410:	1ae6      	subs	r6, r4, r3
 800c412:	42b1      	cmp	r1, r6
 800c414:	dc13      	bgt.n	800c43e <_strtod_l+0x24e>
 800c416:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c41a:	1819      	adds	r1, r3, r0
 800c41c:	2908      	cmp	r1, #8
 800c41e:	f103 0301 	add.w	r3, r3, #1
 800c422:	4403      	add	r3, r0
 800c424:	dc19      	bgt.n	800c45a <_strtod_l+0x26a>
 800c426:	210a      	movs	r1, #10
 800c428:	fb01 2909 	mla	r9, r1, r9, r2
 800c42c:	2100      	movs	r1, #0
 800c42e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c430:	1c50      	adds	r0, r2, #1
 800c432:	9011      	str	r0, [sp, #68]	@ 0x44
 800c434:	7852      	ldrb	r2, [r2, #1]
 800c436:	4608      	mov	r0, r1
 800c438:	e7c9      	b.n	800c3ce <_strtod_l+0x1de>
 800c43a:	4628      	mov	r0, r5
 800c43c:	e7d2      	b.n	800c3e4 <_strtod_l+0x1f4>
 800c43e:	f1bc 0f08 	cmp.w	ip, #8
 800c442:	dc03      	bgt.n	800c44c <_strtod_l+0x25c>
 800c444:	fb0e f909 	mul.w	r9, lr, r9
 800c448:	46a4      	mov	ip, r4
 800c44a:	e7df      	b.n	800c40c <_strtod_l+0x21c>
 800c44c:	2c10      	cmp	r4, #16
 800c44e:	bfde      	ittt	le
 800c450:	9e06      	ldrle	r6, [sp, #24]
 800c452:	fb0e f606 	mulle.w	r6, lr, r6
 800c456:	9606      	strle	r6, [sp, #24]
 800c458:	e7f6      	b.n	800c448 <_strtod_l+0x258>
 800c45a:	290f      	cmp	r1, #15
 800c45c:	bfdf      	itttt	le
 800c45e:	9806      	ldrle	r0, [sp, #24]
 800c460:	210a      	movle	r1, #10
 800c462:	fb01 2200 	mlale	r2, r1, r0, r2
 800c466:	9206      	strle	r2, [sp, #24]
 800c468:	e7e0      	b.n	800c42c <_strtod_l+0x23c>
 800c46a:	2700      	movs	r7, #0
 800c46c:	2101      	movs	r1, #1
 800c46e:	e77d      	b.n	800c36c <_strtod_l+0x17c>
 800c470:	f04f 0e00 	mov.w	lr, #0
 800c474:	f108 0202 	add.w	r2, r8, #2
 800c478:	9211      	str	r2, [sp, #68]	@ 0x44
 800c47a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c47e:	e786      	b.n	800c38e <_strtod_l+0x19e>
 800c480:	f04f 0e01 	mov.w	lr, #1
 800c484:	e7f6      	b.n	800c474 <_strtod_l+0x284>
 800c486:	bf00      	nop
 800c488:	0800e424 	.word	0x0800e424
 800c48c:	0800e25b 	.word	0x0800e25b
 800c490:	7ff00000 	.word	0x7ff00000
 800c494:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c496:	1c54      	adds	r4, r2, #1
 800c498:	9411      	str	r4, [sp, #68]	@ 0x44
 800c49a:	7852      	ldrb	r2, [r2, #1]
 800c49c:	2a30      	cmp	r2, #48	@ 0x30
 800c49e:	d0f9      	beq.n	800c494 <_strtod_l+0x2a4>
 800c4a0:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c4a4:	2c08      	cmp	r4, #8
 800c4a6:	f63f af79 	bhi.w	800c39c <_strtod_l+0x1ac>
 800c4aa:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c4ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c4b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c4b4:	1c54      	adds	r4, r2, #1
 800c4b6:	9411      	str	r4, [sp, #68]	@ 0x44
 800c4b8:	7852      	ldrb	r2, [r2, #1]
 800c4ba:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800c4be:	2e09      	cmp	r6, #9
 800c4c0:	d937      	bls.n	800c532 <_strtod_l+0x342>
 800c4c2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c4c4:	1ba4      	subs	r4, r4, r6
 800c4c6:	2c08      	cmp	r4, #8
 800c4c8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c4cc:	dc02      	bgt.n	800c4d4 <_strtod_l+0x2e4>
 800c4ce:	4564      	cmp	r4, ip
 800c4d0:	bfa8      	it	ge
 800c4d2:	4664      	movge	r4, ip
 800c4d4:	f1be 0f00 	cmp.w	lr, #0
 800c4d8:	d000      	beq.n	800c4dc <_strtod_l+0x2ec>
 800c4da:	4264      	negs	r4, r4
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d14d      	bne.n	800c57c <_strtod_l+0x38c>
 800c4e0:	9b07      	ldr	r3, [sp, #28]
 800c4e2:	4318      	orrs	r0, r3
 800c4e4:	f47f aebf 	bne.w	800c266 <_strtod_l+0x76>
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	f47f aed8 	bne.w	800c29e <_strtod_l+0xae>
 800c4ee:	2a69      	cmp	r2, #105	@ 0x69
 800c4f0:	d027      	beq.n	800c542 <_strtod_l+0x352>
 800c4f2:	dc24      	bgt.n	800c53e <_strtod_l+0x34e>
 800c4f4:	2a49      	cmp	r2, #73	@ 0x49
 800c4f6:	d024      	beq.n	800c542 <_strtod_l+0x352>
 800c4f8:	2a4e      	cmp	r2, #78	@ 0x4e
 800c4fa:	f47f aed0 	bne.w	800c29e <_strtod_l+0xae>
 800c4fe:	4997      	ldr	r1, [pc, #604]	@ (800c75c <_strtod_l+0x56c>)
 800c500:	a811      	add	r0, sp, #68	@ 0x44
 800c502:	f001 f9a5 	bl	800d850 <__match>
 800c506:	2800      	cmp	r0, #0
 800c508:	f43f aec9 	beq.w	800c29e <_strtod_l+0xae>
 800c50c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2b28      	cmp	r3, #40	@ 0x28
 800c512:	d12d      	bne.n	800c570 <_strtod_l+0x380>
 800c514:	4992      	ldr	r1, [pc, #584]	@ (800c760 <_strtod_l+0x570>)
 800c516:	aa14      	add	r2, sp, #80	@ 0x50
 800c518:	a811      	add	r0, sp, #68	@ 0x44
 800c51a:	f001 f9ad 	bl	800d878 <__hexnan>
 800c51e:	2805      	cmp	r0, #5
 800c520:	d126      	bne.n	800c570 <_strtod_l+0x380>
 800c522:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c524:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c528:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c52c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c530:	e699      	b.n	800c266 <_strtod_l+0x76>
 800c532:	240a      	movs	r4, #10
 800c534:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c538:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c53c:	e7b9      	b.n	800c4b2 <_strtod_l+0x2c2>
 800c53e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c540:	e7db      	b.n	800c4fa <_strtod_l+0x30a>
 800c542:	4988      	ldr	r1, [pc, #544]	@ (800c764 <_strtod_l+0x574>)
 800c544:	a811      	add	r0, sp, #68	@ 0x44
 800c546:	f001 f983 	bl	800d850 <__match>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	f43f aea7 	beq.w	800c29e <_strtod_l+0xae>
 800c550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c552:	4985      	ldr	r1, [pc, #532]	@ (800c768 <_strtod_l+0x578>)
 800c554:	3b01      	subs	r3, #1
 800c556:	a811      	add	r0, sp, #68	@ 0x44
 800c558:	9311      	str	r3, [sp, #68]	@ 0x44
 800c55a:	f001 f979 	bl	800d850 <__match>
 800c55e:	b910      	cbnz	r0, 800c566 <_strtod_l+0x376>
 800c560:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c562:	3301      	adds	r3, #1
 800c564:	9311      	str	r3, [sp, #68]	@ 0x44
 800c566:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c77c <_strtod_l+0x58c>
 800c56a:	f04f 0a00 	mov.w	sl, #0
 800c56e:	e67a      	b.n	800c266 <_strtod_l+0x76>
 800c570:	487e      	ldr	r0, [pc, #504]	@ (800c76c <_strtod_l+0x57c>)
 800c572:	f000 fea9 	bl	800d2c8 <nan>
 800c576:	ec5b ab10 	vmov	sl, fp, d0
 800c57a:	e674      	b.n	800c266 <_strtod_l+0x76>
 800c57c:	ee07 9a90 	vmov	s15, r9
 800c580:	1be2      	subs	r2, r4, r7
 800c582:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c586:	2d00      	cmp	r5, #0
 800c588:	bf08      	it	eq
 800c58a:	461d      	moveq	r5, r3
 800c58c:	2b10      	cmp	r3, #16
 800c58e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c590:	461a      	mov	r2, r3
 800c592:	bfa8      	it	ge
 800c594:	2210      	movge	r2, #16
 800c596:	2b09      	cmp	r3, #9
 800c598:	ec5b ab17 	vmov	sl, fp, d7
 800c59c:	dc15      	bgt.n	800c5ca <_strtod_l+0x3da>
 800c59e:	1be1      	subs	r1, r4, r7
 800c5a0:	2900      	cmp	r1, #0
 800c5a2:	f43f ae60 	beq.w	800c266 <_strtod_l+0x76>
 800c5a6:	eba4 0107 	sub.w	r1, r4, r7
 800c5aa:	dd72      	ble.n	800c692 <_strtod_l+0x4a2>
 800c5ac:	2916      	cmp	r1, #22
 800c5ae:	dc59      	bgt.n	800c664 <_strtod_l+0x474>
 800c5b0:	4b6f      	ldr	r3, [pc, #444]	@ (800c770 <_strtod_l+0x580>)
 800c5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b8:	ed93 7b00 	vldr	d7, [r3]
 800c5bc:	ec4b ab16 	vmov	d6, sl, fp
 800c5c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5c4:	ec5b ab17 	vmov	sl, fp, d7
 800c5c8:	e64d      	b.n	800c266 <_strtod_l+0x76>
 800c5ca:	4969      	ldr	r1, [pc, #420]	@ (800c770 <_strtod_l+0x580>)
 800c5cc:	eddd 6a06 	vldr	s13, [sp, #24]
 800c5d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c5d4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c5d8:	2b0f      	cmp	r3, #15
 800c5da:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c5de:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c5e2:	ec5b ab16 	vmov	sl, fp, d6
 800c5e6:	ddda      	ble.n	800c59e <_strtod_l+0x3ae>
 800c5e8:	1a9a      	subs	r2, r3, r2
 800c5ea:	1be1      	subs	r1, r4, r7
 800c5ec:	440a      	add	r2, r1
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	f340 8094 	ble.w	800c71c <_strtod_l+0x52c>
 800c5f4:	f012 000f 	ands.w	r0, r2, #15
 800c5f8:	d00a      	beq.n	800c610 <_strtod_l+0x420>
 800c5fa:	495d      	ldr	r1, [pc, #372]	@ (800c770 <_strtod_l+0x580>)
 800c5fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c600:	ed91 7b00 	vldr	d7, [r1]
 800c604:	ec4b ab16 	vmov	d6, sl, fp
 800c608:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c60c:	ec5b ab17 	vmov	sl, fp, d7
 800c610:	f032 020f 	bics.w	r2, r2, #15
 800c614:	d073      	beq.n	800c6fe <_strtod_l+0x50e>
 800c616:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c61a:	dd47      	ble.n	800c6ac <_strtod_l+0x4bc>
 800c61c:	2400      	movs	r4, #0
 800c61e:	4625      	mov	r5, r4
 800c620:	9407      	str	r4, [sp, #28]
 800c622:	4626      	mov	r6, r4
 800c624:	9a05      	ldr	r2, [sp, #20]
 800c626:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c77c <_strtod_l+0x58c>
 800c62a:	2322      	movs	r3, #34	@ 0x22
 800c62c:	6013      	str	r3, [r2, #0]
 800c62e:	f04f 0a00 	mov.w	sl, #0
 800c632:	9b07      	ldr	r3, [sp, #28]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f43f ae16 	beq.w	800c266 <_strtod_l+0x76>
 800c63a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c63c:	9805      	ldr	r0, [sp, #20]
 800c63e:	f7ff f955 	bl	800b8ec <_Bfree>
 800c642:	9805      	ldr	r0, [sp, #20]
 800c644:	4631      	mov	r1, r6
 800c646:	f7ff f951 	bl	800b8ec <_Bfree>
 800c64a:	9805      	ldr	r0, [sp, #20]
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7ff f94d 	bl	800b8ec <_Bfree>
 800c652:	9907      	ldr	r1, [sp, #28]
 800c654:	9805      	ldr	r0, [sp, #20]
 800c656:	f7ff f949 	bl	800b8ec <_Bfree>
 800c65a:	9805      	ldr	r0, [sp, #20]
 800c65c:	4621      	mov	r1, r4
 800c65e:	f7ff f945 	bl	800b8ec <_Bfree>
 800c662:	e600      	b.n	800c266 <_strtod_l+0x76>
 800c664:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c668:	1be0      	subs	r0, r4, r7
 800c66a:	4281      	cmp	r1, r0
 800c66c:	dbbc      	blt.n	800c5e8 <_strtod_l+0x3f8>
 800c66e:	4a40      	ldr	r2, [pc, #256]	@ (800c770 <_strtod_l+0x580>)
 800c670:	f1c3 030f 	rsb	r3, r3, #15
 800c674:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c678:	ed91 7b00 	vldr	d7, [r1]
 800c67c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c67e:	ec4b ab16 	vmov	d6, sl, fp
 800c682:	1acb      	subs	r3, r1, r3
 800c684:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c68c:	ed92 6b00 	vldr	d6, [r2]
 800c690:	e796      	b.n	800c5c0 <_strtod_l+0x3d0>
 800c692:	3116      	adds	r1, #22
 800c694:	dba8      	blt.n	800c5e8 <_strtod_l+0x3f8>
 800c696:	4b36      	ldr	r3, [pc, #216]	@ (800c770 <_strtod_l+0x580>)
 800c698:	1b3c      	subs	r4, r7, r4
 800c69a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c69e:	ed94 7b00 	vldr	d7, [r4]
 800c6a2:	ec4b ab16 	vmov	d6, sl, fp
 800c6a6:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c6aa:	e78b      	b.n	800c5c4 <_strtod_l+0x3d4>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	ec4b ab17 	vmov	d7, sl, fp
 800c6b2:	4e30      	ldr	r6, [pc, #192]	@ (800c774 <_strtod_l+0x584>)
 800c6b4:	1112      	asrs	r2, r2, #4
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	2a01      	cmp	r2, #1
 800c6ba:	dc23      	bgt.n	800c704 <_strtod_l+0x514>
 800c6bc:	b108      	cbz	r0, 800c6c2 <_strtod_l+0x4d2>
 800c6be:	ec5b ab17 	vmov	sl, fp, d7
 800c6c2:	4a2c      	ldr	r2, [pc, #176]	@ (800c774 <_strtod_l+0x584>)
 800c6c4:	482c      	ldr	r0, [pc, #176]	@ (800c778 <_strtod_l+0x588>)
 800c6c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c6ca:	ed92 7b00 	vldr	d7, [r2]
 800c6ce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c6d2:	ec4b ab16 	vmov	d6, sl, fp
 800c6d6:	4a29      	ldr	r2, [pc, #164]	@ (800c77c <_strtod_l+0x58c>)
 800c6d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6dc:	ee17 1a90 	vmov	r1, s15
 800c6e0:	400a      	ands	r2, r1
 800c6e2:	4282      	cmp	r2, r0
 800c6e4:	ec5b ab17 	vmov	sl, fp, d7
 800c6e8:	d898      	bhi.n	800c61c <_strtod_l+0x42c>
 800c6ea:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c6ee:	4282      	cmp	r2, r0
 800c6f0:	bf86      	itte	hi
 800c6f2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c780 <_strtod_l+0x590>
 800c6f6:	f04f 3aff 	movhi.w	sl, #4294967295
 800c6fa:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c6fe:	2200      	movs	r2, #0
 800c700:	9206      	str	r2, [sp, #24]
 800c702:	e076      	b.n	800c7f2 <_strtod_l+0x602>
 800c704:	f012 0f01 	tst.w	r2, #1
 800c708:	d004      	beq.n	800c714 <_strtod_l+0x524>
 800c70a:	ed96 6b00 	vldr	d6, [r6]
 800c70e:	2001      	movs	r0, #1
 800c710:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c714:	3101      	adds	r1, #1
 800c716:	1052      	asrs	r2, r2, #1
 800c718:	3608      	adds	r6, #8
 800c71a:	e7cd      	b.n	800c6b8 <_strtod_l+0x4c8>
 800c71c:	d0ef      	beq.n	800c6fe <_strtod_l+0x50e>
 800c71e:	4252      	negs	r2, r2
 800c720:	f012 000f 	ands.w	r0, r2, #15
 800c724:	d00a      	beq.n	800c73c <_strtod_l+0x54c>
 800c726:	4912      	ldr	r1, [pc, #72]	@ (800c770 <_strtod_l+0x580>)
 800c728:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c72c:	ed91 7b00 	vldr	d7, [r1]
 800c730:	ec4b ab16 	vmov	d6, sl, fp
 800c734:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c738:	ec5b ab17 	vmov	sl, fp, d7
 800c73c:	1112      	asrs	r2, r2, #4
 800c73e:	d0de      	beq.n	800c6fe <_strtod_l+0x50e>
 800c740:	2a1f      	cmp	r2, #31
 800c742:	dd1f      	ble.n	800c784 <_strtod_l+0x594>
 800c744:	2400      	movs	r4, #0
 800c746:	4625      	mov	r5, r4
 800c748:	9407      	str	r4, [sp, #28]
 800c74a:	4626      	mov	r6, r4
 800c74c:	9a05      	ldr	r2, [sp, #20]
 800c74e:	2322      	movs	r3, #34	@ 0x22
 800c750:	f04f 0a00 	mov.w	sl, #0
 800c754:	f04f 0b00 	mov.w	fp, #0
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	e76a      	b.n	800c632 <_strtod_l+0x442>
 800c75c:	0800e149 	.word	0x0800e149
 800c760:	0800e410 	.word	0x0800e410
 800c764:	0800e141 	.word	0x0800e141
 800c768:	0800e178 	.word	0x0800e178
 800c76c:	0800e2b1 	.word	0x0800e2b1
 800c770:	0800e348 	.word	0x0800e348
 800c774:	0800e320 	.word	0x0800e320
 800c778:	7ca00000 	.word	0x7ca00000
 800c77c:	7ff00000 	.word	0x7ff00000
 800c780:	7fefffff 	.word	0x7fefffff
 800c784:	f012 0110 	ands.w	r1, r2, #16
 800c788:	bf18      	it	ne
 800c78a:	216a      	movne	r1, #106	@ 0x6a
 800c78c:	9106      	str	r1, [sp, #24]
 800c78e:	ec4b ab17 	vmov	d7, sl, fp
 800c792:	49af      	ldr	r1, [pc, #700]	@ (800ca50 <_strtod_l+0x860>)
 800c794:	2000      	movs	r0, #0
 800c796:	07d6      	lsls	r6, r2, #31
 800c798:	d504      	bpl.n	800c7a4 <_strtod_l+0x5b4>
 800c79a:	ed91 6b00 	vldr	d6, [r1]
 800c79e:	2001      	movs	r0, #1
 800c7a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7a4:	1052      	asrs	r2, r2, #1
 800c7a6:	f101 0108 	add.w	r1, r1, #8
 800c7aa:	d1f4      	bne.n	800c796 <_strtod_l+0x5a6>
 800c7ac:	b108      	cbz	r0, 800c7b2 <_strtod_l+0x5c2>
 800c7ae:	ec5b ab17 	vmov	sl, fp, d7
 800c7b2:	9a06      	ldr	r2, [sp, #24]
 800c7b4:	b1b2      	cbz	r2, 800c7e4 <_strtod_l+0x5f4>
 800c7b6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c7ba:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	4658      	mov	r0, fp
 800c7c2:	dd0f      	ble.n	800c7e4 <_strtod_l+0x5f4>
 800c7c4:	2a1f      	cmp	r2, #31
 800c7c6:	dd55      	ble.n	800c874 <_strtod_l+0x684>
 800c7c8:	2a34      	cmp	r2, #52	@ 0x34
 800c7ca:	bfde      	ittt	le
 800c7cc:	f04f 32ff 	movle.w	r2, #4294967295
 800c7d0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c7d4:	408a      	lslle	r2, r1
 800c7d6:	f04f 0a00 	mov.w	sl, #0
 800c7da:	bfcc      	ite	gt
 800c7dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c7e0:	ea02 0b00 	andle.w	fp, r2, r0
 800c7e4:	ec4b ab17 	vmov	d7, sl, fp
 800c7e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f0:	d0a8      	beq.n	800c744 <_strtod_l+0x554>
 800c7f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7f4:	9805      	ldr	r0, [sp, #20]
 800c7f6:	f8cd 9000 	str.w	r9, [sp]
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	f7ff f8de 	bl	800b9bc <__s2b>
 800c800:	9007      	str	r0, [sp, #28]
 800c802:	2800      	cmp	r0, #0
 800c804:	f43f af0a 	beq.w	800c61c <_strtod_l+0x42c>
 800c808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c80a:	1b3f      	subs	r7, r7, r4
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bfb4      	ite	lt
 800c810:	463b      	movlt	r3, r7
 800c812:	2300      	movge	r3, #0
 800c814:	930a      	str	r3, [sp, #40]	@ 0x28
 800c816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c818:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800ca40 <_strtod_l+0x850>
 800c81c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c820:	2400      	movs	r4, #0
 800c822:	930d      	str	r3, [sp, #52]	@ 0x34
 800c824:	4625      	mov	r5, r4
 800c826:	9b07      	ldr	r3, [sp, #28]
 800c828:	9805      	ldr	r0, [sp, #20]
 800c82a:	6859      	ldr	r1, [r3, #4]
 800c82c:	f7ff f81e 	bl	800b86c <_Balloc>
 800c830:	4606      	mov	r6, r0
 800c832:	2800      	cmp	r0, #0
 800c834:	f43f aef6 	beq.w	800c624 <_strtod_l+0x434>
 800c838:	9b07      	ldr	r3, [sp, #28]
 800c83a:	691a      	ldr	r2, [r3, #16]
 800c83c:	ec4b ab19 	vmov	d9, sl, fp
 800c840:	3202      	adds	r2, #2
 800c842:	f103 010c 	add.w	r1, r3, #12
 800c846:	0092      	lsls	r2, r2, #2
 800c848:	300c      	adds	r0, #12
 800c84a:	f000 fd2d 	bl	800d2a8 <memcpy>
 800c84e:	eeb0 0b49 	vmov.f64	d0, d9
 800c852:	9805      	ldr	r0, [sp, #20]
 800c854:	aa14      	add	r2, sp, #80	@ 0x50
 800c856:	a913      	add	r1, sp, #76	@ 0x4c
 800c858:	f7ff fbe4 	bl	800c024 <__d2b>
 800c85c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c85e:	2800      	cmp	r0, #0
 800c860:	f43f aee0 	beq.w	800c624 <_strtod_l+0x434>
 800c864:	9805      	ldr	r0, [sp, #20]
 800c866:	2101      	movs	r1, #1
 800c868:	f7ff f93e 	bl	800bae8 <__i2b>
 800c86c:	4605      	mov	r5, r0
 800c86e:	b940      	cbnz	r0, 800c882 <_strtod_l+0x692>
 800c870:	2500      	movs	r5, #0
 800c872:	e6d7      	b.n	800c624 <_strtod_l+0x434>
 800c874:	f04f 31ff 	mov.w	r1, #4294967295
 800c878:	fa01 f202 	lsl.w	r2, r1, r2
 800c87c:	ea02 0a0a 	and.w	sl, r2, sl
 800c880:	e7b0      	b.n	800c7e4 <_strtod_l+0x5f4>
 800c882:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c884:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c886:	2f00      	cmp	r7, #0
 800c888:	bfab      	itete	ge
 800c88a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c88c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c88e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c892:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c896:	bfac      	ite	ge
 800c898:	eb07 0903 	addge.w	r9, r7, r3
 800c89c:	eba3 0807 	sublt.w	r8, r3, r7
 800c8a0:	9b06      	ldr	r3, [sp, #24]
 800c8a2:	1aff      	subs	r7, r7, r3
 800c8a4:	4417      	add	r7, r2
 800c8a6:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c8aa:	4a6a      	ldr	r2, [pc, #424]	@ (800ca54 <_strtod_l+0x864>)
 800c8ac:	3f01      	subs	r7, #1
 800c8ae:	4297      	cmp	r7, r2
 800c8b0:	da51      	bge.n	800c956 <_strtod_l+0x766>
 800c8b2:	1bd1      	subs	r1, r2, r7
 800c8b4:	291f      	cmp	r1, #31
 800c8b6:	eba3 0301 	sub.w	r3, r3, r1
 800c8ba:	f04f 0201 	mov.w	r2, #1
 800c8be:	dc3e      	bgt.n	800c93e <_strtod_l+0x74e>
 800c8c0:	408a      	lsls	r2, r1
 800c8c2:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8c8:	eb09 0703 	add.w	r7, r9, r3
 800c8cc:	4498      	add	r8, r3
 800c8ce:	9b06      	ldr	r3, [sp, #24]
 800c8d0:	45b9      	cmp	r9, r7
 800c8d2:	4498      	add	r8, r3
 800c8d4:	464b      	mov	r3, r9
 800c8d6:	bfa8      	it	ge
 800c8d8:	463b      	movge	r3, r7
 800c8da:	4543      	cmp	r3, r8
 800c8dc:	bfa8      	it	ge
 800c8de:	4643      	movge	r3, r8
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfc2      	ittt	gt
 800c8e4:	1aff      	subgt	r7, r7, r3
 800c8e6:	eba8 0803 	subgt.w	r8, r8, r3
 800c8ea:	eba9 0903 	subgt.w	r9, r9, r3
 800c8ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dd16      	ble.n	800c922 <_strtod_l+0x732>
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	9805      	ldr	r0, [sp, #20]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	f7ff f9ad 	bl	800bc58 <__pow5mult>
 800c8fe:	4605      	mov	r5, r0
 800c900:	2800      	cmp	r0, #0
 800c902:	d0b5      	beq.n	800c870 <_strtod_l+0x680>
 800c904:	4601      	mov	r1, r0
 800c906:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c908:	9805      	ldr	r0, [sp, #20]
 800c90a:	f7ff f903 	bl	800bb14 <__multiply>
 800c90e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c910:	2800      	cmp	r0, #0
 800c912:	f43f ae87 	beq.w	800c624 <_strtod_l+0x434>
 800c916:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c918:	9805      	ldr	r0, [sp, #20]
 800c91a:	f7fe ffe7 	bl	800b8ec <_Bfree>
 800c91e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c920:	9312      	str	r3, [sp, #72]	@ 0x48
 800c922:	2f00      	cmp	r7, #0
 800c924:	dc1b      	bgt.n	800c95e <_strtod_l+0x76e>
 800c926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c928:	2b00      	cmp	r3, #0
 800c92a:	dd21      	ble.n	800c970 <_strtod_l+0x780>
 800c92c:	4631      	mov	r1, r6
 800c92e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c930:	9805      	ldr	r0, [sp, #20]
 800c932:	f7ff f991 	bl	800bc58 <__pow5mult>
 800c936:	4606      	mov	r6, r0
 800c938:	b9d0      	cbnz	r0, 800c970 <_strtod_l+0x780>
 800c93a:	2600      	movs	r6, #0
 800c93c:	e672      	b.n	800c624 <_strtod_l+0x434>
 800c93e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c942:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c946:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c94a:	37e2      	adds	r7, #226	@ 0xe2
 800c94c:	fa02 f107 	lsl.w	r1, r2, r7
 800c950:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c952:	920c      	str	r2, [sp, #48]	@ 0x30
 800c954:	e7b8      	b.n	800c8c8 <_strtod_l+0x6d8>
 800c956:	2200      	movs	r2, #0
 800c958:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c95a:	2201      	movs	r2, #1
 800c95c:	e7f9      	b.n	800c952 <_strtod_l+0x762>
 800c95e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c960:	9805      	ldr	r0, [sp, #20]
 800c962:	463a      	mov	r2, r7
 800c964:	f7ff f9d2 	bl	800bd0c <__lshift>
 800c968:	9012      	str	r0, [sp, #72]	@ 0x48
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d1db      	bne.n	800c926 <_strtod_l+0x736>
 800c96e:	e659      	b.n	800c624 <_strtod_l+0x434>
 800c970:	f1b8 0f00 	cmp.w	r8, #0
 800c974:	dd07      	ble.n	800c986 <_strtod_l+0x796>
 800c976:	4631      	mov	r1, r6
 800c978:	9805      	ldr	r0, [sp, #20]
 800c97a:	4642      	mov	r2, r8
 800c97c:	f7ff f9c6 	bl	800bd0c <__lshift>
 800c980:	4606      	mov	r6, r0
 800c982:	2800      	cmp	r0, #0
 800c984:	d0d9      	beq.n	800c93a <_strtod_l+0x74a>
 800c986:	f1b9 0f00 	cmp.w	r9, #0
 800c98a:	dd08      	ble.n	800c99e <_strtod_l+0x7ae>
 800c98c:	4629      	mov	r1, r5
 800c98e:	9805      	ldr	r0, [sp, #20]
 800c990:	464a      	mov	r2, r9
 800c992:	f7ff f9bb 	bl	800bd0c <__lshift>
 800c996:	4605      	mov	r5, r0
 800c998:	2800      	cmp	r0, #0
 800c99a:	f43f ae43 	beq.w	800c624 <_strtod_l+0x434>
 800c99e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c9a0:	9805      	ldr	r0, [sp, #20]
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	f7ff fa3a 	bl	800be1c <__mdiff>
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	f43f ae3a 	beq.w	800c624 <_strtod_l+0x434>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c9b6:	60c3      	str	r3, [r0, #12]
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	f7ff fa13 	bl	800bde4 <__mcmp>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	da4c      	bge.n	800ca5c <_strtod_l+0x86c>
 800c9c2:	ea58 080a 	orrs.w	r8, r8, sl
 800c9c6:	d172      	bne.n	800caae <_strtod_l+0x8be>
 800c9c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d16e      	bne.n	800caae <_strtod_l+0x8be>
 800c9d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9d4:	0d1b      	lsrs	r3, r3, #20
 800c9d6:	051b      	lsls	r3, r3, #20
 800c9d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c9dc:	d967      	bls.n	800caae <_strtod_l+0x8be>
 800c9de:	6963      	ldr	r3, [r4, #20]
 800c9e0:	b913      	cbnz	r3, 800c9e8 <_strtod_l+0x7f8>
 800c9e2:	6923      	ldr	r3, [r4, #16]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	dd62      	ble.n	800caae <_strtod_l+0x8be>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	9805      	ldr	r0, [sp, #20]
 800c9ee:	f7ff f98d 	bl	800bd0c <__lshift>
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	f7ff f9f5 	bl	800bde4 <__mcmp>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	dd57      	ble.n	800caae <_strtod_l+0x8be>
 800c9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca02:	9a06      	ldr	r2, [sp, #24]
 800ca04:	0d1b      	lsrs	r3, r3, #20
 800ca06:	051b      	lsls	r3, r3, #20
 800ca08:	2a00      	cmp	r2, #0
 800ca0a:	d06e      	beq.n	800caea <_strtod_l+0x8fa>
 800ca0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca10:	d86b      	bhi.n	800caea <_strtod_l+0x8fa>
 800ca12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca16:	f67f ae99 	bls.w	800c74c <_strtod_l+0x55c>
 800ca1a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800ca48 <_strtod_l+0x858>
 800ca1e:	ec4b ab16 	vmov	d6, sl, fp
 800ca22:	4b0d      	ldr	r3, [pc, #52]	@ (800ca58 <_strtod_l+0x868>)
 800ca24:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ca28:	ee17 2a90 	vmov	r2, s15
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	ec5b ab17 	vmov	sl, fp, d7
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f47f ae01 	bne.w	800c63a <_strtod_l+0x44a>
 800ca38:	9a05      	ldr	r2, [sp, #20]
 800ca3a:	2322      	movs	r3, #34	@ 0x22
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	e5fc      	b.n	800c63a <_strtod_l+0x44a>
 800ca40:	ffc00000 	.word	0xffc00000
 800ca44:	41dfffff 	.word	0x41dfffff
 800ca48:	00000000 	.word	0x00000000
 800ca4c:	39500000 	.word	0x39500000
 800ca50:	0800e438 	.word	0x0800e438
 800ca54:	fffffc02 	.word	0xfffffc02
 800ca58:	7ff00000 	.word	0x7ff00000
 800ca5c:	46d9      	mov	r9, fp
 800ca5e:	d15d      	bne.n	800cb1c <_strtod_l+0x92c>
 800ca60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca64:	f1b8 0f00 	cmp.w	r8, #0
 800ca68:	d02a      	beq.n	800cac0 <_strtod_l+0x8d0>
 800ca6a:	4aa9      	ldr	r2, [pc, #676]	@ (800cd10 <_strtod_l+0xb20>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d12a      	bne.n	800cac6 <_strtod_l+0x8d6>
 800ca70:	9b06      	ldr	r3, [sp, #24]
 800ca72:	4652      	mov	r2, sl
 800ca74:	b1fb      	cbz	r3, 800cab6 <_strtod_l+0x8c6>
 800ca76:	4ba7      	ldr	r3, [pc, #668]	@ (800cd14 <_strtod_l+0xb24>)
 800ca78:	ea0b 0303 	and.w	r3, fp, r3
 800ca7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ca80:	f04f 31ff 	mov.w	r1, #4294967295
 800ca84:	d81a      	bhi.n	800cabc <_strtod_l+0x8cc>
 800ca86:	0d1b      	lsrs	r3, r3, #20
 800ca88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d118      	bne.n	800cac6 <_strtod_l+0x8d6>
 800ca94:	4ba0      	ldr	r3, [pc, #640]	@ (800cd18 <_strtod_l+0xb28>)
 800ca96:	4599      	cmp	r9, r3
 800ca98:	d102      	bne.n	800caa0 <_strtod_l+0x8b0>
 800ca9a:	3201      	adds	r2, #1
 800ca9c:	f43f adc2 	beq.w	800c624 <_strtod_l+0x434>
 800caa0:	4b9c      	ldr	r3, [pc, #624]	@ (800cd14 <_strtod_l+0xb24>)
 800caa2:	ea09 0303 	and.w	r3, r9, r3
 800caa6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800caaa:	f04f 0a00 	mov.w	sl, #0
 800caae:	9b06      	ldr	r3, [sp, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1b2      	bne.n	800ca1a <_strtod_l+0x82a>
 800cab4:	e5c1      	b.n	800c63a <_strtod_l+0x44a>
 800cab6:	f04f 33ff 	mov.w	r3, #4294967295
 800caba:	e7e9      	b.n	800ca90 <_strtod_l+0x8a0>
 800cabc:	460b      	mov	r3, r1
 800cabe:	e7e7      	b.n	800ca90 <_strtod_l+0x8a0>
 800cac0:	ea53 030a 	orrs.w	r3, r3, sl
 800cac4:	d09b      	beq.n	800c9fe <_strtod_l+0x80e>
 800cac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cac8:	b1c3      	cbz	r3, 800cafc <_strtod_l+0x90c>
 800caca:	ea13 0f09 	tst.w	r3, r9
 800cace:	d0ee      	beq.n	800caae <_strtod_l+0x8be>
 800cad0:	9a06      	ldr	r2, [sp, #24]
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	f1b8 0f00 	cmp.w	r8, #0
 800cada:	d013      	beq.n	800cb04 <_strtod_l+0x914>
 800cadc:	f7ff fb6d 	bl	800c1ba <sulp>
 800cae0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800cae4:	ec5b ab17 	vmov	sl, fp, d7
 800cae8:	e7e1      	b.n	800caae <_strtod_l+0x8be>
 800caea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800caee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800caf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800caf6:	f04f 3aff 	mov.w	sl, #4294967295
 800cafa:	e7d8      	b.n	800caae <_strtod_l+0x8be>
 800cafc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cafe:	ea13 0f0a 	tst.w	r3, sl
 800cb02:	e7e4      	b.n	800cace <_strtod_l+0x8de>
 800cb04:	f7ff fb59 	bl	800c1ba <sulp>
 800cb08:	ee39 0b40 	vsub.f64	d0, d9, d0
 800cb0c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb14:	ec5b ab10 	vmov	sl, fp, d0
 800cb18:	d1c9      	bne.n	800caae <_strtod_l+0x8be>
 800cb1a:	e617      	b.n	800c74c <_strtod_l+0x55c>
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7ff fad8 	bl	800c0d4 <__ratio>
 800cb24:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800cb28:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb30:	d85d      	bhi.n	800cbee <_strtod_l+0x9fe>
 800cb32:	f1b8 0f00 	cmp.w	r8, #0
 800cb36:	d164      	bne.n	800cc02 <_strtod_l+0xa12>
 800cb38:	f1ba 0f00 	cmp.w	sl, #0
 800cb3c:	d14b      	bne.n	800cbd6 <_strtod_l+0x9e6>
 800cb3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb42:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d160      	bne.n	800cc0c <_strtod_l+0xa1c>
 800cb4a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800cb4e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800cb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb56:	d401      	bmi.n	800cb5c <_strtod_l+0x96c>
 800cb58:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cb5c:	eeb1 ab48 	vneg.f64	d10, d8
 800cb60:	486c      	ldr	r0, [pc, #432]	@ (800cd14 <_strtod_l+0xb24>)
 800cb62:	496e      	ldr	r1, [pc, #440]	@ (800cd1c <_strtod_l+0xb2c>)
 800cb64:	ea09 0700 	and.w	r7, r9, r0
 800cb68:	428f      	cmp	r7, r1
 800cb6a:	ec53 2b1a 	vmov	r2, r3, d10
 800cb6e:	d17d      	bne.n	800cc6c <_strtod_l+0xa7c>
 800cb70:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800cb74:	ec4b ab1c 	vmov	d12, sl, fp
 800cb78:	eeb0 0b4c 	vmov.f64	d0, d12
 800cb7c:	f7ff f9e2 	bl	800bf44 <__ulp>
 800cb80:	4864      	ldr	r0, [pc, #400]	@ (800cd14 <_strtod_l+0xb24>)
 800cb82:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800cb86:	ee1c 3a90 	vmov	r3, s25
 800cb8a:	4a65      	ldr	r2, [pc, #404]	@ (800cd20 <_strtod_l+0xb30>)
 800cb8c:	ea03 0100 	and.w	r1, r3, r0
 800cb90:	4291      	cmp	r1, r2
 800cb92:	ec5b ab1c 	vmov	sl, fp, d12
 800cb96:	d93c      	bls.n	800cc12 <_strtod_l+0xa22>
 800cb98:	ee19 2a90 	vmov	r2, s19
 800cb9c:	4b5e      	ldr	r3, [pc, #376]	@ (800cd18 <_strtod_l+0xb28>)
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d104      	bne.n	800cbac <_strtod_l+0x9bc>
 800cba2:	ee19 3a10 	vmov	r3, s18
 800cba6:	3301      	adds	r3, #1
 800cba8:	f43f ad3c 	beq.w	800c624 <_strtod_l+0x434>
 800cbac:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800cd18 <_strtod_l+0xb28>
 800cbb0:	f04f 3aff 	mov.w	sl, #4294967295
 800cbb4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cbb6:	9805      	ldr	r0, [sp, #20]
 800cbb8:	f7fe fe98 	bl	800b8ec <_Bfree>
 800cbbc:	9805      	ldr	r0, [sp, #20]
 800cbbe:	4631      	mov	r1, r6
 800cbc0:	f7fe fe94 	bl	800b8ec <_Bfree>
 800cbc4:	9805      	ldr	r0, [sp, #20]
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	f7fe fe90 	bl	800b8ec <_Bfree>
 800cbcc:	9805      	ldr	r0, [sp, #20]
 800cbce:	4621      	mov	r1, r4
 800cbd0:	f7fe fe8c 	bl	800b8ec <_Bfree>
 800cbd4:	e627      	b.n	800c826 <_strtod_l+0x636>
 800cbd6:	f1ba 0f01 	cmp.w	sl, #1
 800cbda:	d103      	bne.n	800cbe4 <_strtod_l+0x9f4>
 800cbdc:	f1bb 0f00 	cmp.w	fp, #0
 800cbe0:	f43f adb4 	beq.w	800c74c <_strtod_l+0x55c>
 800cbe4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cbe8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cbec:	e7b8      	b.n	800cb60 <_strtod_l+0x970>
 800cbee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800cbf2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cbf6:	f1b8 0f00 	cmp.w	r8, #0
 800cbfa:	d0af      	beq.n	800cb5c <_strtod_l+0x96c>
 800cbfc:	eeb0 ab48 	vmov.f64	d10, d8
 800cc00:	e7ae      	b.n	800cb60 <_strtod_l+0x970>
 800cc02:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800cc06:	eeb0 8b4a 	vmov.f64	d8, d10
 800cc0a:	e7a9      	b.n	800cb60 <_strtod_l+0x970>
 800cc0c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cc10:	e7a6      	b.n	800cb60 <_strtod_l+0x970>
 800cc12:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc16:	9b06      	ldr	r3, [sp, #24]
 800cc18:	46d9      	mov	r9, fp
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1ca      	bne.n	800cbb4 <_strtod_l+0x9c4>
 800cc1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc22:	0d1b      	lsrs	r3, r3, #20
 800cc24:	051b      	lsls	r3, r3, #20
 800cc26:	429f      	cmp	r7, r3
 800cc28:	d1c4      	bne.n	800cbb4 <_strtod_l+0x9c4>
 800cc2a:	ec51 0b18 	vmov	r0, r1, d8
 800cc2e:	f7f3 fd83 	bl	8000738 <__aeabi_d2lz>
 800cc32:	f7f3 fd3b 	bl	80006ac <__aeabi_l2d>
 800cc36:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800cc3a:	ec41 0b17 	vmov	d7, r0, r1
 800cc3e:	ea49 090a 	orr.w	r9, r9, sl
 800cc42:	ea59 0908 	orrs.w	r9, r9, r8
 800cc46:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cc4a:	d03c      	beq.n	800ccc6 <_strtod_l+0xad6>
 800cc4c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ccf8 <_strtod_l+0xb08>
 800cc50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc58:	f53f acef 	bmi.w	800c63a <_strtod_l+0x44a>
 800cc5c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800cd00 <_strtod_l+0xb10>
 800cc60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc68:	dda4      	ble.n	800cbb4 <_strtod_l+0x9c4>
 800cc6a:	e4e6      	b.n	800c63a <_strtod_l+0x44a>
 800cc6c:	9906      	ldr	r1, [sp, #24]
 800cc6e:	b1e1      	cbz	r1, 800ccaa <_strtod_l+0xaba>
 800cc70:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800cc74:	d819      	bhi.n	800ccaa <_strtod_l+0xaba>
 800cc76:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7e:	d811      	bhi.n	800cca4 <_strtod_l+0xab4>
 800cc80:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800cc84:	ee18 3a10 	vmov	r3, s16
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	bf38      	it	cc
 800cc8c:	2301      	movcc	r3, #1
 800cc8e:	ee08 3a10 	vmov	s16, r3
 800cc92:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800cc96:	f1b8 0f00 	cmp.w	r8, #0
 800cc9a:	d111      	bne.n	800ccc0 <_strtod_l+0xad0>
 800cc9c:	eeb1 7b48 	vneg.f64	d7, d8
 800cca0:	ec53 2b17 	vmov	r2, r3, d7
 800cca4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800cca8:	1bcb      	subs	r3, r1, r7
 800ccaa:	eeb0 0b49 	vmov.f64	d0, d9
 800ccae:	ec43 2b1a 	vmov	d10, r2, r3
 800ccb2:	f7ff f947 	bl	800bf44 <__ulp>
 800ccb6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ccba:	ec5b ab19 	vmov	sl, fp, d9
 800ccbe:	e7aa      	b.n	800cc16 <_strtod_l+0xa26>
 800ccc0:	eeb0 7b48 	vmov.f64	d7, d8
 800ccc4:	e7ec      	b.n	800cca0 <_strtod_l+0xab0>
 800ccc6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800cd08 <_strtod_l+0xb18>
 800ccca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	f57f af6f 	bpl.w	800cbb4 <_strtod_l+0x9c4>
 800ccd6:	e4b0      	b.n	800c63a <_strtod_l+0x44a>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	9308      	str	r3, [sp, #32]
 800ccdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	f7ff bac4 	b.w	800c26e <_strtod_l+0x7e>
 800cce6:	2a65      	cmp	r2, #101	@ 0x65
 800cce8:	f43f abbf 	beq.w	800c46a <_strtod_l+0x27a>
 800ccec:	2a45      	cmp	r2, #69	@ 0x45
 800ccee:	f43f abbc 	beq.w	800c46a <_strtod_l+0x27a>
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	f7ff bbf4 	b.w	800c4e0 <_strtod_l+0x2f0>
 800ccf8:	94a03595 	.word	0x94a03595
 800ccfc:	3fdfffff 	.word	0x3fdfffff
 800cd00:	35afe535 	.word	0x35afe535
 800cd04:	3fe00000 	.word	0x3fe00000
 800cd08:	94a03595 	.word	0x94a03595
 800cd0c:	3fcfffff 	.word	0x3fcfffff
 800cd10:	000fffff 	.word	0x000fffff
 800cd14:	7ff00000 	.word	0x7ff00000
 800cd18:	7fefffff 	.word	0x7fefffff
 800cd1c:	7fe00000 	.word	0x7fe00000
 800cd20:	7c9fffff 	.word	0x7c9fffff

0800cd24 <_strtod_r>:
 800cd24:	4b01      	ldr	r3, [pc, #4]	@ (800cd2c <_strtod_r+0x8>)
 800cd26:	f7ff ba63 	b.w	800c1f0 <_strtod_l>
 800cd2a:	bf00      	nop
 800cd2c:	2400006c 	.word	0x2400006c

0800cd30 <_strtol_l.isra.0>:
 800cd30:	2b24      	cmp	r3, #36	@ 0x24
 800cd32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd36:	4686      	mov	lr, r0
 800cd38:	4690      	mov	r8, r2
 800cd3a:	d801      	bhi.n	800cd40 <_strtol_l.isra.0+0x10>
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d106      	bne.n	800cd4e <_strtol_l.isra.0+0x1e>
 800cd40:	f7fd fe78 	bl	800aa34 <__errno>
 800cd44:	2316      	movs	r3, #22
 800cd46:	6003      	str	r3, [r0, #0]
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd4e:	4834      	ldr	r0, [pc, #208]	@ (800ce20 <_strtol_l.isra.0+0xf0>)
 800cd50:	460d      	mov	r5, r1
 800cd52:	462a      	mov	r2, r5
 800cd54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd58:	5d06      	ldrb	r6, [r0, r4]
 800cd5a:	f016 0608 	ands.w	r6, r6, #8
 800cd5e:	d1f8      	bne.n	800cd52 <_strtol_l.isra.0+0x22>
 800cd60:	2c2d      	cmp	r4, #45	@ 0x2d
 800cd62:	d110      	bne.n	800cd86 <_strtol_l.isra.0+0x56>
 800cd64:	782c      	ldrb	r4, [r5, #0]
 800cd66:	2601      	movs	r6, #1
 800cd68:	1c95      	adds	r5, r2, #2
 800cd6a:	f033 0210 	bics.w	r2, r3, #16
 800cd6e:	d115      	bne.n	800cd9c <_strtol_l.isra.0+0x6c>
 800cd70:	2c30      	cmp	r4, #48	@ 0x30
 800cd72:	d10d      	bne.n	800cd90 <_strtol_l.isra.0+0x60>
 800cd74:	782a      	ldrb	r2, [r5, #0]
 800cd76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd7a:	2a58      	cmp	r2, #88	@ 0x58
 800cd7c:	d108      	bne.n	800cd90 <_strtol_l.isra.0+0x60>
 800cd7e:	786c      	ldrb	r4, [r5, #1]
 800cd80:	3502      	adds	r5, #2
 800cd82:	2310      	movs	r3, #16
 800cd84:	e00a      	b.n	800cd9c <_strtol_l.isra.0+0x6c>
 800cd86:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd88:	bf04      	itt	eq
 800cd8a:	782c      	ldrbeq	r4, [r5, #0]
 800cd8c:	1c95      	addeq	r5, r2, #2
 800cd8e:	e7ec      	b.n	800cd6a <_strtol_l.isra.0+0x3a>
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1f6      	bne.n	800cd82 <_strtol_l.isra.0+0x52>
 800cd94:	2c30      	cmp	r4, #48	@ 0x30
 800cd96:	bf14      	ite	ne
 800cd98:	230a      	movne	r3, #10
 800cd9a:	2308      	moveq	r3, #8
 800cd9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cda0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cda4:	2200      	movs	r2, #0
 800cda6:	fbbc f9f3 	udiv	r9, ip, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	fb03 ca19 	mls	sl, r3, r9, ip
 800cdb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cdb4:	2f09      	cmp	r7, #9
 800cdb6:	d80f      	bhi.n	800cdd8 <_strtol_l.isra.0+0xa8>
 800cdb8:	463c      	mov	r4, r7
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	dd1b      	ble.n	800cdf6 <_strtol_l.isra.0+0xc6>
 800cdbe:	1c57      	adds	r7, r2, #1
 800cdc0:	d007      	beq.n	800cdd2 <_strtol_l.isra.0+0xa2>
 800cdc2:	4581      	cmp	r9, r0
 800cdc4:	d314      	bcc.n	800cdf0 <_strtol_l.isra.0+0xc0>
 800cdc6:	d101      	bne.n	800cdcc <_strtol_l.isra.0+0x9c>
 800cdc8:	45a2      	cmp	sl, r4
 800cdca:	db11      	blt.n	800cdf0 <_strtol_l.isra.0+0xc0>
 800cdcc:	fb00 4003 	mla	r0, r0, r3, r4
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdd6:	e7eb      	b.n	800cdb0 <_strtol_l.isra.0+0x80>
 800cdd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cddc:	2f19      	cmp	r7, #25
 800cdde:	d801      	bhi.n	800cde4 <_strtol_l.isra.0+0xb4>
 800cde0:	3c37      	subs	r4, #55	@ 0x37
 800cde2:	e7ea      	b.n	800cdba <_strtol_l.isra.0+0x8a>
 800cde4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cde8:	2f19      	cmp	r7, #25
 800cdea:	d804      	bhi.n	800cdf6 <_strtol_l.isra.0+0xc6>
 800cdec:	3c57      	subs	r4, #87	@ 0x57
 800cdee:	e7e4      	b.n	800cdba <_strtol_l.isra.0+0x8a>
 800cdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf4:	e7ed      	b.n	800cdd2 <_strtol_l.isra.0+0xa2>
 800cdf6:	1c53      	adds	r3, r2, #1
 800cdf8:	d108      	bne.n	800ce0c <_strtol_l.isra.0+0xdc>
 800cdfa:	2322      	movs	r3, #34	@ 0x22
 800cdfc:	f8ce 3000 	str.w	r3, [lr]
 800ce00:	4660      	mov	r0, ip
 800ce02:	f1b8 0f00 	cmp.w	r8, #0
 800ce06:	d0a0      	beq.n	800cd4a <_strtol_l.isra.0+0x1a>
 800ce08:	1e69      	subs	r1, r5, #1
 800ce0a:	e006      	b.n	800ce1a <_strtol_l.isra.0+0xea>
 800ce0c:	b106      	cbz	r6, 800ce10 <_strtol_l.isra.0+0xe0>
 800ce0e:	4240      	negs	r0, r0
 800ce10:	f1b8 0f00 	cmp.w	r8, #0
 800ce14:	d099      	beq.n	800cd4a <_strtol_l.isra.0+0x1a>
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	d1f6      	bne.n	800ce08 <_strtol_l.isra.0+0xd8>
 800ce1a:	f8c8 1000 	str.w	r1, [r8]
 800ce1e:	e794      	b.n	800cd4a <_strtol_l.isra.0+0x1a>
 800ce20:	0800e461 	.word	0x0800e461

0800ce24 <_strtol_r>:
 800ce24:	f7ff bf84 	b.w	800cd30 <_strtol_l.isra.0>

0800ce28 <__ssputs_r>:
 800ce28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce2c:	688e      	ldr	r6, [r1, #8]
 800ce2e:	461f      	mov	r7, r3
 800ce30:	42be      	cmp	r6, r7
 800ce32:	680b      	ldr	r3, [r1, #0]
 800ce34:	4682      	mov	sl, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	4690      	mov	r8, r2
 800ce3a:	d82d      	bhi.n	800ce98 <__ssputs_r+0x70>
 800ce3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce44:	d026      	beq.n	800ce94 <__ssputs_r+0x6c>
 800ce46:	6965      	ldr	r5, [r4, #20]
 800ce48:	6909      	ldr	r1, [r1, #16]
 800ce4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce4e:	eba3 0901 	sub.w	r9, r3, r1
 800ce52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce56:	1c7b      	adds	r3, r7, #1
 800ce58:	444b      	add	r3, r9
 800ce5a:	106d      	asrs	r5, r5, #1
 800ce5c:	429d      	cmp	r5, r3
 800ce5e:	bf38      	it	cc
 800ce60:	461d      	movcc	r5, r3
 800ce62:	0553      	lsls	r3, r2, #21
 800ce64:	d527      	bpl.n	800ceb6 <__ssputs_r+0x8e>
 800ce66:	4629      	mov	r1, r5
 800ce68:	f7fe fc74 	bl	800b754 <_malloc_r>
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	b360      	cbz	r0, 800ceca <__ssputs_r+0xa2>
 800ce70:	6921      	ldr	r1, [r4, #16]
 800ce72:	464a      	mov	r2, r9
 800ce74:	f000 fa18 	bl	800d2a8 <memcpy>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce82:	81a3      	strh	r3, [r4, #12]
 800ce84:	6126      	str	r6, [r4, #16]
 800ce86:	6165      	str	r5, [r4, #20]
 800ce88:	444e      	add	r6, r9
 800ce8a:	eba5 0509 	sub.w	r5, r5, r9
 800ce8e:	6026      	str	r6, [r4, #0]
 800ce90:	60a5      	str	r5, [r4, #8]
 800ce92:	463e      	mov	r6, r7
 800ce94:	42be      	cmp	r6, r7
 800ce96:	d900      	bls.n	800ce9a <__ssputs_r+0x72>
 800ce98:	463e      	mov	r6, r7
 800ce9a:	6820      	ldr	r0, [r4, #0]
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	4641      	mov	r1, r8
 800cea0:	f000 f9c6 	bl	800d230 <memmove>
 800cea4:	68a3      	ldr	r3, [r4, #8]
 800cea6:	1b9b      	subs	r3, r3, r6
 800cea8:	60a3      	str	r3, [r4, #8]
 800ceaa:	6823      	ldr	r3, [r4, #0]
 800ceac:	4433      	add	r3, r6
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	f000 fd8b 	bl	800d9d2 <_realloc_r>
 800cebc:	4606      	mov	r6, r0
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d1e0      	bne.n	800ce84 <__ssputs_r+0x5c>
 800cec2:	6921      	ldr	r1, [r4, #16]
 800cec4:	4650      	mov	r0, sl
 800cec6:	f7fe fbd1 	bl	800b66c <_free_r>
 800ceca:	230c      	movs	r3, #12
 800cecc:	f8ca 3000 	str.w	r3, [sl]
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e7e9      	b.n	800ceb2 <__ssputs_r+0x8a>
	...

0800cee0 <_svfiprintf_r>:
 800cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	4698      	mov	r8, r3
 800cee6:	898b      	ldrh	r3, [r1, #12]
 800cee8:	061b      	lsls	r3, r3, #24
 800ceea:	b09d      	sub	sp, #116	@ 0x74
 800ceec:	4607      	mov	r7, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	d510      	bpl.n	800cf16 <_svfiprintf_r+0x36>
 800cef4:	690b      	ldr	r3, [r1, #16]
 800cef6:	b973      	cbnz	r3, 800cf16 <_svfiprintf_r+0x36>
 800cef8:	2140      	movs	r1, #64	@ 0x40
 800cefa:	f7fe fc2b 	bl	800b754 <_malloc_r>
 800cefe:	6028      	str	r0, [r5, #0]
 800cf00:	6128      	str	r0, [r5, #16]
 800cf02:	b930      	cbnz	r0, 800cf12 <_svfiprintf_r+0x32>
 800cf04:	230c      	movs	r3, #12
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	b01d      	add	sp, #116	@ 0x74
 800cf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf12:	2340      	movs	r3, #64	@ 0x40
 800cf14:	616b      	str	r3, [r5, #20]
 800cf16:	2300      	movs	r3, #0
 800cf18:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf1a:	2320      	movs	r3, #32
 800cf1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf20:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf24:	2330      	movs	r3, #48	@ 0x30
 800cf26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0c4 <_svfiprintf_r+0x1e4>
 800cf2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf2e:	f04f 0901 	mov.w	r9, #1
 800cf32:	4623      	mov	r3, r4
 800cf34:	469a      	mov	sl, r3
 800cf36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf3a:	b10a      	cbz	r2, 800cf40 <_svfiprintf_r+0x60>
 800cf3c:	2a25      	cmp	r2, #37	@ 0x25
 800cf3e:	d1f9      	bne.n	800cf34 <_svfiprintf_r+0x54>
 800cf40:	ebba 0b04 	subs.w	fp, sl, r4
 800cf44:	d00b      	beq.n	800cf5e <_svfiprintf_r+0x7e>
 800cf46:	465b      	mov	r3, fp
 800cf48:	4622      	mov	r2, r4
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff ff6b 	bl	800ce28 <__ssputs_r>
 800cf52:	3001      	adds	r0, #1
 800cf54:	f000 80a7 	beq.w	800d0a6 <_svfiprintf_r+0x1c6>
 800cf58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf5a:	445a      	add	r2, fp
 800cf5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 809f 	beq.w	800d0a6 <_svfiprintf_r+0x1c6>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf72:	f10a 0a01 	add.w	sl, sl, #1
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	9307      	str	r3, [sp, #28]
 800cf7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf80:	4654      	mov	r4, sl
 800cf82:	2205      	movs	r2, #5
 800cf84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf88:	484e      	ldr	r0, [pc, #312]	@ (800d0c4 <_svfiprintf_r+0x1e4>)
 800cf8a:	f7f3 f9a9 	bl	80002e0 <memchr>
 800cf8e:	9a04      	ldr	r2, [sp, #16]
 800cf90:	b9d8      	cbnz	r0, 800cfca <_svfiprintf_r+0xea>
 800cf92:	06d0      	lsls	r0, r2, #27
 800cf94:	bf44      	itt	mi
 800cf96:	2320      	movmi	r3, #32
 800cf98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf9c:	0711      	lsls	r1, r2, #28
 800cf9e:	bf44      	itt	mi
 800cfa0:	232b      	movmi	r3, #43	@ 0x2b
 800cfa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfa6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfac:	d015      	beq.n	800cfda <_svfiprintf_r+0xfa>
 800cfae:	9a07      	ldr	r2, [sp, #28]
 800cfb0:	4654      	mov	r4, sl
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	f04f 0c0a 	mov.w	ip, #10
 800cfb8:	4621      	mov	r1, r4
 800cfba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfbe:	3b30      	subs	r3, #48	@ 0x30
 800cfc0:	2b09      	cmp	r3, #9
 800cfc2:	d94b      	bls.n	800d05c <_svfiprintf_r+0x17c>
 800cfc4:	b1b0      	cbz	r0, 800cff4 <_svfiprintf_r+0x114>
 800cfc6:	9207      	str	r2, [sp, #28]
 800cfc8:	e014      	b.n	800cff4 <_svfiprintf_r+0x114>
 800cfca:	eba0 0308 	sub.w	r3, r0, r8
 800cfce:	fa09 f303 	lsl.w	r3, r9, r3
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	46a2      	mov	sl, r4
 800cfd8:	e7d2      	b.n	800cf80 <_svfiprintf_r+0xa0>
 800cfda:	9b03      	ldr	r3, [sp, #12]
 800cfdc:	1d19      	adds	r1, r3, #4
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	9103      	str	r1, [sp, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	bfbb      	ittet	lt
 800cfe6:	425b      	neglt	r3, r3
 800cfe8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfec:	9307      	strge	r3, [sp, #28]
 800cfee:	9307      	strlt	r3, [sp, #28]
 800cff0:	bfb8      	it	lt
 800cff2:	9204      	strlt	r2, [sp, #16]
 800cff4:	7823      	ldrb	r3, [r4, #0]
 800cff6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cff8:	d10a      	bne.n	800d010 <_svfiprintf_r+0x130>
 800cffa:	7863      	ldrb	r3, [r4, #1]
 800cffc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cffe:	d132      	bne.n	800d066 <_svfiprintf_r+0x186>
 800d000:	9b03      	ldr	r3, [sp, #12]
 800d002:	1d1a      	adds	r2, r3, #4
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	9203      	str	r2, [sp, #12]
 800d008:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d00c:	3402      	adds	r4, #2
 800d00e:	9305      	str	r3, [sp, #20]
 800d010:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0d4 <_svfiprintf_r+0x1f4>
 800d014:	7821      	ldrb	r1, [r4, #0]
 800d016:	2203      	movs	r2, #3
 800d018:	4650      	mov	r0, sl
 800d01a:	f7f3 f961 	bl	80002e0 <memchr>
 800d01e:	b138      	cbz	r0, 800d030 <_svfiprintf_r+0x150>
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	eba0 000a 	sub.w	r0, r0, sl
 800d026:	2240      	movs	r2, #64	@ 0x40
 800d028:	4082      	lsls	r2, r0
 800d02a:	4313      	orrs	r3, r2
 800d02c:	3401      	adds	r4, #1
 800d02e:	9304      	str	r3, [sp, #16]
 800d030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d034:	4824      	ldr	r0, [pc, #144]	@ (800d0c8 <_svfiprintf_r+0x1e8>)
 800d036:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d03a:	2206      	movs	r2, #6
 800d03c:	f7f3 f950 	bl	80002e0 <memchr>
 800d040:	2800      	cmp	r0, #0
 800d042:	d036      	beq.n	800d0b2 <_svfiprintf_r+0x1d2>
 800d044:	4b21      	ldr	r3, [pc, #132]	@ (800d0cc <_svfiprintf_r+0x1ec>)
 800d046:	bb1b      	cbnz	r3, 800d090 <_svfiprintf_r+0x1b0>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	3307      	adds	r3, #7
 800d04c:	f023 0307 	bic.w	r3, r3, #7
 800d050:	3308      	adds	r3, #8
 800d052:	9303      	str	r3, [sp, #12]
 800d054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d056:	4433      	add	r3, r6
 800d058:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05a:	e76a      	b.n	800cf32 <_svfiprintf_r+0x52>
 800d05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d060:	460c      	mov	r4, r1
 800d062:	2001      	movs	r0, #1
 800d064:	e7a8      	b.n	800cfb8 <_svfiprintf_r+0xd8>
 800d066:	2300      	movs	r3, #0
 800d068:	3401      	adds	r4, #1
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	4619      	mov	r1, r3
 800d06e:	f04f 0c0a 	mov.w	ip, #10
 800d072:	4620      	mov	r0, r4
 800d074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d078:	3a30      	subs	r2, #48	@ 0x30
 800d07a:	2a09      	cmp	r2, #9
 800d07c:	d903      	bls.n	800d086 <_svfiprintf_r+0x1a6>
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0c6      	beq.n	800d010 <_svfiprintf_r+0x130>
 800d082:	9105      	str	r1, [sp, #20]
 800d084:	e7c4      	b.n	800d010 <_svfiprintf_r+0x130>
 800d086:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08a:	4604      	mov	r4, r0
 800d08c:	2301      	movs	r3, #1
 800d08e:	e7f0      	b.n	800d072 <_svfiprintf_r+0x192>
 800d090:	ab03      	add	r3, sp, #12
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	462a      	mov	r2, r5
 800d096:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d0 <_svfiprintf_r+0x1f0>)
 800d098:	a904      	add	r1, sp, #16
 800d09a:	4638      	mov	r0, r7
 800d09c:	f7fc fda4 	bl	8009be8 <_printf_float>
 800d0a0:	1c42      	adds	r2, r0, #1
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	d1d6      	bne.n	800d054 <_svfiprintf_r+0x174>
 800d0a6:	89ab      	ldrh	r3, [r5, #12]
 800d0a8:	065b      	lsls	r3, r3, #25
 800d0aa:	f53f af2d 	bmi.w	800cf08 <_svfiprintf_r+0x28>
 800d0ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b0:	e72c      	b.n	800cf0c <_svfiprintf_r+0x2c>
 800d0b2:	ab03      	add	r3, sp, #12
 800d0b4:	9300      	str	r3, [sp, #0]
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4b05      	ldr	r3, [pc, #20]	@ (800d0d0 <_svfiprintf_r+0x1f0>)
 800d0ba:	a904      	add	r1, sp, #16
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f7fd f81b 	bl	800a0f8 <_printf_i>
 800d0c2:	e7ed      	b.n	800d0a0 <_svfiprintf_r+0x1c0>
 800d0c4:	0800e25d 	.word	0x0800e25d
 800d0c8:	0800e267 	.word	0x0800e267
 800d0cc:	08009be9 	.word	0x08009be9
 800d0d0:	0800ce29 	.word	0x0800ce29
 800d0d4:	0800e263 	.word	0x0800e263

0800d0d8 <__sflush_r>:
 800d0d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e0:	0716      	lsls	r6, r2, #28
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	d454      	bmi.n	800d192 <__sflush_r+0xba>
 800d0e8:	684b      	ldr	r3, [r1, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	dc02      	bgt.n	800d0f4 <__sflush_r+0x1c>
 800d0ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	dd48      	ble.n	800d186 <__sflush_r+0xae>
 800d0f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0f6:	2e00      	cmp	r6, #0
 800d0f8:	d045      	beq.n	800d186 <__sflush_r+0xae>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d100:	682f      	ldr	r7, [r5, #0]
 800d102:	6a21      	ldr	r1, [r4, #32]
 800d104:	602b      	str	r3, [r5, #0]
 800d106:	d030      	beq.n	800d16a <__sflush_r+0x92>
 800d108:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d10a:	89a3      	ldrh	r3, [r4, #12]
 800d10c:	0759      	lsls	r1, r3, #29
 800d10e:	d505      	bpl.n	800d11c <__sflush_r+0x44>
 800d110:	6863      	ldr	r3, [r4, #4]
 800d112:	1ad2      	subs	r2, r2, r3
 800d114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d116:	b10b      	cbz	r3, 800d11c <__sflush_r+0x44>
 800d118:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d11a:	1ad2      	subs	r2, r2, r3
 800d11c:	2300      	movs	r3, #0
 800d11e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d120:	6a21      	ldr	r1, [r4, #32]
 800d122:	4628      	mov	r0, r5
 800d124:	47b0      	blx	r6
 800d126:	1c43      	adds	r3, r0, #1
 800d128:	89a3      	ldrh	r3, [r4, #12]
 800d12a:	d106      	bne.n	800d13a <__sflush_r+0x62>
 800d12c:	6829      	ldr	r1, [r5, #0]
 800d12e:	291d      	cmp	r1, #29
 800d130:	d82b      	bhi.n	800d18a <__sflush_r+0xb2>
 800d132:	4a2a      	ldr	r2, [pc, #168]	@ (800d1dc <__sflush_r+0x104>)
 800d134:	40ca      	lsrs	r2, r1
 800d136:	07d6      	lsls	r6, r2, #31
 800d138:	d527      	bpl.n	800d18a <__sflush_r+0xb2>
 800d13a:	2200      	movs	r2, #0
 800d13c:	6062      	str	r2, [r4, #4]
 800d13e:	04d9      	lsls	r1, r3, #19
 800d140:	6922      	ldr	r2, [r4, #16]
 800d142:	6022      	str	r2, [r4, #0]
 800d144:	d504      	bpl.n	800d150 <__sflush_r+0x78>
 800d146:	1c42      	adds	r2, r0, #1
 800d148:	d101      	bne.n	800d14e <__sflush_r+0x76>
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	b903      	cbnz	r3, 800d150 <__sflush_r+0x78>
 800d14e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d152:	602f      	str	r7, [r5, #0]
 800d154:	b1b9      	cbz	r1, 800d186 <__sflush_r+0xae>
 800d156:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d15a:	4299      	cmp	r1, r3
 800d15c:	d002      	beq.n	800d164 <__sflush_r+0x8c>
 800d15e:	4628      	mov	r0, r5
 800d160:	f7fe fa84 	bl	800b66c <_free_r>
 800d164:	2300      	movs	r3, #0
 800d166:	6363      	str	r3, [r4, #52]	@ 0x34
 800d168:	e00d      	b.n	800d186 <__sflush_r+0xae>
 800d16a:	2301      	movs	r3, #1
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b0      	blx	r6
 800d170:	4602      	mov	r2, r0
 800d172:	1c50      	adds	r0, r2, #1
 800d174:	d1c9      	bne.n	800d10a <__sflush_r+0x32>
 800d176:	682b      	ldr	r3, [r5, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d0c6      	beq.n	800d10a <__sflush_r+0x32>
 800d17c:	2b1d      	cmp	r3, #29
 800d17e:	d001      	beq.n	800d184 <__sflush_r+0xac>
 800d180:	2b16      	cmp	r3, #22
 800d182:	d11e      	bne.n	800d1c2 <__sflush_r+0xea>
 800d184:	602f      	str	r7, [r5, #0]
 800d186:	2000      	movs	r0, #0
 800d188:	e022      	b.n	800d1d0 <__sflush_r+0xf8>
 800d18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d18e:	b21b      	sxth	r3, r3
 800d190:	e01b      	b.n	800d1ca <__sflush_r+0xf2>
 800d192:	690f      	ldr	r7, [r1, #16]
 800d194:	2f00      	cmp	r7, #0
 800d196:	d0f6      	beq.n	800d186 <__sflush_r+0xae>
 800d198:	0793      	lsls	r3, r2, #30
 800d19a:	680e      	ldr	r6, [r1, #0]
 800d19c:	bf08      	it	eq
 800d19e:	694b      	ldreq	r3, [r1, #20]
 800d1a0:	600f      	str	r7, [r1, #0]
 800d1a2:	bf18      	it	ne
 800d1a4:	2300      	movne	r3, #0
 800d1a6:	eba6 0807 	sub.w	r8, r6, r7
 800d1aa:	608b      	str	r3, [r1, #8]
 800d1ac:	f1b8 0f00 	cmp.w	r8, #0
 800d1b0:	dde9      	ble.n	800d186 <__sflush_r+0xae>
 800d1b2:	6a21      	ldr	r1, [r4, #32]
 800d1b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d1b6:	4643      	mov	r3, r8
 800d1b8:	463a      	mov	r2, r7
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	47b0      	blx	r6
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	dc08      	bgt.n	800d1d4 <__sflush_r+0xfc>
 800d1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ca:	81a3      	strh	r3, [r4, #12]
 800d1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d4:	4407      	add	r7, r0
 800d1d6:	eba8 0800 	sub.w	r8, r8, r0
 800d1da:	e7e7      	b.n	800d1ac <__sflush_r+0xd4>
 800d1dc:	20400001 	.word	0x20400001

0800d1e0 <_fflush_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	690b      	ldr	r3, [r1, #16]
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	b913      	cbnz	r3, 800d1f0 <_fflush_r+0x10>
 800d1ea:	2500      	movs	r5, #0
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	bd38      	pop	{r3, r4, r5, pc}
 800d1f0:	b118      	cbz	r0, 800d1fa <_fflush_r+0x1a>
 800d1f2:	6a03      	ldr	r3, [r0, #32]
 800d1f4:	b90b      	cbnz	r3, 800d1fa <_fflush_r+0x1a>
 800d1f6:	f7fd fb2f 	bl	800a858 <__sinit>
 800d1fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0f3      	beq.n	800d1ea <_fflush_r+0xa>
 800d202:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d204:	07d0      	lsls	r0, r2, #31
 800d206:	d404      	bmi.n	800d212 <_fflush_r+0x32>
 800d208:	0599      	lsls	r1, r3, #22
 800d20a:	d402      	bmi.n	800d212 <_fflush_r+0x32>
 800d20c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d20e:	f7fd fc3c 	bl	800aa8a <__retarget_lock_acquire_recursive>
 800d212:	4628      	mov	r0, r5
 800d214:	4621      	mov	r1, r4
 800d216:	f7ff ff5f 	bl	800d0d8 <__sflush_r>
 800d21a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d21c:	07da      	lsls	r2, r3, #31
 800d21e:	4605      	mov	r5, r0
 800d220:	d4e4      	bmi.n	800d1ec <_fflush_r+0xc>
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	059b      	lsls	r3, r3, #22
 800d226:	d4e1      	bmi.n	800d1ec <_fflush_r+0xc>
 800d228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d22a:	f7fd fc2f 	bl	800aa8c <__retarget_lock_release_recursive>
 800d22e:	e7dd      	b.n	800d1ec <_fflush_r+0xc>

0800d230 <memmove>:
 800d230:	4288      	cmp	r0, r1
 800d232:	b510      	push	{r4, lr}
 800d234:	eb01 0402 	add.w	r4, r1, r2
 800d238:	d902      	bls.n	800d240 <memmove+0x10>
 800d23a:	4284      	cmp	r4, r0
 800d23c:	4623      	mov	r3, r4
 800d23e:	d807      	bhi.n	800d250 <memmove+0x20>
 800d240:	1e43      	subs	r3, r0, #1
 800d242:	42a1      	cmp	r1, r4
 800d244:	d008      	beq.n	800d258 <memmove+0x28>
 800d246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d24e:	e7f8      	b.n	800d242 <memmove+0x12>
 800d250:	4402      	add	r2, r0
 800d252:	4601      	mov	r1, r0
 800d254:	428a      	cmp	r2, r1
 800d256:	d100      	bne.n	800d25a <memmove+0x2a>
 800d258:	bd10      	pop	{r4, pc}
 800d25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d262:	e7f7      	b.n	800d254 <memmove+0x24>

0800d264 <strncmp>:
 800d264:	b510      	push	{r4, lr}
 800d266:	b16a      	cbz	r2, 800d284 <strncmp+0x20>
 800d268:	3901      	subs	r1, #1
 800d26a:	1884      	adds	r4, r0, r2
 800d26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d270:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d274:	429a      	cmp	r2, r3
 800d276:	d103      	bne.n	800d280 <strncmp+0x1c>
 800d278:	42a0      	cmp	r0, r4
 800d27a:	d001      	beq.n	800d280 <strncmp+0x1c>
 800d27c:	2a00      	cmp	r2, #0
 800d27e:	d1f5      	bne.n	800d26c <strncmp+0x8>
 800d280:	1ad0      	subs	r0, r2, r3
 800d282:	bd10      	pop	{r4, pc}
 800d284:	4610      	mov	r0, r2
 800d286:	e7fc      	b.n	800d282 <strncmp+0x1e>

0800d288 <_sbrk_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d06      	ldr	r5, [pc, #24]	@ (800d2a4 <_sbrk_r+0x1c>)
 800d28c:	2300      	movs	r3, #0
 800d28e:	4604      	mov	r4, r0
 800d290:	4608      	mov	r0, r1
 800d292:	602b      	str	r3, [r5, #0]
 800d294:	f7f4 f900 	bl	8001498 <_sbrk>
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	d102      	bne.n	800d2a2 <_sbrk_r+0x1a>
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	b103      	cbz	r3, 800d2a2 <_sbrk_r+0x1a>
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	240005c4 	.word	0x240005c4

0800d2a8 <memcpy>:
 800d2a8:	440a      	add	r2, r1
 800d2aa:	4291      	cmp	r1, r2
 800d2ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2b0:	d100      	bne.n	800d2b4 <memcpy+0xc>
 800d2b2:	4770      	bx	lr
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2be:	4291      	cmp	r1, r2
 800d2c0:	d1f9      	bne.n	800d2b6 <memcpy+0xe>
 800d2c2:	bd10      	pop	{r4, pc}
 800d2c4:	0000      	movs	r0, r0
	...

0800d2c8 <nan>:
 800d2c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d2d0 <nan+0x8>
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	00000000 	.word	0x00000000
 800d2d4:	7ff80000 	.word	0x7ff80000

0800d2d8 <__assert_func>:
 800d2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2da:	4614      	mov	r4, r2
 800d2dc:	461a      	mov	r2, r3
 800d2de:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <__assert_func+0x2c>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	68d8      	ldr	r0, [r3, #12]
 800d2e6:	b14c      	cbz	r4, 800d2fc <__assert_func+0x24>
 800d2e8:	4b07      	ldr	r3, [pc, #28]	@ (800d308 <__assert_func+0x30>)
 800d2ea:	9100      	str	r1, [sp, #0]
 800d2ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2f0:	4906      	ldr	r1, [pc, #24]	@ (800d30c <__assert_func+0x34>)
 800d2f2:	462b      	mov	r3, r5
 800d2f4:	f000 fba8 	bl	800da48 <fiprintf>
 800d2f8:	f000 fbb8 	bl	800da6c <abort>
 800d2fc:	4b04      	ldr	r3, [pc, #16]	@ (800d310 <__assert_func+0x38>)
 800d2fe:	461c      	mov	r4, r3
 800d300:	e7f3      	b.n	800d2ea <__assert_func+0x12>
 800d302:	bf00      	nop
 800d304:	2400001c 	.word	0x2400001c
 800d308:	0800e276 	.word	0x0800e276
 800d30c:	0800e283 	.word	0x0800e283
 800d310:	0800e2b1 	.word	0x0800e2b1

0800d314 <_calloc_r>:
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	fba1 5402 	umull	r5, r4, r1, r2
 800d31a:	b934      	cbnz	r4, 800d32a <_calloc_r+0x16>
 800d31c:	4629      	mov	r1, r5
 800d31e:	f7fe fa19 	bl	800b754 <_malloc_r>
 800d322:	4606      	mov	r6, r0
 800d324:	b928      	cbnz	r0, 800d332 <_calloc_r+0x1e>
 800d326:	4630      	mov	r0, r6
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	220c      	movs	r2, #12
 800d32c:	6002      	str	r2, [r0, #0]
 800d32e:	2600      	movs	r6, #0
 800d330:	e7f9      	b.n	800d326 <_calloc_r+0x12>
 800d332:	462a      	mov	r2, r5
 800d334:	4621      	mov	r1, r4
 800d336:	f7fd fb2a 	bl	800a98e <memset>
 800d33a:	e7f4      	b.n	800d326 <_calloc_r+0x12>

0800d33c <rshift>:
 800d33c:	6903      	ldr	r3, [r0, #16]
 800d33e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d346:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d34a:	f100 0414 	add.w	r4, r0, #20
 800d34e:	dd45      	ble.n	800d3dc <rshift+0xa0>
 800d350:	f011 011f 	ands.w	r1, r1, #31
 800d354:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d358:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d35c:	d10c      	bne.n	800d378 <rshift+0x3c>
 800d35e:	f100 0710 	add.w	r7, r0, #16
 800d362:	4629      	mov	r1, r5
 800d364:	42b1      	cmp	r1, r6
 800d366:	d334      	bcc.n	800d3d2 <rshift+0x96>
 800d368:	1a9b      	subs	r3, r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	1eea      	subs	r2, r5, #3
 800d36e:	4296      	cmp	r6, r2
 800d370:	bf38      	it	cc
 800d372:	2300      	movcc	r3, #0
 800d374:	4423      	add	r3, r4
 800d376:	e015      	b.n	800d3a4 <rshift+0x68>
 800d378:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d37c:	f1c1 0820 	rsb	r8, r1, #32
 800d380:	40cf      	lsrs	r7, r1
 800d382:	f105 0e04 	add.w	lr, r5, #4
 800d386:	46a1      	mov	r9, r4
 800d388:	4576      	cmp	r6, lr
 800d38a:	46f4      	mov	ip, lr
 800d38c:	d815      	bhi.n	800d3ba <rshift+0x7e>
 800d38e:	1a9a      	subs	r2, r3, r2
 800d390:	0092      	lsls	r2, r2, #2
 800d392:	3a04      	subs	r2, #4
 800d394:	3501      	adds	r5, #1
 800d396:	42ae      	cmp	r6, r5
 800d398:	bf38      	it	cc
 800d39a:	2200      	movcc	r2, #0
 800d39c:	18a3      	adds	r3, r4, r2
 800d39e:	50a7      	str	r7, [r4, r2]
 800d3a0:	b107      	cbz	r7, 800d3a4 <rshift+0x68>
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	1b1a      	subs	r2, r3, r4
 800d3a6:	42a3      	cmp	r3, r4
 800d3a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d3ac:	bf08      	it	eq
 800d3ae:	2300      	moveq	r3, #0
 800d3b0:	6102      	str	r2, [r0, #16]
 800d3b2:	bf08      	it	eq
 800d3b4:	6143      	streq	r3, [r0, #20]
 800d3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ba:	f8dc c000 	ldr.w	ip, [ip]
 800d3be:	fa0c fc08 	lsl.w	ip, ip, r8
 800d3c2:	ea4c 0707 	orr.w	r7, ip, r7
 800d3c6:	f849 7b04 	str.w	r7, [r9], #4
 800d3ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d3ce:	40cf      	lsrs	r7, r1
 800d3d0:	e7da      	b.n	800d388 <rshift+0x4c>
 800d3d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d3d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d3da:	e7c3      	b.n	800d364 <rshift+0x28>
 800d3dc:	4623      	mov	r3, r4
 800d3de:	e7e1      	b.n	800d3a4 <rshift+0x68>

0800d3e0 <__hexdig_fun>:
 800d3e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d3e4:	2b09      	cmp	r3, #9
 800d3e6:	d802      	bhi.n	800d3ee <__hexdig_fun+0xe>
 800d3e8:	3820      	subs	r0, #32
 800d3ea:	b2c0      	uxtb	r0, r0
 800d3ec:	4770      	bx	lr
 800d3ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d3f2:	2b05      	cmp	r3, #5
 800d3f4:	d801      	bhi.n	800d3fa <__hexdig_fun+0x1a>
 800d3f6:	3847      	subs	r0, #71	@ 0x47
 800d3f8:	e7f7      	b.n	800d3ea <__hexdig_fun+0xa>
 800d3fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d3fe:	2b05      	cmp	r3, #5
 800d400:	d801      	bhi.n	800d406 <__hexdig_fun+0x26>
 800d402:	3827      	subs	r0, #39	@ 0x27
 800d404:	e7f1      	b.n	800d3ea <__hexdig_fun+0xa>
 800d406:	2000      	movs	r0, #0
 800d408:	4770      	bx	lr
	...

0800d40c <__gethex>:
 800d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	b085      	sub	sp, #20
 800d412:	468a      	mov	sl, r1
 800d414:	9302      	str	r3, [sp, #8]
 800d416:	680b      	ldr	r3, [r1, #0]
 800d418:	9001      	str	r0, [sp, #4]
 800d41a:	4690      	mov	r8, r2
 800d41c:	1c9c      	adds	r4, r3, #2
 800d41e:	46a1      	mov	r9, r4
 800d420:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d424:	2830      	cmp	r0, #48	@ 0x30
 800d426:	d0fa      	beq.n	800d41e <__gethex+0x12>
 800d428:	eba9 0303 	sub.w	r3, r9, r3
 800d42c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d430:	f7ff ffd6 	bl	800d3e0 <__hexdig_fun>
 800d434:	4605      	mov	r5, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	d168      	bne.n	800d50c <__gethex+0x100>
 800d43a:	49a0      	ldr	r1, [pc, #640]	@ (800d6bc <__gethex+0x2b0>)
 800d43c:	2201      	movs	r2, #1
 800d43e:	4648      	mov	r0, r9
 800d440:	f7ff ff10 	bl	800d264 <strncmp>
 800d444:	4607      	mov	r7, r0
 800d446:	2800      	cmp	r0, #0
 800d448:	d167      	bne.n	800d51a <__gethex+0x10e>
 800d44a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d44e:	4626      	mov	r6, r4
 800d450:	f7ff ffc6 	bl	800d3e0 <__hexdig_fun>
 800d454:	2800      	cmp	r0, #0
 800d456:	d062      	beq.n	800d51e <__gethex+0x112>
 800d458:	4623      	mov	r3, r4
 800d45a:	7818      	ldrb	r0, [r3, #0]
 800d45c:	2830      	cmp	r0, #48	@ 0x30
 800d45e:	4699      	mov	r9, r3
 800d460:	f103 0301 	add.w	r3, r3, #1
 800d464:	d0f9      	beq.n	800d45a <__gethex+0x4e>
 800d466:	f7ff ffbb 	bl	800d3e0 <__hexdig_fun>
 800d46a:	fab0 f580 	clz	r5, r0
 800d46e:	096d      	lsrs	r5, r5, #5
 800d470:	f04f 0b01 	mov.w	fp, #1
 800d474:	464a      	mov	r2, r9
 800d476:	4616      	mov	r6, r2
 800d478:	3201      	adds	r2, #1
 800d47a:	7830      	ldrb	r0, [r6, #0]
 800d47c:	f7ff ffb0 	bl	800d3e0 <__hexdig_fun>
 800d480:	2800      	cmp	r0, #0
 800d482:	d1f8      	bne.n	800d476 <__gethex+0x6a>
 800d484:	498d      	ldr	r1, [pc, #564]	@ (800d6bc <__gethex+0x2b0>)
 800d486:	2201      	movs	r2, #1
 800d488:	4630      	mov	r0, r6
 800d48a:	f7ff feeb 	bl	800d264 <strncmp>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d13f      	bne.n	800d512 <__gethex+0x106>
 800d492:	b944      	cbnz	r4, 800d4a6 <__gethex+0x9a>
 800d494:	1c74      	adds	r4, r6, #1
 800d496:	4622      	mov	r2, r4
 800d498:	4616      	mov	r6, r2
 800d49a:	3201      	adds	r2, #1
 800d49c:	7830      	ldrb	r0, [r6, #0]
 800d49e:	f7ff ff9f 	bl	800d3e0 <__hexdig_fun>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d1f8      	bne.n	800d498 <__gethex+0x8c>
 800d4a6:	1ba4      	subs	r4, r4, r6
 800d4a8:	00a7      	lsls	r7, r4, #2
 800d4aa:	7833      	ldrb	r3, [r6, #0]
 800d4ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d4b0:	2b50      	cmp	r3, #80	@ 0x50
 800d4b2:	d13e      	bne.n	800d532 <__gethex+0x126>
 800d4b4:	7873      	ldrb	r3, [r6, #1]
 800d4b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d4b8:	d033      	beq.n	800d522 <__gethex+0x116>
 800d4ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800d4bc:	d034      	beq.n	800d528 <__gethex+0x11c>
 800d4be:	1c71      	adds	r1, r6, #1
 800d4c0:	2400      	movs	r4, #0
 800d4c2:	7808      	ldrb	r0, [r1, #0]
 800d4c4:	f7ff ff8c 	bl	800d3e0 <__hexdig_fun>
 800d4c8:	1e43      	subs	r3, r0, #1
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b18      	cmp	r3, #24
 800d4ce:	d830      	bhi.n	800d532 <__gethex+0x126>
 800d4d0:	f1a0 0210 	sub.w	r2, r0, #16
 800d4d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d4d8:	f7ff ff82 	bl	800d3e0 <__hexdig_fun>
 800d4dc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d4e0:	fa5f fc8c 	uxtb.w	ip, ip
 800d4e4:	f1bc 0f18 	cmp.w	ip, #24
 800d4e8:	f04f 030a 	mov.w	r3, #10
 800d4ec:	d91e      	bls.n	800d52c <__gethex+0x120>
 800d4ee:	b104      	cbz	r4, 800d4f2 <__gethex+0xe6>
 800d4f0:	4252      	negs	r2, r2
 800d4f2:	4417      	add	r7, r2
 800d4f4:	f8ca 1000 	str.w	r1, [sl]
 800d4f8:	b1ed      	cbz	r5, 800d536 <__gethex+0x12a>
 800d4fa:	f1bb 0f00 	cmp.w	fp, #0
 800d4fe:	bf0c      	ite	eq
 800d500:	2506      	moveq	r5, #6
 800d502:	2500      	movne	r5, #0
 800d504:	4628      	mov	r0, r5
 800d506:	b005      	add	sp, #20
 800d508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50c:	2500      	movs	r5, #0
 800d50e:	462c      	mov	r4, r5
 800d510:	e7b0      	b.n	800d474 <__gethex+0x68>
 800d512:	2c00      	cmp	r4, #0
 800d514:	d1c7      	bne.n	800d4a6 <__gethex+0x9a>
 800d516:	4627      	mov	r7, r4
 800d518:	e7c7      	b.n	800d4aa <__gethex+0x9e>
 800d51a:	464e      	mov	r6, r9
 800d51c:	462f      	mov	r7, r5
 800d51e:	2501      	movs	r5, #1
 800d520:	e7c3      	b.n	800d4aa <__gethex+0x9e>
 800d522:	2400      	movs	r4, #0
 800d524:	1cb1      	adds	r1, r6, #2
 800d526:	e7cc      	b.n	800d4c2 <__gethex+0xb6>
 800d528:	2401      	movs	r4, #1
 800d52a:	e7fb      	b.n	800d524 <__gethex+0x118>
 800d52c:	fb03 0002 	mla	r0, r3, r2, r0
 800d530:	e7ce      	b.n	800d4d0 <__gethex+0xc4>
 800d532:	4631      	mov	r1, r6
 800d534:	e7de      	b.n	800d4f4 <__gethex+0xe8>
 800d536:	eba6 0309 	sub.w	r3, r6, r9
 800d53a:	3b01      	subs	r3, #1
 800d53c:	4629      	mov	r1, r5
 800d53e:	2b07      	cmp	r3, #7
 800d540:	dc0a      	bgt.n	800d558 <__gethex+0x14c>
 800d542:	9801      	ldr	r0, [sp, #4]
 800d544:	f7fe f992 	bl	800b86c <_Balloc>
 800d548:	4604      	mov	r4, r0
 800d54a:	b940      	cbnz	r0, 800d55e <__gethex+0x152>
 800d54c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6c0 <__gethex+0x2b4>)
 800d54e:	4602      	mov	r2, r0
 800d550:	21e4      	movs	r1, #228	@ 0xe4
 800d552:	485c      	ldr	r0, [pc, #368]	@ (800d6c4 <__gethex+0x2b8>)
 800d554:	f7ff fec0 	bl	800d2d8 <__assert_func>
 800d558:	3101      	adds	r1, #1
 800d55a:	105b      	asrs	r3, r3, #1
 800d55c:	e7ef      	b.n	800d53e <__gethex+0x132>
 800d55e:	f100 0a14 	add.w	sl, r0, #20
 800d562:	2300      	movs	r3, #0
 800d564:	4655      	mov	r5, sl
 800d566:	469b      	mov	fp, r3
 800d568:	45b1      	cmp	r9, r6
 800d56a:	d337      	bcc.n	800d5dc <__gethex+0x1d0>
 800d56c:	f845 bb04 	str.w	fp, [r5], #4
 800d570:	eba5 050a 	sub.w	r5, r5, sl
 800d574:	10ad      	asrs	r5, r5, #2
 800d576:	6125      	str	r5, [r4, #16]
 800d578:	4658      	mov	r0, fp
 800d57a:	f7fe fa69 	bl	800ba50 <__hi0bits>
 800d57e:	016d      	lsls	r5, r5, #5
 800d580:	f8d8 6000 	ldr.w	r6, [r8]
 800d584:	1a2d      	subs	r5, r5, r0
 800d586:	42b5      	cmp	r5, r6
 800d588:	dd54      	ble.n	800d634 <__gethex+0x228>
 800d58a:	1bad      	subs	r5, r5, r6
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	f7fe fdf2 	bl	800c178 <__any_on>
 800d594:	4681      	mov	r9, r0
 800d596:	b178      	cbz	r0, 800d5b8 <__gethex+0x1ac>
 800d598:	1e6b      	subs	r3, r5, #1
 800d59a:	1159      	asrs	r1, r3, #5
 800d59c:	f003 021f 	and.w	r2, r3, #31
 800d5a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d5a4:	f04f 0901 	mov.w	r9, #1
 800d5a8:	fa09 f202 	lsl.w	r2, r9, r2
 800d5ac:	420a      	tst	r2, r1
 800d5ae:	d003      	beq.n	800d5b8 <__gethex+0x1ac>
 800d5b0:	454b      	cmp	r3, r9
 800d5b2:	dc36      	bgt.n	800d622 <__gethex+0x216>
 800d5b4:	f04f 0902 	mov.w	r9, #2
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff febe 	bl	800d33c <rshift>
 800d5c0:	442f      	add	r7, r5
 800d5c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5c6:	42bb      	cmp	r3, r7
 800d5c8:	da42      	bge.n	800d650 <__gethex+0x244>
 800d5ca:	9801      	ldr	r0, [sp, #4]
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	f7fe f98d 	bl	800b8ec <_Bfree>
 800d5d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	25a3      	movs	r5, #163	@ 0xa3
 800d5da:	e793      	b.n	800d504 <__gethex+0xf8>
 800d5dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d5e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d5e2:	d012      	beq.n	800d60a <__gethex+0x1fe>
 800d5e4:	2b20      	cmp	r3, #32
 800d5e6:	d104      	bne.n	800d5f2 <__gethex+0x1e6>
 800d5e8:	f845 bb04 	str.w	fp, [r5], #4
 800d5ec:	f04f 0b00 	mov.w	fp, #0
 800d5f0:	465b      	mov	r3, fp
 800d5f2:	7830      	ldrb	r0, [r6, #0]
 800d5f4:	9303      	str	r3, [sp, #12]
 800d5f6:	f7ff fef3 	bl	800d3e0 <__hexdig_fun>
 800d5fa:	9b03      	ldr	r3, [sp, #12]
 800d5fc:	f000 000f 	and.w	r0, r0, #15
 800d600:	4098      	lsls	r0, r3
 800d602:	ea4b 0b00 	orr.w	fp, fp, r0
 800d606:	3304      	adds	r3, #4
 800d608:	e7ae      	b.n	800d568 <__gethex+0x15c>
 800d60a:	45b1      	cmp	r9, r6
 800d60c:	d8ea      	bhi.n	800d5e4 <__gethex+0x1d8>
 800d60e:	492b      	ldr	r1, [pc, #172]	@ (800d6bc <__gethex+0x2b0>)
 800d610:	9303      	str	r3, [sp, #12]
 800d612:	2201      	movs	r2, #1
 800d614:	4630      	mov	r0, r6
 800d616:	f7ff fe25 	bl	800d264 <strncmp>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d1e1      	bne.n	800d5e4 <__gethex+0x1d8>
 800d620:	e7a2      	b.n	800d568 <__gethex+0x15c>
 800d622:	1ea9      	subs	r1, r5, #2
 800d624:	4620      	mov	r0, r4
 800d626:	f7fe fda7 	bl	800c178 <__any_on>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d0c2      	beq.n	800d5b4 <__gethex+0x1a8>
 800d62e:	f04f 0903 	mov.w	r9, #3
 800d632:	e7c1      	b.n	800d5b8 <__gethex+0x1ac>
 800d634:	da09      	bge.n	800d64a <__gethex+0x23e>
 800d636:	1b75      	subs	r5, r6, r5
 800d638:	4621      	mov	r1, r4
 800d63a:	9801      	ldr	r0, [sp, #4]
 800d63c:	462a      	mov	r2, r5
 800d63e:	f7fe fb65 	bl	800bd0c <__lshift>
 800d642:	1b7f      	subs	r7, r7, r5
 800d644:	4604      	mov	r4, r0
 800d646:	f100 0a14 	add.w	sl, r0, #20
 800d64a:	f04f 0900 	mov.w	r9, #0
 800d64e:	e7b8      	b.n	800d5c2 <__gethex+0x1b6>
 800d650:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d654:	42bd      	cmp	r5, r7
 800d656:	dd6f      	ble.n	800d738 <__gethex+0x32c>
 800d658:	1bed      	subs	r5, r5, r7
 800d65a:	42ae      	cmp	r6, r5
 800d65c:	dc34      	bgt.n	800d6c8 <__gethex+0x2bc>
 800d65e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d662:	2b02      	cmp	r3, #2
 800d664:	d022      	beq.n	800d6ac <__gethex+0x2a0>
 800d666:	2b03      	cmp	r3, #3
 800d668:	d024      	beq.n	800d6b4 <__gethex+0x2a8>
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d115      	bne.n	800d69a <__gethex+0x28e>
 800d66e:	42ae      	cmp	r6, r5
 800d670:	d113      	bne.n	800d69a <__gethex+0x28e>
 800d672:	2e01      	cmp	r6, #1
 800d674:	d10b      	bne.n	800d68e <__gethex+0x282>
 800d676:	9a02      	ldr	r2, [sp, #8]
 800d678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	2301      	movs	r3, #1
 800d680:	6123      	str	r3, [r4, #16]
 800d682:	f8ca 3000 	str.w	r3, [sl]
 800d686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d688:	2562      	movs	r5, #98	@ 0x62
 800d68a:	601c      	str	r4, [r3, #0]
 800d68c:	e73a      	b.n	800d504 <__gethex+0xf8>
 800d68e:	1e71      	subs	r1, r6, #1
 800d690:	4620      	mov	r0, r4
 800d692:	f7fe fd71 	bl	800c178 <__any_on>
 800d696:	2800      	cmp	r0, #0
 800d698:	d1ed      	bne.n	800d676 <__gethex+0x26a>
 800d69a:	9801      	ldr	r0, [sp, #4]
 800d69c:	4621      	mov	r1, r4
 800d69e:	f7fe f925 	bl	800b8ec <_Bfree>
 800d6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	2550      	movs	r5, #80	@ 0x50
 800d6aa:	e72b      	b.n	800d504 <__gethex+0xf8>
 800d6ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1f3      	bne.n	800d69a <__gethex+0x28e>
 800d6b2:	e7e0      	b.n	800d676 <__gethex+0x26a>
 800d6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1dd      	bne.n	800d676 <__gethex+0x26a>
 800d6ba:	e7ee      	b.n	800d69a <__gethex+0x28e>
 800d6bc:	0800e25b 	.word	0x0800e25b
 800d6c0:	0800e1f1 	.word	0x0800e1f1
 800d6c4:	0800e2b2 	.word	0x0800e2b2
 800d6c8:	1e6f      	subs	r7, r5, #1
 800d6ca:	f1b9 0f00 	cmp.w	r9, #0
 800d6ce:	d130      	bne.n	800d732 <__gethex+0x326>
 800d6d0:	b127      	cbz	r7, 800d6dc <__gethex+0x2d0>
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f7fe fd4f 	bl	800c178 <__any_on>
 800d6da:	4681      	mov	r9, r0
 800d6dc:	117a      	asrs	r2, r7, #5
 800d6de:	2301      	movs	r3, #1
 800d6e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d6e4:	f007 071f 	and.w	r7, r7, #31
 800d6e8:	40bb      	lsls	r3, r7
 800d6ea:	4213      	tst	r3, r2
 800d6ec:	4629      	mov	r1, r5
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	bf18      	it	ne
 800d6f2:	f049 0902 	orrne.w	r9, r9, #2
 800d6f6:	f7ff fe21 	bl	800d33c <rshift>
 800d6fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d6fe:	1b76      	subs	r6, r6, r5
 800d700:	2502      	movs	r5, #2
 800d702:	f1b9 0f00 	cmp.w	r9, #0
 800d706:	d047      	beq.n	800d798 <__gethex+0x38c>
 800d708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d015      	beq.n	800d73c <__gethex+0x330>
 800d710:	2b03      	cmp	r3, #3
 800d712:	d017      	beq.n	800d744 <__gethex+0x338>
 800d714:	2b01      	cmp	r3, #1
 800d716:	d109      	bne.n	800d72c <__gethex+0x320>
 800d718:	f019 0f02 	tst.w	r9, #2
 800d71c:	d006      	beq.n	800d72c <__gethex+0x320>
 800d71e:	f8da 3000 	ldr.w	r3, [sl]
 800d722:	ea49 0903 	orr.w	r9, r9, r3
 800d726:	f019 0f01 	tst.w	r9, #1
 800d72a:	d10e      	bne.n	800d74a <__gethex+0x33e>
 800d72c:	f045 0510 	orr.w	r5, r5, #16
 800d730:	e032      	b.n	800d798 <__gethex+0x38c>
 800d732:	f04f 0901 	mov.w	r9, #1
 800d736:	e7d1      	b.n	800d6dc <__gethex+0x2d0>
 800d738:	2501      	movs	r5, #1
 800d73a:	e7e2      	b.n	800d702 <__gethex+0x2f6>
 800d73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d73e:	f1c3 0301 	rsb	r3, r3, #1
 800d742:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0f0      	beq.n	800d72c <__gethex+0x320>
 800d74a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d74e:	f104 0314 	add.w	r3, r4, #20
 800d752:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d756:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d75a:	f04f 0c00 	mov.w	ip, #0
 800d75e:	4618      	mov	r0, r3
 800d760:	f853 2b04 	ldr.w	r2, [r3], #4
 800d764:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d768:	d01b      	beq.n	800d7a2 <__gethex+0x396>
 800d76a:	3201      	adds	r2, #1
 800d76c:	6002      	str	r2, [r0, #0]
 800d76e:	2d02      	cmp	r5, #2
 800d770:	f104 0314 	add.w	r3, r4, #20
 800d774:	d13c      	bne.n	800d7f0 <__gethex+0x3e4>
 800d776:	f8d8 2000 	ldr.w	r2, [r8]
 800d77a:	3a01      	subs	r2, #1
 800d77c:	42b2      	cmp	r2, r6
 800d77e:	d109      	bne.n	800d794 <__gethex+0x388>
 800d780:	1171      	asrs	r1, r6, #5
 800d782:	2201      	movs	r2, #1
 800d784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d788:	f006 061f 	and.w	r6, r6, #31
 800d78c:	fa02 f606 	lsl.w	r6, r2, r6
 800d790:	421e      	tst	r6, r3
 800d792:	d13a      	bne.n	800d80a <__gethex+0x3fe>
 800d794:	f045 0520 	orr.w	r5, r5, #32
 800d798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d79a:	601c      	str	r4, [r3, #0]
 800d79c:	9b02      	ldr	r3, [sp, #8]
 800d79e:	601f      	str	r7, [r3, #0]
 800d7a0:	e6b0      	b.n	800d504 <__gethex+0xf8>
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d7a8:	d8d9      	bhi.n	800d75e <__gethex+0x352>
 800d7aa:	68a3      	ldr	r3, [r4, #8]
 800d7ac:	459b      	cmp	fp, r3
 800d7ae:	db17      	blt.n	800d7e0 <__gethex+0x3d4>
 800d7b0:	6861      	ldr	r1, [r4, #4]
 800d7b2:	9801      	ldr	r0, [sp, #4]
 800d7b4:	3101      	adds	r1, #1
 800d7b6:	f7fe f859 	bl	800b86c <_Balloc>
 800d7ba:	4681      	mov	r9, r0
 800d7bc:	b918      	cbnz	r0, 800d7c6 <__gethex+0x3ba>
 800d7be:	4b1a      	ldr	r3, [pc, #104]	@ (800d828 <__gethex+0x41c>)
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	2184      	movs	r1, #132	@ 0x84
 800d7c4:	e6c5      	b.n	800d552 <__gethex+0x146>
 800d7c6:	6922      	ldr	r2, [r4, #16]
 800d7c8:	3202      	adds	r2, #2
 800d7ca:	f104 010c 	add.w	r1, r4, #12
 800d7ce:	0092      	lsls	r2, r2, #2
 800d7d0:	300c      	adds	r0, #12
 800d7d2:	f7ff fd69 	bl	800d2a8 <memcpy>
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	9801      	ldr	r0, [sp, #4]
 800d7da:	f7fe f887 	bl	800b8ec <_Bfree>
 800d7de:	464c      	mov	r4, r9
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	1c5a      	adds	r2, r3, #1
 800d7e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7e8:	6122      	str	r2, [r4, #16]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	615a      	str	r2, [r3, #20]
 800d7ee:	e7be      	b.n	800d76e <__gethex+0x362>
 800d7f0:	6922      	ldr	r2, [r4, #16]
 800d7f2:	455a      	cmp	r2, fp
 800d7f4:	dd0b      	ble.n	800d80e <__gethex+0x402>
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7ff fd9f 	bl	800d33c <rshift>
 800d7fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d802:	3701      	adds	r7, #1
 800d804:	42bb      	cmp	r3, r7
 800d806:	f6ff aee0 	blt.w	800d5ca <__gethex+0x1be>
 800d80a:	2501      	movs	r5, #1
 800d80c:	e7c2      	b.n	800d794 <__gethex+0x388>
 800d80e:	f016 061f 	ands.w	r6, r6, #31
 800d812:	d0fa      	beq.n	800d80a <__gethex+0x3fe>
 800d814:	4453      	add	r3, sl
 800d816:	f1c6 0620 	rsb	r6, r6, #32
 800d81a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d81e:	f7fe f917 	bl	800ba50 <__hi0bits>
 800d822:	42b0      	cmp	r0, r6
 800d824:	dbe7      	blt.n	800d7f6 <__gethex+0x3ea>
 800d826:	e7f0      	b.n	800d80a <__gethex+0x3fe>
 800d828:	0800e1f1 	.word	0x0800e1f1

0800d82c <L_shift>:
 800d82c:	f1c2 0208 	rsb	r2, r2, #8
 800d830:	0092      	lsls	r2, r2, #2
 800d832:	b570      	push	{r4, r5, r6, lr}
 800d834:	f1c2 0620 	rsb	r6, r2, #32
 800d838:	6843      	ldr	r3, [r0, #4]
 800d83a:	6804      	ldr	r4, [r0, #0]
 800d83c:	fa03 f506 	lsl.w	r5, r3, r6
 800d840:	432c      	orrs	r4, r5
 800d842:	40d3      	lsrs	r3, r2
 800d844:	6004      	str	r4, [r0, #0]
 800d846:	f840 3f04 	str.w	r3, [r0, #4]!
 800d84a:	4288      	cmp	r0, r1
 800d84c:	d3f4      	bcc.n	800d838 <L_shift+0xc>
 800d84e:	bd70      	pop	{r4, r5, r6, pc}

0800d850 <__match>:
 800d850:	b530      	push	{r4, r5, lr}
 800d852:	6803      	ldr	r3, [r0, #0]
 800d854:	3301      	adds	r3, #1
 800d856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d85a:	b914      	cbnz	r4, 800d862 <__match+0x12>
 800d85c:	6003      	str	r3, [r0, #0]
 800d85e:	2001      	movs	r0, #1
 800d860:	bd30      	pop	{r4, r5, pc}
 800d862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d866:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d86a:	2d19      	cmp	r5, #25
 800d86c:	bf98      	it	ls
 800d86e:	3220      	addls	r2, #32
 800d870:	42a2      	cmp	r2, r4
 800d872:	d0f0      	beq.n	800d856 <__match+0x6>
 800d874:	2000      	movs	r0, #0
 800d876:	e7f3      	b.n	800d860 <__match+0x10>

0800d878 <__hexnan>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	680b      	ldr	r3, [r1, #0]
 800d87e:	6801      	ldr	r1, [r0, #0]
 800d880:	115e      	asrs	r6, r3, #5
 800d882:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d886:	f013 031f 	ands.w	r3, r3, #31
 800d88a:	b087      	sub	sp, #28
 800d88c:	bf18      	it	ne
 800d88e:	3604      	addne	r6, #4
 800d890:	2500      	movs	r5, #0
 800d892:	1f37      	subs	r7, r6, #4
 800d894:	4682      	mov	sl, r0
 800d896:	4690      	mov	r8, r2
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d89e:	46b9      	mov	r9, r7
 800d8a0:	463c      	mov	r4, r7
 800d8a2:	9502      	str	r5, [sp, #8]
 800d8a4:	46ab      	mov	fp, r5
 800d8a6:	784a      	ldrb	r2, [r1, #1]
 800d8a8:	1c4b      	adds	r3, r1, #1
 800d8aa:	9303      	str	r3, [sp, #12]
 800d8ac:	b342      	cbz	r2, 800d900 <__hexnan+0x88>
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	9105      	str	r1, [sp, #20]
 800d8b2:	9204      	str	r2, [sp, #16]
 800d8b4:	f7ff fd94 	bl	800d3e0 <__hexdig_fun>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d151      	bne.n	800d960 <__hexnan+0xe8>
 800d8bc:	9a04      	ldr	r2, [sp, #16]
 800d8be:	9905      	ldr	r1, [sp, #20]
 800d8c0:	2a20      	cmp	r2, #32
 800d8c2:	d818      	bhi.n	800d8f6 <__hexnan+0x7e>
 800d8c4:	9b02      	ldr	r3, [sp, #8]
 800d8c6:	459b      	cmp	fp, r3
 800d8c8:	dd13      	ble.n	800d8f2 <__hexnan+0x7a>
 800d8ca:	454c      	cmp	r4, r9
 800d8cc:	d206      	bcs.n	800d8dc <__hexnan+0x64>
 800d8ce:	2d07      	cmp	r5, #7
 800d8d0:	dc04      	bgt.n	800d8dc <__hexnan+0x64>
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	4649      	mov	r1, r9
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f7ff ffa8 	bl	800d82c <L_shift>
 800d8dc:	4544      	cmp	r4, r8
 800d8de:	d952      	bls.n	800d986 <__hexnan+0x10e>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f1a4 0904 	sub.w	r9, r4, #4
 800d8e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8ea:	f8cd b008 	str.w	fp, [sp, #8]
 800d8ee:	464c      	mov	r4, r9
 800d8f0:	461d      	mov	r5, r3
 800d8f2:	9903      	ldr	r1, [sp, #12]
 800d8f4:	e7d7      	b.n	800d8a6 <__hexnan+0x2e>
 800d8f6:	2a29      	cmp	r2, #41	@ 0x29
 800d8f8:	d157      	bne.n	800d9aa <__hexnan+0x132>
 800d8fa:	3102      	adds	r1, #2
 800d8fc:	f8ca 1000 	str.w	r1, [sl]
 800d900:	f1bb 0f00 	cmp.w	fp, #0
 800d904:	d051      	beq.n	800d9aa <__hexnan+0x132>
 800d906:	454c      	cmp	r4, r9
 800d908:	d206      	bcs.n	800d918 <__hexnan+0xa0>
 800d90a:	2d07      	cmp	r5, #7
 800d90c:	dc04      	bgt.n	800d918 <__hexnan+0xa0>
 800d90e:	462a      	mov	r2, r5
 800d910:	4649      	mov	r1, r9
 800d912:	4620      	mov	r0, r4
 800d914:	f7ff ff8a 	bl	800d82c <L_shift>
 800d918:	4544      	cmp	r4, r8
 800d91a:	d936      	bls.n	800d98a <__hexnan+0x112>
 800d91c:	f1a8 0204 	sub.w	r2, r8, #4
 800d920:	4623      	mov	r3, r4
 800d922:	f853 1b04 	ldr.w	r1, [r3], #4
 800d926:	f842 1f04 	str.w	r1, [r2, #4]!
 800d92a:	429f      	cmp	r7, r3
 800d92c:	d2f9      	bcs.n	800d922 <__hexnan+0xaa>
 800d92e:	1b3b      	subs	r3, r7, r4
 800d930:	f023 0303 	bic.w	r3, r3, #3
 800d934:	3304      	adds	r3, #4
 800d936:	3401      	adds	r4, #1
 800d938:	3e03      	subs	r6, #3
 800d93a:	42b4      	cmp	r4, r6
 800d93c:	bf88      	it	hi
 800d93e:	2304      	movhi	r3, #4
 800d940:	4443      	add	r3, r8
 800d942:	2200      	movs	r2, #0
 800d944:	f843 2b04 	str.w	r2, [r3], #4
 800d948:	429f      	cmp	r7, r3
 800d94a:	d2fb      	bcs.n	800d944 <__hexnan+0xcc>
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	b91b      	cbnz	r3, 800d958 <__hexnan+0xe0>
 800d950:	4547      	cmp	r7, r8
 800d952:	d128      	bne.n	800d9a6 <__hexnan+0x12e>
 800d954:	2301      	movs	r3, #1
 800d956:	603b      	str	r3, [r7, #0]
 800d958:	2005      	movs	r0, #5
 800d95a:	b007      	add	sp, #28
 800d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d960:	3501      	adds	r5, #1
 800d962:	2d08      	cmp	r5, #8
 800d964:	f10b 0b01 	add.w	fp, fp, #1
 800d968:	dd06      	ble.n	800d978 <__hexnan+0x100>
 800d96a:	4544      	cmp	r4, r8
 800d96c:	d9c1      	bls.n	800d8f2 <__hexnan+0x7a>
 800d96e:	2300      	movs	r3, #0
 800d970:	f844 3c04 	str.w	r3, [r4, #-4]
 800d974:	2501      	movs	r5, #1
 800d976:	3c04      	subs	r4, #4
 800d978:	6822      	ldr	r2, [r4, #0]
 800d97a:	f000 000f 	and.w	r0, r0, #15
 800d97e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d982:	6020      	str	r0, [r4, #0]
 800d984:	e7b5      	b.n	800d8f2 <__hexnan+0x7a>
 800d986:	2508      	movs	r5, #8
 800d988:	e7b3      	b.n	800d8f2 <__hexnan+0x7a>
 800d98a:	9b01      	ldr	r3, [sp, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d0dd      	beq.n	800d94c <__hexnan+0xd4>
 800d990:	f1c3 0320 	rsb	r3, r3, #32
 800d994:	f04f 32ff 	mov.w	r2, #4294967295
 800d998:	40da      	lsrs	r2, r3
 800d99a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d99e:	4013      	ands	r3, r2
 800d9a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d9a4:	e7d2      	b.n	800d94c <__hexnan+0xd4>
 800d9a6:	3f04      	subs	r7, #4
 800d9a8:	e7d0      	b.n	800d94c <__hexnan+0xd4>
 800d9aa:	2004      	movs	r0, #4
 800d9ac:	e7d5      	b.n	800d95a <__hexnan+0xe2>

0800d9ae <__ascii_mbtowc>:
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	b901      	cbnz	r1, 800d9b4 <__ascii_mbtowc+0x6>
 800d9b2:	a901      	add	r1, sp, #4
 800d9b4:	b142      	cbz	r2, 800d9c8 <__ascii_mbtowc+0x1a>
 800d9b6:	b14b      	cbz	r3, 800d9cc <__ascii_mbtowc+0x1e>
 800d9b8:	7813      	ldrb	r3, [r2, #0]
 800d9ba:	600b      	str	r3, [r1, #0]
 800d9bc:	7812      	ldrb	r2, [r2, #0]
 800d9be:	1e10      	subs	r0, r2, #0
 800d9c0:	bf18      	it	ne
 800d9c2:	2001      	movne	r0, #1
 800d9c4:	b002      	add	sp, #8
 800d9c6:	4770      	bx	lr
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	e7fb      	b.n	800d9c4 <__ascii_mbtowc+0x16>
 800d9cc:	f06f 0001 	mvn.w	r0, #1
 800d9d0:	e7f8      	b.n	800d9c4 <__ascii_mbtowc+0x16>

0800d9d2 <_realloc_r>:
 800d9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	4614      	mov	r4, r2
 800d9da:	460d      	mov	r5, r1
 800d9dc:	b921      	cbnz	r1, 800d9e8 <_realloc_r+0x16>
 800d9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	f7fd beb6 	b.w	800b754 <_malloc_r>
 800d9e8:	b92a      	cbnz	r2, 800d9f6 <_realloc_r+0x24>
 800d9ea:	f7fd fe3f 	bl	800b66c <_free_r>
 800d9ee:	4625      	mov	r5, r4
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f6:	f000 f840 	bl	800da7a <_malloc_usable_size_r>
 800d9fa:	4284      	cmp	r4, r0
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	d802      	bhi.n	800da06 <_realloc_r+0x34>
 800da00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da04:	d8f4      	bhi.n	800d9f0 <_realloc_r+0x1e>
 800da06:	4621      	mov	r1, r4
 800da08:	4638      	mov	r0, r7
 800da0a:	f7fd fea3 	bl	800b754 <_malloc_r>
 800da0e:	4680      	mov	r8, r0
 800da10:	b908      	cbnz	r0, 800da16 <_realloc_r+0x44>
 800da12:	4645      	mov	r5, r8
 800da14:	e7ec      	b.n	800d9f0 <_realloc_r+0x1e>
 800da16:	42b4      	cmp	r4, r6
 800da18:	4622      	mov	r2, r4
 800da1a:	4629      	mov	r1, r5
 800da1c:	bf28      	it	cs
 800da1e:	4632      	movcs	r2, r6
 800da20:	f7ff fc42 	bl	800d2a8 <memcpy>
 800da24:	4629      	mov	r1, r5
 800da26:	4638      	mov	r0, r7
 800da28:	f7fd fe20 	bl	800b66c <_free_r>
 800da2c:	e7f1      	b.n	800da12 <_realloc_r+0x40>

0800da2e <__ascii_wctomb>:
 800da2e:	4603      	mov	r3, r0
 800da30:	4608      	mov	r0, r1
 800da32:	b141      	cbz	r1, 800da46 <__ascii_wctomb+0x18>
 800da34:	2aff      	cmp	r2, #255	@ 0xff
 800da36:	d904      	bls.n	800da42 <__ascii_wctomb+0x14>
 800da38:	228a      	movs	r2, #138	@ 0x8a
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	f04f 30ff 	mov.w	r0, #4294967295
 800da40:	4770      	bx	lr
 800da42:	700a      	strb	r2, [r1, #0]
 800da44:	2001      	movs	r0, #1
 800da46:	4770      	bx	lr

0800da48 <fiprintf>:
 800da48:	b40e      	push	{r1, r2, r3}
 800da4a:	b503      	push	{r0, r1, lr}
 800da4c:	4601      	mov	r1, r0
 800da4e:	ab03      	add	r3, sp, #12
 800da50:	4805      	ldr	r0, [pc, #20]	@ (800da68 <fiprintf+0x20>)
 800da52:	f853 2b04 	ldr.w	r2, [r3], #4
 800da56:	6800      	ldr	r0, [r0, #0]
 800da58:	9301      	str	r3, [sp, #4]
 800da5a:	f000 f83f 	bl	800dadc <_vfiprintf_r>
 800da5e:	b002      	add	sp, #8
 800da60:	f85d eb04 	ldr.w	lr, [sp], #4
 800da64:	b003      	add	sp, #12
 800da66:	4770      	bx	lr
 800da68:	2400001c 	.word	0x2400001c

0800da6c <abort>:
 800da6c:	b508      	push	{r3, lr}
 800da6e:	2006      	movs	r0, #6
 800da70:	f000 fa08 	bl	800de84 <raise>
 800da74:	2001      	movs	r0, #1
 800da76:	f7f3 fcb3 	bl	80013e0 <_exit>

0800da7a <_malloc_usable_size_r>:
 800da7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da7e:	1f18      	subs	r0, r3, #4
 800da80:	2b00      	cmp	r3, #0
 800da82:	bfbc      	itt	lt
 800da84:	580b      	ldrlt	r3, [r1, r0]
 800da86:	18c0      	addlt	r0, r0, r3
 800da88:	4770      	bx	lr

0800da8a <__sfputc_r>:
 800da8a:	6893      	ldr	r3, [r2, #8]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	b410      	push	{r4}
 800da92:	6093      	str	r3, [r2, #8]
 800da94:	da08      	bge.n	800daa8 <__sfputc_r+0x1e>
 800da96:	6994      	ldr	r4, [r2, #24]
 800da98:	42a3      	cmp	r3, r4
 800da9a:	db01      	blt.n	800daa0 <__sfputc_r+0x16>
 800da9c:	290a      	cmp	r1, #10
 800da9e:	d103      	bne.n	800daa8 <__sfputc_r+0x1e>
 800daa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daa4:	f000 b932 	b.w	800dd0c <__swbuf_r>
 800daa8:	6813      	ldr	r3, [r2, #0]
 800daaa:	1c58      	adds	r0, r3, #1
 800daac:	6010      	str	r0, [r2, #0]
 800daae:	7019      	strb	r1, [r3, #0]
 800dab0:	4608      	mov	r0, r1
 800dab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <__sfputs_r>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	4614      	mov	r4, r2
 800dac0:	18d5      	adds	r5, r2, r3
 800dac2:	42ac      	cmp	r4, r5
 800dac4:	d101      	bne.n	800daca <__sfputs_r+0x12>
 800dac6:	2000      	movs	r0, #0
 800dac8:	e007      	b.n	800dada <__sfputs_r+0x22>
 800daca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dace:	463a      	mov	r2, r7
 800dad0:	4630      	mov	r0, r6
 800dad2:	f7ff ffda 	bl	800da8a <__sfputc_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d1f3      	bne.n	800dac2 <__sfputs_r+0xa>
 800dada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dadc <_vfiprintf_r>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	460d      	mov	r5, r1
 800dae2:	b09d      	sub	sp, #116	@ 0x74
 800dae4:	4614      	mov	r4, r2
 800dae6:	4698      	mov	r8, r3
 800dae8:	4606      	mov	r6, r0
 800daea:	b118      	cbz	r0, 800daf4 <_vfiprintf_r+0x18>
 800daec:	6a03      	ldr	r3, [r0, #32]
 800daee:	b90b      	cbnz	r3, 800daf4 <_vfiprintf_r+0x18>
 800daf0:	f7fc feb2 	bl	800a858 <__sinit>
 800daf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daf6:	07d9      	lsls	r1, r3, #31
 800daf8:	d405      	bmi.n	800db06 <_vfiprintf_r+0x2a>
 800dafa:	89ab      	ldrh	r3, [r5, #12]
 800dafc:	059a      	lsls	r2, r3, #22
 800dafe:	d402      	bmi.n	800db06 <_vfiprintf_r+0x2a>
 800db00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db02:	f7fc ffc2 	bl	800aa8a <__retarget_lock_acquire_recursive>
 800db06:	89ab      	ldrh	r3, [r5, #12]
 800db08:	071b      	lsls	r3, r3, #28
 800db0a:	d501      	bpl.n	800db10 <_vfiprintf_r+0x34>
 800db0c:	692b      	ldr	r3, [r5, #16]
 800db0e:	b99b      	cbnz	r3, 800db38 <_vfiprintf_r+0x5c>
 800db10:	4629      	mov	r1, r5
 800db12:	4630      	mov	r0, r6
 800db14:	f000 f938 	bl	800dd88 <__swsetup_r>
 800db18:	b170      	cbz	r0, 800db38 <_vfiprintf_r+0x5c>
 800db1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db1c:	07dc      	lsls	r4, r3, #31
 800db1e:	d504      	bpl.n	800db2a <_vfiprintf_r+0x4e>
 800db20:	f04f 30ff 	mov.w	r0, #4294967295
 800db24:	b01d      	add	sp, #116	@ 0x74
 800db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	0598      	lsls	r0, r3, #22
 800db2e:	d4f7      	bmi.n	800db20 <_vfiprintf_r+0x44>
 800db30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db32:	f7fc ffab 	bl	800aa8c <__retarget_lock_release_recursive>
 800db36:	e7f3      	b.n	800db20 <_vfiprintf_r+0x44>
 800db38:	2300      	movs	r3, #0
 800db3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db3c:	2320      	movs	r3, #32
 800db3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db42:	f8cd 800c 	str.w	r8, [sp, #12]
 800db46:	2330      	movs	r3, #48	@ 0x30
 800db48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dcf8 <_vfiprintf_r+0x21c>
 800db4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db50:	f04f 0901 	mov.w	r9, #1
 800db54:	4623      	mov	r3, r4
 800db56:	469a      	mov	sl, r3
 800db58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db5c:	b10a      	cbz	r2, 800db62 <_vfiprintf_r+0x86>
 800db5e:	2a25      	cmp	r2, #37	@ 0x25
 800db60:	d1f9      	bne.n	800db56 <_vfiprintf_r+0x7a>
 800db62:	ebba 0b04 	subs.w	fp, sl, r4
 800db66:	d00b      	beq.n	800db80 <_vfiprintf_r+0xa4>
 800db68:	465b      	mov	r3, fp
 800db6a:	4622      	mov	r2, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	4630      	mov	r0, r6
 800db70:	f7ff ffa2 	bl	800dab8 <__sfputs_r>
 800db74:	3001      	adds	r0, #1
 800db76:	f000 80a7 	beq.w	800dcc8 <_vfiprintf_r+0x1ec>
 800db7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db7c:	445a      	add	r2, fp
 800db7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800db80:	f89a 3000 	ldrb.w	r3, [sl]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 809f 	beq.w	800dcc8 <_vfiprintf_r+0x1ec>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f04f 32ff 	mov.w	r2, #4294967295
 800db90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db94:	f10a 0a01 	add.w	sl, sl, #1
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	9307      	str	r3, [sp, #28]
 800db9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dba0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dba2:	4654      	mov	r4, sl
 800dba4:	2205      	movs	r2, #5
 800dba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbaa:	4853      	ldr	r0, [pc, #332]	@ (800dcf8 <_vfiprintf_r+0x21c>)
 800dbac:	f7f2 fb98 	bl	80002e0 <memchr>
 800dbb0:	9a04      	ldr	r2, [sp, #16]
 800dbb2:	b9d8      	cbnz	r0, 800dbec <_vfiprintf_r+0x110>
 800dbb4:	06d1      	lsls	r1, r2, #27
 800dbb6:	bf44      	itt	mi
 800dbb8:	2320      	movmi	r3, #32
 800dbba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbbe:	0713      	lsls	r3, r2, #28
 800dbc0:	bf44      	itt	mi
 800dbc2:	232b      	movmi	r3, #43	@ 0x2b
 800dbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbc8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbce:	d015      	beq.n	800dbfc <_vfiprintf_r+0x120>
 800dbd0:	9a07      	ldr	r2, [sp, #28]
 800dbd2:	4654      	mov	r4, sl
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	f04f 0c0a 	mov.w	ip, #10
 800dbda:	4621      	mov	r1, r4
 800dbdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbe0:	3b30      	subs	r3, #48	@ 0x30
 800dbe2:	2b09      	cmp	r3, #9
 800dbe4:	d94b      	bls.n	800dc7e <_vfiprintf_r+0x1a2>
 800dbe6:	b1b0      	cbz	r0, 800dc16 <_vfiprintf_r+0x13a>
 800dbe8:	9207      	str	r2, [sp, #28]
 800dbea:	e014      	b.n	800dc16 <_vfiprintf_r+0x13a>
 800dbec:	eba0 0308 	sub.w	r3, r0, r8
 800dbf0:	fa09 f303 	lsl.w	r3, r9, r3
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	9304      	str	r3, [sp, #16]
 800dbf8:	46a2      	mov	sl, r4
 800dbfa:	e7d2      	b.n	800dba2 <_vfiprintf_r+0xc6>
 800dbfc:	9b03      	ldr	r3, [sp, #12]
 800dbfe:	1d19      	adds	r1, r3, #4
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	9103      	str	r1, [sp, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	bfbb      	ittet	lt
 800dc08:	425b      	neglt	r3, r3
 800dc0a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc0e:	9307      	strge	r3, [sp, #28]
 800dc10:	9307      	strlt	r3, [sp, #28]
 800dc12:	bfb8      	it	lt
 800dc14:	9204      	strlt	r2, [sp, #16]
 800dc16:	7823      	ldrb	r3, [r4, #0]
 800dc18:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc1a:	d10a      	bne.n	800dc32 <_vfiprintf_r+0x156>
 800dc1c:	7863      	ldrb	r3, [r4, #1]
 800dc1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc20:	d132      	bne.n	800dc88 <_vfiprintf_r+0x1ac>
 800dc22:	9b03      	ldr	r3, [sp, #12]
 800dc24:	1d1a      	adds	r2, r3, #4
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	9203      	str	r2, [sp, #12]
 800dc2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc2e:	3402      	adds	r4, #2
 800dc30:	9305      	str	r3, [sp, #20]
 800dc32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd08 <_vfiprintf_r+0x22c>
 800dc36:	7821      	ldrb	r1, [r4, #0]
 800dc38:	2203      	movs	r2, #3
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	f7f2 fb50 	bl	80002e0 <memchr>
 800dc40:	b138      	cbz	r0, 800dc52 <_vfiprintf_r+0x176>
 800dc42:	9b04      	ldr	r3, [sp, #16]
 800dc44:	eba0 000a 	sub.w	r0, r0, sl
 800dc48:	2240      	movs	r2, #64	@ 0x40
 800dc4a:	4082      	lsls	r2, r0
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	3401      	adds	r4, #1
 800dc50:	9304      	str	r3, [sp, #16]
 800dc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc56:	4829      	ldr	r0, [pc, #164]	@ (800dcfc <_vfiprintf_r+0x220>)
 800dc58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc5c:	2206      	movs	r2, #6
 800dc5e:	f7f2 fb3f 	bl	80002e0 <memchr>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d03f      	beq.n	800dce6 <_vfiprintf_r+0x20a>
 800dc66:	4b26      	ldr	r3, [pc, #152]	@ (800dd00 <_vfiprintf_r+0x224>)
 800dc68:	bb1b      	cbnz	r3, 800dcb2 <_vfiprintf_r+0x1d6>
 800dc6a:	9b03      	ldr	r3, [sp, #12]
 800dc6c:	3307      	adds	r3, #7
 800dc6e:	f023 0307 	bic.w	r3, r3, #7
 800dc72:	3308      	adds	r3, #8
 800dc74:	9303      	str	r3, [sp, #12]
 800dc76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc78:	443b      	add	r3, r7
 800dc7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc7c:	e76a      	b.n	800db54 <_vfiprintf_r+0x78>
 800dc7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc82:	460c      	mov	r4, r1
 800dc84:	2001      	movs	r0, #1
 800dc86:	e7a8      	b.n	800dbda <_vfiprintf_r+0xfe>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	3401      	adds	r4, #1
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	f04f 0c0a 	mov.w	ip, #10
 800dc94:	4620      	mov	r0, r4
 800dc96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc9a:	3a30      	subs	r2, #48	@ 0x30
 800dc9c:	2a09      	cmp	r2, #9
 800dc9e:	d903      	bls.n	800dca8 <_vfiprintf_r+0x1cc>
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d0c6      	beq.n	800dc32 <_vfiprintf_r+0x156>
 800dca4:	9105      	str	r1, [sp, #20]
 800dca6:	e7c4      	b.n	800dc32 <_vfiprintf_r+0x156>
 800dca8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcac:	4604      	mov	r4, r0
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e7f0      	b.n	800dc94 <_vfiprintf_r+0x1b8>
 800dcb2:	ab03      	add	r3, sp, #12
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	462a      	mov	r2, r5
 800dcb8:	4b12      	ldr	r3, [pc, #72]	@ (800dd04 <_vfiprintf_r+0x228>)
 800dcba:	a904      	add	r1, sp, #16
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	f7fb ff93 	bl	8009be8 <_printf_float>
 800dcc2:	4607      	mov	r7, r0
 800dcc4:	1c78      	adds	r0, r7, #1
 800dcc6:	d1d6      	bne.n	800dc76 <_vfiprintf_r+0x19a>
 800dcc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcca:	07d9      	lsls	r1, r3, #31
 800dccc:	d405      	bmi.n	800dcda <_vfiprintf_r+0x1fe>
 800dcce:	89ab      	ldrh	r3, [r5, #12]
 800dcd0:	059a      	lsls	r2, r3, #22
 800dcd2:	d402      	bmi.n	800dcda <_vfiprintf_r+0x1fe>
 800dcd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcd6:	f7fc fed9 	bl	800aa8c <__retarget_lock_release_recursive>
 800dcda:	89ab      	ldrh	r3, [r5, #12]
 800dcdc:	065b      	lsls	r3, r3, #25
 800dcde:	f53f af1f 	bmi.w	800db20 <_vfiprintf_r+0x44>
 800dce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dce4:	e71e      	b.n	800db24 <_vfiprintf_r+0x48>
 800dce6:	ab03      	add	r3, sp, #12
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	462a      	mov	r2, r5
 800dcec:	4b05      	ldr	r3, [pc, #20]	@ (800dd04 <_vfiprintf_r+0x228>)
 800dcee:	a904      	add	r1, sp, #16
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7fc fa01 	bl	800a0f8 <_printf_i>
 800dcf6:	e7e4      	b.n	800dcc2 <_vfiprintf_r+0x1e6>
 800dcf8:	0800e25d 	.word	0x0800e25d
 800dcfc:	0800e267 	.word	0x0800e267
 800dd00:	08009be9 	.word	0x08009be9
 800dd04:	0800dab9 	.word	0x0800dab9
 800dd08:	0800e263 	.word	0x0800e263

0800dd0c <__swbuf_r>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	460e      	mov	r6, r1
 800dd10:	4614      	mov	r4, r2
 800dd12:	4605      	mov	r5, r0
 800dd14:	b118      	cbz	r0, 800dd1e <__swbuf_r+0x12>
 800dd16:	6a03      	ldr	r3, [r0, #32]
 800dd18:	b90b      	cbnz	r3, 800dd1e <__swbuf_r+0x12>
 800dd1a:	f7fc fd9d 	bl	800a858 <__sinit>
 800dd1e:	69a3      	ldr	r3, [r4, #24]
 800dd20:	60a3      	str	r3, [r4, #8]
 800dd22:	89a3      	ldrh	r3, [r4, #12]
 800dd24:	071a      	lsls	r2, r3, #28
 800dd26:	d501      	bpl.n	800dd2c <__swbuf_r+0x20>
 800dd28:	6923      	ldr	r3, [r4, #16]
 800dd2a:	b943      	cbnz	r3, 800dd3e <__swbuf_r+0x32>
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f000 f82a 	bl	800dd88 <__swsetup_r>
 800dd34:	b118      	cbz	r0, 800dd3e <__swbuf_r+0x32>
 800dd36:	f04f 37ff 	mov.w	r7, #4294967295
 800dd3a:	4638      	mov	r0, r7
 800dd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	6922      	ldr	r2, [r4, #16]
 800dd42:	1a98      	subs	r0, r3, r2
 800dd44:	6963      	ldr	r3, [r4, #20]
 800dd46:	b2f6      	uxtb	r6, r6
 800dd48:	4283      	cmp	r3, r0
 800dd4a:	4637      	mov	r7, r6
 800dd4c:	dc05      	bgt.n	800dd5a <__swbuf_r+0x4e>
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4628      	mov	r0, r5
 800dd52:	f7ff fa45 	bl	800d1e0 <_fflush_r>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d1ed      	bne.n	800dd36 <__swbuf_r+0x2a>
 800dd5a:	68a3      	ldr	r3, [r4, #8]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	60a3      	str	r3, [r4, #8]
 800dd60:	6823      	ldr	r3, [r4, #0]
 800dd62:	1c5a      	adds	r2, r3, #1
 800dd64:	6022      	str	r2, [r4, #0]
 800dd66:	701e      	strb	r6, [r3, #0]
 800dd68:	6962      	ldr	r2, [r4, #20]
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d004      	beq.n	800dd7a <__swbuf_r+0x6e>
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	07db      	lsls	r3, r3, #31
 800dd74:	d5e1      	bpl.n	800dd3a <__swbuf_r+0x2e>
 800dd76:	2e0a      	cmp	r6, #10
 800dd78:	d1df      	bne.n	800dd3a <__swbuf_r+0x2e>
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	f7ff fa2f 	bl	800d1e0 <_fflush_r>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	d0d9      	beq.n	800dd3a <__swbuf_r+0x2e>
 800dd86:	e7d6      	b.n	800dd36 <__swbuf_r+0x2a>

0800dd88 <__swsetup_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4b29      	ldr	r3, [pc, #164]	@ (800de30 <__swsetup_r+0xa8>)
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	6818      	ldr	r0, [r3, #0]
 800dd90:	460c      	mov	r4, r1
 800dd92:	b118      	cbz	r0, 800dd9c <__swsetup_r+0x14>
 800dd94:	6a03      	ldr	r3, [r0, #32]
 800dd96:	b90b      	cbnz	r3, 800dd9c <__swsetup_r+0x14>
 800dd98:	f7fc fd5e 	bl	800a858 <__sinit>
 800dd9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dda0:	0719      	lsls	r1, r3, #28
 800dda2:	d422      	bmi.n	800ddea <__swsetup_r+0x62>
 800dda4:	06da      	lsls	r2, r3, #27
 800dda6:	d407      	bmi.n	800ddb8 <__swsetup_r+0x30>
 800dda8:	2209      	movs	r2, #9
 800ddaa:	602a      	str	r2, [r5, #0]
 800ddac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb6:	e033      	b.n	800de20 <__swsetup_r+0x98>
 800ddb8:	0758      	lsls	r0, r3, #29
 800ddba:	d512      	bpl.n	800dde2 <__swsetup_r+0x5a>
 800ddbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddbe:	b141      	cbz	r1, 800ddd2 <__swsetup_r+0x4a>
 800ddc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddc4:	4299      	cmp	r1, r3
 800ddc6:	d002      	beq.n	800ddce <__swsetup_r+0x46>
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f7fd fc4f 	bl	800b66c <_free_r>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ddd8:	81a3      	strh	r3, [r4, #12]
 800ddda:	2300      	movs	r3, #0
 800dddc:	6063      	str	r3, [r4, #4]
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	f043 0308 	orr.w	r3, r3, #8
 800dde8:	81a3      	strh	r3, [r4, #12]
 800ddea:	6923      	ldr	r3, [r4, #16]
 800ddec:	b94b      	cbnz	r3, 800de02 <__swsetup_r+0x7a>
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ddf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddf8:	d003      	beq.n	800de02 <__swsetup_r+0x7a>
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f000 f883 	bl	800df08 <__smakebuf_r>
 800de02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de06:	f013 0201 	ands.w	r2, r3, #1
 800de0a:	d00a      	beq.n	800de22 <__swsetup_r+0x9a>
 800de0c:	2200      	movs	r2, #0
 800de0e:	60a2      	str	r2, [r4, #8]
 800de10:	6962      	ldr	r2, [r4, #20]
 800de12:	4252      	negs	r2, r2
 800de14:	61a2      	str	r2, [r4, #24]
 800de16:	6922      	ldr	r2, [r4, #16]
 800de18:	b942      	cbnz	r2, 800de2c <__swsetup_r+0xa4>
 800de1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de1e:	d1c5      	bne.n	800ddac <__swsetup_r+0x24>
 800de20:	bd38      	pop	{r3, r4, r5, pc}
 800de22:	0799      	lsls	r1, r3, #30
 800de24:	bf58      	it	pl
 800de26:	6962      	ldrpl	r2, [r4, #20]
 800de28:	60a2      	str	r2, [r4, #8]
 800de2a:	e7f4      	b.n	800de16 <__swsetup_r+0x8e>
 800de2c:	2000      	movs	r0, #0
 800de2e:	e7f7      	b.n	800de20 <__swsetup_r+0x98>
 800de30:	2400001c 	.word	0x2400001c

0800de34 <_raise_r>:
 800de34:	291f      	cmp	r1, #31
 800de36:	b538      	push	{r3, r4, r5, lr}
 800de38:	4605      	mov	r5, r0
 800de3a:	460c      	mov	r4, r1
 800de3c:	d904      	bls.n	800de48 <_raise_r+0x14>
 800de3e:	2316      	movs	r3, #22
 800de40:	6003      	str	r3, [r0, #0]
 800de42:	f04f 30ff 	mov.w	r0, #4294967295
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de4a:	b112      	cbz	r2, 800de52 <_raise_r+0x1e>
 800de4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de50:	b94b      	cbnz	r3, 800de66 <_raise_r+0x32>
 800de52:	4628      	mov	r0, r5
 800de54:	f000 f830 	bl	800deb8 <_getpid_r>
 800de58:	4622      	mov	r2, r4
 800de5a:	4601      	mov	r1, r0
 800de5c:	4628      	mov	r0, r5
 800de5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de62:	f000 b817 	b.w	800de94 <_kill_r>
 800de66:	2b01      	cmp	r3, #1
 800de68:	d00a      	beq.n	800de80 <_raise_r+0x4c>
 800de6a:	1c59      	adds	r1, r3, #1
 800de6c:	d103      	bne.n	800de76 <_raise_r+0x42>
 800de6e:	2316      	movs	r3, #22
 800de70:	6003      	str	r3, [r0, #0]
 800de72:	2001      	movs	r0, #1
 800de74:	e7e7      	b.n	800de46 <_raise_r+0x12>
 800de76:	2100      	movs	r1, #0
 800de78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de7c:	4620      	mov	r0, r4
 800de7e:	4798      	blx	r3
 800de80:	2000      	movs	r0, #0
 800de82:	e7e0      	b.n	800de46 <_raise_r+0x12>

0800de84 <raise>:
 800de84:	4b02      	ldr	r3, [pc, #8]	@ (800de90 <raise+0xc>)
 800de86:	4601      	mov	r1, r0
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	f7ff bfd3 	b.w	800de34 <_raise_r>
 800de8e:	bf00      	nop
 800de90:	2400001c 	.word	0x2400001c

0800de94 <_kill_r>:
 800de94:	b538      	push	{r3, r4, r5, lr}
 800de96:	4d07      	ldr	r5, [pc, #28]	@ (800deb4 <_kill_r+0x20>)
 800de98:	2300      	movs	r3, #0
 800de9a:	4604      	mov	r4, r0
 800de9c:	4608      	mov	r0, r1
 800de9e:	4611      	mov	r1, r2
 800dea0:	602b      	str	r3, [r5, #0]
 800dea2:	f7f3 fa8d 	bl	80013c0 <_kill>
 800dea6:	1c43      	adds	r3, r0, #1
 800dea8:	d102      	bne.n	800deb0 <_kill_r+0x1c>
 800deaa:	682b      	ldr	r3, [r5, #0]
 800deac:	b103      	cbz	r3, 800deb0 <_kill_r+0x1c>
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	bd38      	pop	{r3, r4, r5, pc}
 800deb2:	bf00      	nop
 800deb4:	240005c4 	.word	0x240005c4

0800deb8 <_getpid_r>:
 800deb8:	f7f3 ba7a 	b.w	80013b0 <_getpid>

0800debc <__swhatbuf_r>:
 800debc:	b570      	push	{r4, r5, r6, lr}
 800debe:	460c      	mov	r4, r1
 800dec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec4:	2900      	cmp	r1, #0
 800dec6:	b096      	sub	sp, #88	@ 0x58
 800dec8:	4615      	mov	r5, r2
 800deca:	461e      	mov	r6, r3
 800decc:	da0d      	bge.n	800deea <__swhatbuf_r+0x2e>
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ded4:	f04f 0100 	mov.w	r1, #0
 800ded8:	bf14      	ite	ne
 800deda:	2340      	movne	r3, #64	@ 0x40
 800dedc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dee0:	2000      	movs	r0, #0
 800dee2:	6031      	str	r1, [r6, #0]
 800dee4:	602b      	str	r3, [r5, #0]
 800dee6:	b016      	add	sp, #88	@ 0x58
 800dee8:	bd70      	pop	{r4, r5, r6, pc}
 800deea:	466a      	mov	r2, sp
 800deec:	f000 f848 	bl	800df80 <_fstat_r>
 800def0:	2800      	cmp	r0, #0
 800def2:	dbec      	blt.n	800dece <__swhatbuf_r+0x12>
 800def4:	9901      	ldr	r1, [sp, #4]
 800def6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800defa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800defe:	4259      	negs	r1, r3
 800df00:	4159      	adcs	r1, r3
 800df02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df06:	e7eb      	b.n	800dee0 <__swhatbuf_r+0x24>

0800df08 <__smakebuf_r>:
 800df08:	898b      	ldrh	r3, [r1, #12]
 800df0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df0c:	079d      	lsls	r5, r3, #30
 800df0e:	4606      	mov	r6, r0
 800df10:	460c      	mov	r4, r1
 800df12:	d507      	bpl.n	800df24 <__smakebuf_r+0x1c>
 800df14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	2301      	movs	r3, #1
 800df1e:	6163      	str	r3, [r4, #20]
 800df20:	b003      	add	sp, #12
 800df22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df24:	ab01      	add	r3, sp, #4
 800df26:	466a      	mov	r2, sp
 800df28:	f7ff ffc8 	bl	800debc <__swhatbuf_r>
 800df2c:	9f00      	ldr	r7, [sp, #0]
 800df2e:	4605      	mov	r5, r0
 800df30:	4639      	mov	r1, r7
 800df32:	4630      	mov	r0, r6
 800df34:	f7fd fc0e 	bl	800b754 <_malloc_r>
 800df38:	b948      	cbnz	r0, 800df4e <__smakebuf_r+0x46>
 800df3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df3e:	059a      	lsls	r2, r3, #22
 800df40:	d4ee      	bmi.n	800df20 <__smakebuf_r+0x18>
 800df42:	f023 0303 	bic.w	r3, r3, #3
 800df46:	f043 0302 	orr.w	r3, r3, #2
 800df4a:	81a3      	strh	r3, [r4, #12]
 800df4c:	e7e2      	b.n	800df14 <__smakebuf_r+0xc>
 800df4e:	89a3      	ldrh	r3, [r4, #12]
 800df50:	6020      	str	r0, [r4, #0]
 800df52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df56:	81a3      	strh	r3, [r4, #12]
 800df58:	9b01      	ldr	r3, [sp, #4]
 800df5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df5e:	b15b      	cbz	r3, 800df78 <__smakebuf_r+0x70>
 800df60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df64:	4630      	mov	r0, r6
 800df66:	f000 f81d 	bl	800dfa4 <_isatty_r>
 800df6a:	b128      	cbz	r0, 800df78 <__smakebuf_r+0x70>
 800df6c:	89a3      	ldrh	r3, [r4, #12]
 800df6e:	f023 0303 	bic.w	r3, r3, #3
 800df72:	f043 0301 	orr.w	r3, r3, #1
 800df76:	81a3      	strh	r3, [r4, #12]
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	431d      	orrs	r5, r3
 800df7c:	81a5      	strh	r5, [r4, #12]
 800df7e:	e7cf      	b.n	800df20 <__smakebuf_r+0x18>

0800df80 <_fstat_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4d07      	ldr	r5, [pc, #28]	@ (800dfa0 <_fstat_r+0x20>)
 800df84:	2300      	movs	r3, #0
 800df86:	4604      	mov	r4, r0
 800df88:	4608      	mov	r0, r1
 800df8a:	4611      	mov	r1, r2
 800df8c:	602b      	str	r3, [r5, #0]
 800df8e:	f7f3 fa5b 	bl	8001448 <_fstat>
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	d102      	bne.n	800df9c <_fstat_r+0x1c>
 800df96:	682b      	ldr	r3, [r5, #0]
 800df98:	b103      	cbz	r3, 800df9c <_fstat_r+0x1c>
 800df9a:	6023      	str	r3, [r4, #0]
 800df9c:	bd38      	pop	{r3, r4, r5, pc}
 800df9e:	bf00      	nop
 800dfa0:	240005c4 	.word	0x240005c4

0800dfa4 <_isatty_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4d06      	ldr	r5, [pc, #24]	@ (800dfc0 <_isatty_r+0x1c>)
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4604      	mov	r4, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	602b      	str	r3, [r5, #0]
 800dfb0:	f7f3 fa5a 	bl	8001468 <_isatty>
 800dfb4:	1c43      	adds	r3, r0, #1
 800dfb6:	d102      	bne.n	800dfbe <_isatty_r+0x1a>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	b103      	cbz	r3, 800dfbe <_isatty_r+0x1a>
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	240005c4 	.word	0x240005c4

0800dfc4 <_init>:
 800dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc6:	bf00      	nop
 800dfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfca:	bc08      	pop	{r3}
 800dfcc:	469e      	mov	lr, r3
 800dfce:	4770      	bx	lr

0800dfd0 <_fini>:
 800dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd2:	bf00      	nop
 800dfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfd6:	bc08      	pop	{r3}
 800dfd8:	469e      	mov	lr, r3
 800dfda:	4770      	bx	lr
