
teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e14c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800e3f0  0800e3f0  0000f3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e8ac  0800e8ac  0000f8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e8b4  0800e8b4  0000f8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e8b8  0800e8b8  0000f8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800e8bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000500  240001d8  0800ea94  000101d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240006d8  0800ea94  000106d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000169df  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fa1  00000000  00000000  00026be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f00  00000000  00000000  00029b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b68  00000000  00000000  0002aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039286  00000000  00000000  0002b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000178fb  00000000  00000000  00064876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161e7f  00000000  00000000  0007c171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ddff0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005018  00000000  00000000  001de034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001e304c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e3d4 	.word	0x0800e3d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800e3d4 	.word	0x0800e3d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2224      	movs	r2, #36	@ 0x24
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00a f974 	bl	800ad9e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_DAC1_Init+0x5c>)
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_DAC1_Init+0x60>)
 8000aba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000abc:	4810      	ldr	r0, [pc, #64]	@ (8000b00 <MX_DAC1_Init+0x5c>)
 8000abe:	f001 fa29 	bl	8001f14 <HAL_DAC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ac8:	f000 fb36 	bl	8001138 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_DAC1_Init+0x5c>)
 8000ae8:	f001 fa36 	bl	8001f58 <HAL_DAC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 fb21 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	240001f4 	.word	0x240001f4
 8000b04:	40007400 	.word	0x40007400

08000b08 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_DAC_MspInit+0x3c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10e      	bne.n	8000b38 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_DAC_MspInit+0x40>)
 8000b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b20:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <HAL_DAC_MspInit+0x40>)
 8000b22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <HAL_DAC_MspInit+0x40>)
 8000b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40007400 	.word	0x40007400
 8000b48:	58024400 	.word	0x58024400

08000b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_DMA_Init+0x6c>)
 8000b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b58:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <MX_DMA_Init+0x6c>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_DMA_Init+0x6c>)
 8000b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	200b      	movs	r0, #11
 8000b76:	f001 f920 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b7a:	200b      	movs	r0, #11
 8000b7c:	f001 f937 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	200c      	movs	r0, #12
 8000b86:	f001 f918 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b8a:	200c      	movs	r0, #12
 8000b8c:	f001 f92f 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	200d      	movs	r0, #13
 8000b96:	f001 f910 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b9a:	200d      	movs	r0, #13
 8000b9c:	f001 f927 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	200e      	movs	r0, #14
 8000ba6:	f001 f908 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000baa:	200e      	movs	r0, #14
 8000bac:	f001 f91f 	bl	8001dee <HAL_NVIC_EnableIRQ>

}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024400 	.word	0x58024400

08000bbc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b56      	ldr	r3, [pc, #344]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a54      	ldr	r2, [pc, #336]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b52      	ldr	r3, [pc, #328]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c00:	4b4a      	ldr	r3, [pc, #296]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b47      	ldr	r3, [pc, #284]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	4a45      	ldr	r2, [pc, #276]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1e:	4b43      	ldr	r3, [pc, #268]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	4a3e      	ldr	r2, [pc, #248]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a36      	ldr	r2, [pc, #216]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <MX_GPIO_Init+0x170>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4830      	ldr	r0, [pc, #192]	@ (8000d30 <MX_GPIO_Init+0x174>)
 8000c6e:	f003 fe8f 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ld1_Pin|ld2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c78:	482e      	ldr	r0, [pc, #184]	@ (8000d34 <MX_GPIO_Init+0x178>)
 8000c7a:	f003 fe89 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD7091R_CONVST_GPIO_Port, AD7091R_CONVST_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c84:	482c      	ldr	r0, [pc, #176]	@ (8000d38 <MX_GPIO_Init+0x17c>)
 8000c86:	f003 fe83 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <MX_GPIO_Init+0x180>)
 8000c90:	f003 fe7e 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4825      	ldr	r0, [pc, #148]	@ (8000d40 <MX_GPIO_Init+0x184>)
 8000cac:	f003 fcc0 	bl	8004630 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	481a      	ldr	r0, [pc, #104]	@ (8000d30 <MX_GPIO_Init+0x174>)
 8000cc8:	f003 fcb2 	bl	8004630 <HAL_GPIO_Init>

  /*Configure GPIO pins : ld1_Pin ld2_Pin */
  GPIO_InitStruct.Pin = ld1_Pin|ld2_Pin;
 8000ccc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <MX_GPIO_Init+0x178>)
 8000ce6:	f003 fca3 	bl	8004630 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD7091R_CONVST_Pin */
  GPIO_InitStruct.Pin = AD7091R_CONVST_Pin;
 8000cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AD7091R_CONVST_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	480d      	ldr	r0, [pc, #52]	@ (8000d38 <MX_GPIO_Init+0x17c>)
 8000d04:	f003 fc94 	bl	8004630 <HAL_GPIO_Init>

  /*Configure GPIO pin : ld3_Pin */
  GPIO_InitStruct.Pin = ld3_Pin;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ld3_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_GPIO_Init+0x180>)
 8000d20:	f003 fc86 	bl	8004630 <HAL_GPIO_Init>

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	58020000 	.word	0x58020000
 8000d34:	58020400 	.word	0x58020400
 8000d38:	58020c00 	.word	0x58020c00
 8000d3c:	58021000 	.word	0x58021000
 8000d40:	58021400 	.word	0x58021400

08000d44 <AD7091R_ReadData>:
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&normal_cmd_tx, 2, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
}

uint16_t AD7091R_ReadData(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    uint8_t rx_buf[2] = {0};
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	803b      	strh	r3, [r7, #0]
    uint16_t adc_raw_16bits, adc_value_12bits;

    HAL_Delay(100);
 8000d4e:	2064      	movs	r0, #100	@ 0x64
 8000d50:	f000 ff28 	bl	8001ba4 <HAL_Delay>

    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2110      	movs	r1, #16
 8000d58:	4821      	ldr	r0, [pc, #132]	@ (8000de0 <AD7091R_ReadData+0x9c>)
 8000d5a:	f003 fe19 	bl	8004990 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(&hspi1, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2202      	movs	r2, #2
 8000d66:	481f      	ldr	r0, [pc, #124]	@ (8000de4 <AD7091R_ReadData+0xa0>)
 8000d68:	f006 fdb6 	bl	80078d8 <HAL_SPI_Receive>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d018      	beq.n	8000da4 <AD7091R_ReadData+0x60>
    {
        HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2110      	movs	r1, #16
 8000d76:	481a      	ldr	r0, [pc, #104]	@ (8000de0 <AD7091R_ReadData+0x9c>)
 8000d78:	f003 fe0a 	bl	8004990 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_SET);  // LED erro
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d82:	4819      	ldr	r0, [pc, #100]	@ (8000de8 <AD7091R_ReadData+0xa4>)
 8000d84:	f003 fe04 	bl	8004990 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000d88:	2064      	movs	r0, #100	@ 0x64
 8000d8a:	f000 ff0b 	bl	8001ba4 <HAL_Delay>
        HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d94:	4814      	ldr	r0, [pc, #80]	@ (8000de8 <AD7091R_ReadData+0xa4>)
 8000d96:	f003 fdfb 	bl	8004990 <HAL_GPIO_WritePin>
        serialPrint("Erro na comunicacao SPI!\r\n");
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <AD7091R_ReadData+0xa8>)
 8000d9c:	f000 f8a4 	bl	8000ee8 <serialPrint>
        return 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e018      	b.n	8000dd6 <AD7091R_ReadData+0x92>
    }
    HAL_GPIO_WritePin(AD7091R_CS_Port, AD7091R_CS_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <AD7091R_ReadData+0x9c>)
 8000daa:	f003 fdf1 	bl	8004990 <HAL_GPIO_WritePin>

    HAL_GPIO_TogglePin(ld1_GPIO_Port, ld1_Pin);  // LED VERDE SUCESSO
 8000dae:	2101      	movs	r1, #1
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <AD7091R_ReadData+0xa4>)
 8000db2:	f003 fe06 	bl	80049c2 <HAL_GPIO_TogglePin>

    adc_raw_16bits = (rx_buf[0] << 8) | rx_buf[1];
 8000db6:	783b      	ldrb	r3, [r7, #0]
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	787b      	ldrb	r3, [r7, #1]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	80fb      	strh	r3, [r7, #6]
    adc_value_12bits = (adc_raw_16bits >> 2) & 0x0FFF;
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd2:	80bb      	strh	r3, [r7, #4]

    return adc_value_12bits;
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	58020000 	.word	0x58020000
 8000de4:	24000288 	.word	0x24000288
 8000de8:	58020400 	.word	0x58020400
 8000dec:	0800e3f0 	.word	0x0800e3f0

08000df0 <get_filtered_reading>:

uint16_t get_filtered_reading(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	70fb      	strb	r3, [r7, #3]
 8000dfe:	e00c      	b.n	8000e1a <get_filtered_reading+0x2a>
        sum += AD7091R_ReadData();
 8000e00:	f7ff ffa0 	bl	8000d44 <AD7091R_ReadData>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	607b      	str	r3, [r7, #4]
        HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	@ 0x64
 8000e10:	f000 fec8 	bl	8001ba4 <HAL_Delay>
    for(uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	3301      	adds	r3, #1
 8000e18:	70fb      	strb	r3, [r7, #3]
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2b1d      	cmp	r3, #29
 8000e1e:	d9ef      	bls.n	8000e00 <get_filtered_reading+0x10>
    }
    return (uint16_t)(sum / NUM_SAMPLES);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <get_filtered_reading+0x44>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	b29b      	uxth	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	88888889 	.word	0x88888889

08000e38 <raw_to_voltage_mV>:

float raw_to_voltage_mV(uint16_t raw_value)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
    return ((float)raw_value / ADC_MAX_VALUE) * VREF_MV;
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e4c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000e6c <raw_to_voltage_mV+0x34>
 8000e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e54:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000e70 <raw_to_voltage_mV+0x38>
 8000e58:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	457ff000 	.word	0x457ff000
 8000e70:	451c4000 	.word	0x451c4000

08000e74 <voltage_to_current_mA>:

float voltage_to_current_mA(float voltage_mv)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage_mv < MIN_VOLTAGE_ADC_MV) voltage_mv = MIN_VOLTAGE_ADC_MV;
 8000e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e82:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000ed4 <voltage_to_current_mA+0x60>
 8000e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	d501      	bpl.n	8000e94 <voltage_to_current_mA+0x20>
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <voltage_to_current_mA+0x64>)
 8000e92:	607b      	str	r3, [r7, #4]
    if (voltage_mv > MAX_VOLTAGE_ADC_MV) voltage_mv = MAX_VOLTAGE_ADC_MV;
 8000e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e98:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000edc <voltage_to_current_mA+0x68>
 8000e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	dd01      	ble.n	8000eaa <voltage_to_current_mA+0x36>
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <voltage_to_current_mA+0x6c>)
 8000ea8:	607b      	str	r3, [r7, #4]

    return 4.0f + ((voltage_mv - MIN_VOLTAGE_ADC_MV) * (16.0f / (MAX_VOLTAGE_ADC_MV - MIN_VOLTAGE_ADC_MV)));
 8000eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eae:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000ed4 <voltage_to_current_mA+0x60>
 8000eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eb6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000ee4 <voltage_to_current_mA+0x70>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	42c80000 	.word	0x42c80000
 8000ed8:	42c80000 	.word	0x42c80000
 8000edc:	45160000 	.word	0x45160000
 8000ee0:	45160000 	.word	0x45160000
 8000ee4:	3be3f389 	.word	0x3be3f389

08000ee8 <serialPrint>:

void serialPrint(const char* message)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff fa45 	bl	8000380 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <serialPrint+0x28>)
 8000f02:	f007 fa80 	bl	8008406 <HAL_UART_Transmit>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000404 	.word	0x24000404

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f1a:	f000 f8e1 	bl	80010e0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fdaf 	bl	8001a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f861 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f7ff fe49 	bl	8000bbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2a:	f7ff fe0f 	bl	8000b4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f2e:	f000 fc43 	bl	80017b8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000f32:	f000 f907 	bl	8001144 <MX_SPI1_Init>
  MX_DAC1_Init();
 8000f36:	f7ff fdb5 	bl	8000aa4 <MX_DAC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t raw_value = get_filtered_reading();
 8000f3a:	f7ff ff59 	bl	8000df0 <get_filtered_reading>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	81fb      	strh	r3, [r7, #14]
    float voltage_mv = raw_to_voltage_mV(raw_value);
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff77 	bl	8000e38 <raw_to_voltage_mV>
 8000f4a:	ed87 0a02 	vstr	s0, [r7, #8]
    float current_ma = voltage_to_current_mA(voltage_mv);
 8000f4e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f52:	f7ff ff8f 	bl	8000e74 <voltage_to_current_mA>
 8000f56:	ed87 0a01 	vstr	s0, [r7, #4]
    float percentage = ((current_ma - MIN_CURRENT_MA) / (MAX_CURRENT_MA - MIN_CURRENT_MA)) * 100.0f;
 8000f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f5e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f66:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000fd4 <main+0xc0>
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	edc7 7a00 	vstr	s15, [r7]

    sprintf(writeValue, "ADC:%4u | V:%.2fmV | I:%.2fmA | %%:%.1f\r\n", raw_value, voltage_mv, current_ma, percentage);
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f84:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f88:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f8c:	edd7 5a00 	vldr	s11, [r7]
 8000f90:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000f94:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000f98:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f9c:	ed8d 7b00 	vstr	d7, [sp]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <main+0xc4>)
 8000fa4:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <main+0xc8>)
 8000fa6:	f009 fe95 	bl	800acd4 <siprintf>
    serialPrint(writeValue);
 8000faa:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <main+0xc8>)
 8000fac:	f7ff ff9c 	bl	8000ee8 <serialPrint>
    serialPrint("---\r\n");
 8000fb0:	480b      	ldr	r0, [pc, #44]	@ (8000fe0 <main+0xcc>)
 8000fb2:	f7ff ff99 	bl	8000ee8 <serialPrint>

    HAL_Delay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fba:	f000 fdf3 	bl	8001ba4 <HAL_Delay>

    HAL_GPIO_TogglePin(ld3_GPIO_Port, ld3_Pin);  // LED AZUL - Loop ativo
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <main+0xd0>)
 8000fc2:	f003 fcfe 	bl	80049c2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000fc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fca:	f000 fdeb 	bl	8001ba4 <HAL_Delay>
  {
 8000fce:	bf00      	nop
 8000fd0:	e7b3      	b.n	8000f3a <main+0x26>
 8000fd2:	bf00      	nop
 8000fd4:	42c80000 	.word	0x42c80000
 8000fd8:	0800e40c 	.word	0x0800e40c
 8000fdc:	24000208 	.word	0x24000208
 8000fe0:	0800e438 	.word	0x0800e438
 8000fe4:	58021000 	.word	0x58021000

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09c      	sub	sp, #112	@ 0x70
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f009 fed1 	bl	800ad9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2220      	movs	r2, #32
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f009 fecb 	bl	800ad9e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001008:	2002      	movs	r0, #2
 800100a:	f003 fcf5 	bl	80049f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b31      	ldr	r3, [pc, #196]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001016:	4a30      	ldr	r2, [pc, #192]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800101e:	4b2e      	ldr	r3, [pc, #184]	@ (80010d8 <SystemClock_Config+0xf0>)
 8001020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <SystemClock_Config+0xf4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <SystemClock_Config+0xf4>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <SystemClock_Config+0xf4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001044:	bf00      	nop
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <SystemClock_Config+0xf4>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800104e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001052:	d1f8      	bne.n	8001046 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001058:	2301      	movs	r3, #1
 800105a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105c:	2340      	movs	r3, #64	@ 0x40
 800105e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001064:	2300      	movs	r3, #0
 8001066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 800106c:	230a      	movs	r3, #10
 800106e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800107c:	230c      	movs	r3, #12
 800107e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001080:	2302      	movs	r3, #2
 8001082:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fced 	bl	8004a6c <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001098:	f000 f84e 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	233f      	movs	r3, #63	@ 0x3f
 800109e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f92d 	bl	8005320 <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80010cc:	f000 f834 	bl	8001138 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3770      	adds	r7, #112	@ 0x70
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58000400 	.word	0x58000400
 80010dc:	58024800 	.word	0x58024800

080010e0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010f2:	f000 fe97 	bl	8001e24 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001102:	231f      	movs	r3, #31
 8001104:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001106:	2387      	movs	r3, #135	@ 0x87
 8001108:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800110a:	2300      	movs	r3, #0
 800110c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800110e:	2300      	movs	r3, #0
 8001110:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001122:	463b      	mov	r3, r7
 8001124:	4618      	mov	r0, r3
 8001126:	f000 feb5 	bl	8001e94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800112a:	2004      	movs	r0, #4
 800112c:	f000 fe92 	bl	8001e54 <HAL_MPU_Enable>

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001148:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <MX_SPI1_Init+0xa8>)
 800114a:	4a29      	ldr	r2, [pc, #164]	@ (80011f0 <MX_SPI1_Init+0xac>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001150:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <MX_SPI1_Init+0xa8>)
 800115e:	2207      	movs	r2, #7
 8001160:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001162:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001164:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001168:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116a:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <MX_SPI1_Init+0xa8>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001172:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001176:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001178:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_SPI1_Init+0xa8>)
 800117a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_SPI1_Init+0xa8>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_SPI1_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_SPI1_Init+0xa8>)
 800119a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_SPI1_Init+0xa8>)
 80011d8:	f006 fa5a 	bl	8007690 <HAL_SPI_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80011e2:	f7ff ffa9 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24000288 	.word	0x24000288
 80011f0:	40013000 	.word	0x40013000

080011f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0bc      	sub	sp, #240	@ 0xf0
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	22c0      	movs	r2, #192	@ 0xc0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fdc2 	bl	800ad9e <memset>
  if(spiHandle->Instance==SPI1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6a      	ldr	r2, [pc, #424]	@ (80013c8 <HAL_SPI_MspInit+0x1d4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	f040 80cc 	bne.w	80013be <HAL_SPI_MspInit+0x1ca>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001226:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001232:	2300      	movs	r3, #0
 8001234:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fbfc 	bl	8005a38 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001246:	f7ff ff77 	bl	8001138 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800124a:	4b60      	ldr	r3, [pc, #384]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 800124c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001250:	4a5e      	ldr	r2, [pc, #376]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 8001252:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001256:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800125a:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 800125c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	4a57      	ldr	r2, [pc, #348]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001278:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	4a4f      	ldr	r2, [pc, #316]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001296:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <HAL_SPI_MspInit+0x1d8>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012a4:	2360      	movs	r3, #96	@ 0x60
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012bc:	2305      	movs	r3, #5
 80012be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012c6:	4619      	mov	r1, r3
 80012c8:	4841      	ldr	r0, [pc, #260]	@ (80013d0 <HAL_SPI_MspInit+0x1dc>)
 80012ca:	f003 f9b1 	bl	8004630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ce:	2320      	movs	r3, #32
 80012d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e6:	2305      	movs	r3, #5
 80012e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012f0:	4619      	mov	r1, r3
 80012f2:	4838      	ldr	r0, [pc, #224]	@ (80013d4 <HAL_SPI_MspInit+0x1e0>)
 80012f4:	f003 f99c 	bl	8004630 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 80012f8:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 80012fa:	4a38      	ldr	r2, [pc, #224]	@ (80013dc <HAL_SPI_MspInit+0x1e8>)
 80012fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80012fe:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001300:	2225      	movs	r2, #37	@ 0x25
 8001302:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001304:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001316:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001318:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131e:	4b2e      	ldr	r3, [pc, #184]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001336:	4828      	ldr	r0, [pc, #160]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 8001338:	f000 ff54 	bl	80021e4 <HAL_DMA_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 8001342:	f7ff fef9 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 800134a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800134c:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <HAL_SPI_MspInit+0x1e4>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <HAL_SPI_MspInit+0x1f0>)
 8001356:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001358:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 800135a:	2226      	movs	r2, #38	@ 0x26
 800135c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001360:	2240      	movs	r2, #64	@ 0x40
 8001362:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 800136c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001370:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800137e:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001384:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001392:	4813      	ldr	r0, [pc, #76]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 8001394:	f000 ff26 	bl	80021e4 <HAL_DMA_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_SPI_MspInit+0x1ae>
    {
      Error_Handler();
 800139e:	f7ff fecb 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 80013a6:	679a      	str	r2, [r3, #120]	@ 0x78
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <HAL_SPI_MspInit+0x1ec>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2023      	movs	r0, #35	@ 0x23
 80013b4:	f000 fd01 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013b8:	2023      	movs	r0, #35	@ 0x23
 80013ba:	f000 fd18 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013be:	bf00      	nop
 80013c0:	37f0      	adds	r7, #240	@ 0xf0
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013000 	.word	0x40013000
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020000 	.word	0x58020000
 80013d4:	58020400 	.word	0x58020400
 80013d8:	24000310 	.word	0x24000310
 80013dc:	40020040 	.word	0x40020040
 80013e0:	24000388 	.word	0x24000388
 80013e4:	40020058 	.word	0x40020058

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_MspInit+0x30>)
 80013f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f4:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x30>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x30>)
 8001400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	58024400 	.word	0x58024400

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 fb77 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA1_Stream0_IRQHandler+0x10>)
 8001482:	f001 ff6f 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	24000498 	.word	0x24000498

08001490 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001496:	f001 ff65 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000510 	.word	0x24000510

080014a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <DMA1_Stream2_IRQHandler+0x10>)
 80014aa:	f001 ff5b 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	24000310 	.word	0x24000310

080014b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x10>)
 80014be:	f001 ff51 	bl	8003364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000388 	.word	0x24000388

080014cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <SPI1_IRQHandler+0x10>)
 80014d2:	f006 fc73 	bl	8007dbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000288 	.word	0x24000288

080014e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <USART3_IRQHandler+0x10>)
 80014e6:	f007 f81d 	bl	8008524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24000404 	.word	0x24000404

080014f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return 1;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_kill>:

int _kill(int pid, int sig)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150e:	f009 fc99 	bl	800ae44 <__errno>
 8001512:	4603      	mov	r3, r0
 8001514:	2216      	movs	r2, #22
 8001516:	601a      	str	r2, [r3, #0]
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_exit>:

void _exit (int status)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffe7 	bl	8001504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001536:	bf00      	nop
 8001538:	e7fd      	b.n	8001536 <_exit+0x12>

0800153a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e00a      	b.n	8001562 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800154c:	f3af 8000 	nop.w
 8001550:	4601      	mov	r1, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	b2ca      	uxtb	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbf0      	blt.n	800154c <_read+0x12>
  }

  return len;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800159c:	605a      	str	r2, [r3, #4]
  return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_isatty>:

int _isatty(int file)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f009 fc1a 	bl	800ae44 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24080000 	.word	0x24080000
 800163c:	00000400 	.word	0x00000400
 8001640:	24000400 	.word	0x24000400
 8001644:	240006d8 	.word	0x240006d8

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800164c:	4b43      	ldr	r3, [pc, #268]	@ (800175c <SystemInit+0x114>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001652:	4a42      	ldr	r2, [pc, #264]	@ (800175c <SystemInit+0x114>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800165c:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <SystemInit+0x118>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2b06      	cmp	r3, #6
 8001666:	d807      	bhi.n	8001678 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001668:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <SystemInit+0x118>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 030f 	bic.w	r3, r3, #15
 8001670:	4a3b      	ldr	r2, [pc, #236]	@ (8001760 <SystemInit+0x118>)
 8001672:	f043 0307 	orr.w	r3, r3, #7
 8001676:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001678:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <SystemInit+0x11c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a39      	ldr	r2, [pc, #228]	@ (8001764 <SystemInit+0x11c>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001684:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <SystemInit+0x11c>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800168a:	4b36      	ldr	r3, [pc, #216]	@ (8001764 <SystemInit+0x11c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4935      	ldr	r1, [pc, #212]	@ (8001764 <SystemInit+0x11c>)
 8001690:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <SystemInit+0x120>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001696:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <SystemInit+0x118>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001760 <SystemInit+0x118>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 030f 	bic.w	r3, r3, #15
 80016aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <SystemInit+0x118>)
 80016ac:	f043 0307 	orr.w	r3, r3, #7
 80016b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <SystemInit+0x11c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <SystemInit+0x11c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016be:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <SystemInit+0x11c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <SystemInit+0x11c>)
 80016c6:	4a29      	ldr	r2, [pc, #164]	@ (800176c <SystemInit+0x124>)
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <SystemInit+0x11c>)
 80016cc:	4a28      	ldr	r2, [pc, #160]	@ (8001770 <SystemInit+0x128>)
 80016ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <SystemInit+0x11c>)
 80016d2:	4a28      	ldr	r2, [pc, #160]	@ (8001774 <SystemInit+0x12c>)
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016d6:	4b23      	ldr	r3, [pc, #140]	@ (8001764 <SystemInit+0x11c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016dc:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <SystemInit+0x11c>)
 80016de:	4a25      	ldr	r2, [pc, #148]	@ (8001774 <SystemInit+0x12c>)
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <SystemInit+0x11c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <SystemInit+0x11c>)
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <SystemInit+0x12c>)
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <SystemInit+0x11c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <SystemInit+0x11c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <SystemInit+0x11c>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <SystemInit+0x11c>)
 8001702:	2200      	movs	r2, #0
 8001704:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <SystemInit+0x130>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <SystemInit+0x134>)
 800170c:	4013      	ands	r3, r2
 800170e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001712:	d202      	bcs.n	800171a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <SystemInit+0x138>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <SystemInit+0x11c>)
 800171c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d113      	bne.n	8001750 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <SystemInit+0x11c>)
 800172a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800172e:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <SystemInit+0x11c>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001734:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <SystemInit+0x13c>)
 800173a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800173e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <SystemInit+0x11c>)
 8001742:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001746:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <SystemInit+0x11c>)
 8001748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800174c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	52002000 	.word	0x52002000
 8001764:	58024400 	.word	0x58024400
 8001768:	eaf6ed7f 	.word	0xeaf6ed7f
 800176c:	02020200 	.word	0x02020200
 8001770:	01ff0000 	.word	0x01ff0000
 8001774:	01010280 	.word	0x01010280
 8001778:	5c001000 	.word	0x5c001000
 800177c:	ffff0000 	.word	0xffff0000
 8001780:	51008108 	.word	0x51008108
 8001784:	52004000 	.word	0x52004000

08001788 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <ExitRun0Mode+0x2c>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <ExitRun0Mode+0x2c>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001798:	bf00      	nop
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <ExitRun0Mode+0x2c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f9      	beq.n	800179a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	58024800 	.word	0x58024800

080017b8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017bc:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017be:	4a23      	ldr	r2, [pc, #140]	@ (800184c <MX_USART3_UART_Init+0x94>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001802:	f006 fdb0 	bl	8008366 <HAL_UART_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800180c:	f7ff fc94 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001814:	f008 fa98 	bl	8009d48 <HAL_UARTEx_SetTxFifoThreshold>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800181e:	f7ff fc8b 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4808      	ldr	r0, [pc, #32]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001826:	f008 facd 	bl	8009dc4 <HAL_UARTEx_SetRxFifoThreshold>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001830:	f7ff fc82 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001836:	f008 fa4e 	bl	8009cd6 <HAL_UARTEx_DisableFifoMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001840:	f7ff fc7a 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	24000404 	.word	0x24000404
 800184c:	40004800 	.word	0x40004800

08001850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ba      	sub	sp, #232	@ 0xe8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	22c0      	movs	r2, #192	@ 0xc0
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f009 fa94 	bl	800ad9e <memset>
  if(uartHandle->Instance==USART3)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a59      	ldr	r2, [pc, #356]	@ (80019e0 <HAL_UART_MspInit+0x190>)
 800187c:	4293      	cmp	r3, r2
 800187e:	f040 80aa 	bne.w	80019d6 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001882:	f04f 0202 	mov.w	r2, #2
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4618      	mov	r0, r3
 800189a:	f004 f8cd 	bl	8005a38 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80018a4:	f7ff fc48 	bl	8001138 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a8:	4b4e      	ldr	r3, [pc, #312]	@ (80019e4 <HAL_UART_MspInit+0x194>)
 80018aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ae:	4a4d      	ldr	r2, [pc, #308]	@ (80019e4 <HAL_UART_MspInit+0x194>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018b8:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <HAL_UART_MspInit+0x194>)
 80018ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_UART_MspInit+0x194>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	4a45      	ldr	r2, [pc, #276]	@ (80019e4 <HAL_UART_MspInit+0x194>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d6:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <HAL_UART_MspInit+0x194>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018fe:	2307      	movs	r3, #7
 8001900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001904:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001908:	4619      	mov	r1, r3
 800190a:	4837      	ldr	r0, [pc, #220]	@ (80019e8 <HAL_UART_MspInit+0x198>)
 800190c:	f002 fe90 	bl	8004630 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001912:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <HAL_UART_MspInit+0x1a0>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001916:	4b35      	ldr	r3, [pc, #212]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001918:	222d      	movs	r2, #45	@ 0x2d
 800191a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191c:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 800192a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001930:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800194e:	4827      	ldr	r0, [pc, #156]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001950:	f000 fc48 	bl	80021e4 <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800195a:	f7ff fbed 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_UART_MspInit+0x19c>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800196c:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 800196e:	4a22      	ldr	r2, [pc, #136]	@ (80019f8 <HAL_UART_MspInit+0x1a8>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 8001974:	222e      	movs	r2, #46	@ 0x2e
 8001976:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001978:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 8001986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800198a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019aa:	4812      	ldr	r0, [pc, #72]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 80019ac:	f000 fc1a 	bl	80021e4 <HAL_DMA_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80019b6:	f7ff fbbf 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 80019be:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <HAL_UART_MspInit+0x1a4>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2027      	movs	r0, #39	@ 0x27
 80019cc:	f000 f9f5 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019d0:	2027      	movs	r0, #39	@ 0x27
 80019d2:	f000 fa0c 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	37e8      	adds	r7, #232	@ 0xe8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40004800 	.word	0x40004800
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	24000498 	.word	0x24000498
 80019f0:	40020010 	.word	0x40020010
 80019f4:	24000510 	.word	0x24000510
 80019f8:	40020028 	.word	0x40020028

080019fc <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <_write+0x28>)
 8001a14:	f006 fcf7 	bl	8008406 <HAL_UART_Transmit>
  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	24000404 	.word	0x24000404

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a64 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a2c:	f7ff feac 	bl	8001788 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a30:	f7ff fe0a 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f009 f9f9 	bl	800ae50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5e:	f7ff fa59 	bl	8000f14 <main>
  bx  lr
 8001a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a6c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001a70:	0800e8bc 	.word	0x0800e8bc
  ldr r2, =_sbss
 8001a74:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001a78:	240006d8 	.word	0x240006d8

08001a7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC3_IRQHandler>
	...

08001a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 f98c 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a8c:	f003 fdfe 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_Init+0x68>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	4913      	ldr	r1, [pc, #76]	@ (8001aec <HAL_Init+0x6c>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_Init+0x68>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <HAL_Init+0x6c>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <HAL_Init+0x70>)
 8001ac2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8001af4 <HAL_Init+0x74>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aca:	200f      	movs	r0, #15
 8001acc:	f000 f814 	bl	8001af8 <HAL_InitTick>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e002      	b.n	8001ae0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ada:	f7ff fc85 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	58024400 	.word	0x58024400
 8001aec:	0800e440 	.word	0x0800e440
 8001af0:	24000004 	.word	0x24000004
 8001af4:	24000000 	.word	0x24000000

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b00:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_InitTick+0x60>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e021      	b.n	8001b50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_InitTick+0x64>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <HAL_InitTick+0x60>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f971 	bl	8001e0a <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 f93b 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	@ (8001b60 <HAL_InitTick+0x68>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2400000c 	.word	0x2400000c
 8001b5c:	24000000 	.word	0x24000000
 8001b60:	24000008 	.word	0x24000008

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	2400000c 	.word	0x2400000c
 8001b88:	24000588 	.word	0x24000588

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	24000588 	.word	0x24000588

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2400000c 	.word	0x2400000c

08001bec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetREVID+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	5c001000 	.word	0x5c001000

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x40>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x40>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	05fa0000 	.word	0x05fa0000

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	@ (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff40 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff90 	bl	8001cf8 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5f 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff33 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffa4 	bl	8001d60 <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e28:	f3bf 8f5f 	dmb	sy
}
 8001e2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <HAL_MPU_Disable+0x28>)
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	4a06      	ldr	r2, [pc, #24]	@ (8001e4c <HAL_MPU_Disable+0x28>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e38:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_MPU_Disable+0x2c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	e000ed90 	.word	0xe000ed90

08001e54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_MPU_Enable+0x38>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_MPU_Enable+0x3c>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <HAL_MPU_Enable+0x3c>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed90 	.word	0xe000ed90
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	785a      	ldrb	r2, [r3, #1]
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_MPU_ConfigRegion+0x7c>)
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_MPU_ConfigRegion+0x7c>)
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_MPU_ConfigRegion+0x7c>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001eb0:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <HAL_MPU_ConfigRegion+0x7c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7b1b      	ldrb	r3, [r3, #12]
 8001ebc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7adb      	ldrb	r3, [r3, #11]
 8001ec2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7a9b      	ldrb	r3, [r3, #10]
 8001eca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7b5b      	ldrb	r3, [r3, #13]
 8001ed2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7b9b      	ldrb	r3, [r3, #14]
 8001eda:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7bdb      	ldrb	r3, [r3, #15]
 8001ee2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7a5b      	ldrb	r3, [r3, #9]
 8001eea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7a1b      	ldrb	r3, [r3, #8]
 8001ef2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ef4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001efe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f00:	6113      	str	r3, [r2, #16]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed90 	.word	0xe000ed90

08001f14 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e014      	b.n	8001f50 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	791b      	ldrb	r3, [r3, #4]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fde6 	bl	8000b08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_DAC_ConfigChannel+0x1e>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e12d      	b.n	80021d6 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_DAC_ConfigChannel+0x34>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e124      	b.n	80021d6 <HAL_DAC_ConfigChannel+0x27e>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2202      	movs	r2, #2
 8001f96:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d17a      	bne.n	8002096 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fdf4 	bl	8001b8c <HAL_GetTick>
 8001fa4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d13d      	bne.n	8002028 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fac:	e018      	b.n	8001fe0 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fae:	f7ff fded 	bl	8001b8c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d911      	bls.n	8001fe0 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc2:	4b87      	ldr	r3, [pc, #540]	@ (80021e0 <HAL_DAC_ConfigChannel+0x288>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f043 0208 	orr.w	r2, r3, #8
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0fa      	b.n	80021d6 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe6:	4b7e      	ldr	r3, [pc, #504]	@ (80021e0 <HAL_DAC_ConfigChannel+0x288>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1df      	bne.n	8001fae <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	6992      	ldr	r2, [r2, #24]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ff8:	e020      	b.n	800203c <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ffa:	f7ff fdc7 	bl	8001b8c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d90f      	bls.n	8002028 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200e:	2b00      	cmp	r3, #0
 8002010:	da0a      	bge.n	8002028 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f043 0208 	orr.w	r2, r3, #8
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2203      	movs	r2, #3
 8002022:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0d6      	b.n	80021d6 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	2b00      	cmp	r3, #0
 8002030:	dbe3      	blt.n	8001ffa <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	6992      	ldr	r2, [r2, #24]
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	ea02 0103 	and.w	r1, r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	21ff      	movs	r1, #255	@ 0xff
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	ea02 0103 	and.w	r1, r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d11d      	bne.n	80020da <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
 8002102:	e00f      	b.n	8002124 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d102      	bne.n	8002112 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800210c:	2301      	movs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002110:	e008      	b.n	8002124 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800211a:	2301      	movs	r3, #1
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
 800211e:	e001      	b.n	8002124 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4313      	orrs	r3, r2
 800212e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	22c0      	movs	r2, #192	@ 0xc0
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80021d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20008000 	.word	0x20008000

080021e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fcce 	bl	8001b8c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e316      	b.n	800282a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a66      	ldr	r2, [pc, #408]	@ (800239c <HAL_DMA_Init+0x1b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04a      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_DMA_Init+0x1bc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d045      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a63      	ldr	r2, [pc, #396]	@ (80023a4 <HAL_DMA_Init+0x1c0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d040      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a62      	ldr	r2, [pc, #392]	@ (80023a8 <HAL_DMA_Init+0x1c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d03b      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a60      	ldr	r2, [pc, #384]	@ (80023ac <HAL_DMA_Init+0x1c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d036      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5f      	ldr	r2, [pc, #380]	@ (80023b0 <HAL_DMA_Init+0x1cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d031      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5d      	ldr	r2, [pc, #372]	@ (80023b4 <HAL_DMA_Init+0x1d0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02c      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5c      	ldr	r2, [pc, #368]	@ (80023b8 <HAL_DMA_Init+0x1d4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d027      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a5a      	ldr	r2, [pc, #360]	@ (80023bc <HAL_DMA_Init+0x1d8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d022      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a59      	ldr	r2, [pc, #356]	@ (80023c0 <HAL_DMA_Init+0x1dc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01d      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a57      	ldr	r2, [pc, #348]	@ (80023c4 <HAL_DMA_Init+0x1e0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d018      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a56      	ldr	r2, [pc, #344]	@ (80023c8 <HAL_DMA_Init+0x1e4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a54      	ldr	r2, [pc, #336]	@ (80023cc <HAL_DMA_Init+0x1e8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00e      	beq.n	800229c <HAL_DMA_Init+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a53      	ldr	r2, [pc, #332]	@ (80023d0 <HAL_DMA_Init+0x1ec>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a51      	ldr	r2, [pc, #324]	@ (80023d4 <HAL_DMA_Init+0x1f0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_DMA_Init+0xb8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a50      	ldr	r2, [pc, #320]	@ (80023d8 <HAL_DMA_Init+0x1f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Init+0xbc>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_DMA_Init+0xbe>
 80022a0:	2300      	movs	r3, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 813b 	beq.w	800251e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a37      	ldr	r2, [pc, #220]	@ (800239c <HAL_DMA_Init+0x1b8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a36      	ldr	r2, [pc, #216]	@ (80023a0 <HAL_DMA_Init+0x1bc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d045      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a34      	ldr	r2, [pc, #208]	@ (80023a4 <HAL_DMA_Init+0x1c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	@ (80023a8 <HAL_DMA_Init+0x1c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03b      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <HAL_DMA_Init+0x1c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a30      	ldr	r2, [pc, #192]	@ (80023b0 <HAL_DMA_Init+0x1cc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2e      	ldr	r2, [pc, #184]	@ (80023b4 <HAL_DMA_Init+0x1d0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <HAL_DMA_Init+0x1d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d027      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2b      	ldr	r2, [pc, #172]	@ (80023bc <HAL_DMA_Init+0x1d8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2a      	ldr	r2, [pc, #168]	@ (80023c0 <HAL_DMA_Init+0x1dc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <HAL_DMA_Init+0x1e0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a27      	ldr	r2, [pc, #156]	@ (80023c8 <HAL_DMA_Init+0x1e4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <HAL_DMA_Init+0x1e8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Init+0x174>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a24      	ldr	r2, [pc, #144]	@ (80023d0 <HAL_DMA_Init+0x1ec>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Init+0x174>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <HAL_DMA_Init+0x1f0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Init+0x174>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a21      	ldr	r2, [pc, #132]	@ (80023d8 <HAL_DMA_Init+0x1f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <HAL_DMA_Init+0x186>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e007      	b.n	800237a <HAL_DMA_Init+0x196>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800237a:	e02f      	b.n	80023dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237c:	f7ff fc06 	bl	8001b8c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d928      	bls.n	80023dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e246      	b.n	800282a <HAL_DMA_Init+0x646>
 800239c:	40020010 	.word	0x40020010
 80023a0:	40020028 	.word	0x40020028
 80023a4:	40020040 	.word	0x40020040
 80023a8:	40020058 	.word	0x40020058
 80023ac:	40020070 	.word	0x40020070
 80023b0:	40020088 	.word	0x40020088
 80023b4:	400200a0 	.word	0x400200a0
 80023b8:	400200b8 	.word	0x400200b8
 80023bc:	40020410 	.word	0x40020410
 80023c0:	40020428 	.word	0x40020428
 80023c4:	40020440 	.word	0x40020440
 80023c8:	40020458 	.word	0x40020458
 80023cc:	40020470 	.word	0x40020470
 80023d0:	40020488 	.word	0x40020488
 80023d4:	400204a0 	.word	0x400204a0
 80023d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1c8      	bne.n	800237c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4b83      	ldr	r3, [pc, #524]	@ (8002604 <HAL_DMA_Init+0x420>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002402:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	4313      	orrs	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002440:	4b71      	ldr	r3, [pc, #452]	@ (8002608 <HAL_DMA_Init+0x424>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b71      	ldr	r3, [pc, #452]	@ (800260c <HAL_DMA_Init+0x428>)
 8002446:	4013      	ands	r3, r2
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800244c:	d328      	bcc.n	80024a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b28      	cmp	r3, #40	@ 0x28
 8002454:	d903      	bls.n	800245e <HAL_DMA_Init+0x27a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b2e      	cmp	r3, #46	@ 0x2e
 800245c:	d917      	bls.n	800248e <HAL_DMA_Init+0x2aa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b3e      	cmp	r3, #62	@ 0x3e
 8002464:	d903      	bls.n	800246e <HAL_DMA_Init+0x28a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b42      	cmp	r3, #66	@ 0x42
 800246c:	d90f      	bls.n	800248e <HAL_DMA_Init+0x2aa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b46      	cmp	r3, #70	@ 0x46
 8002474:	d903      	bls.n	800247e <HAL_DMA_Init+0x29a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b48      	cmp	r3, #72	@ 0x48
 800247c:	d907      	bls.n	800248e <HAL_DMA_Init+0x2aa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b4e      	cmp	r3, #78	@ 0x4e
 8002484:	d905      	bls.n	8002492 <HAL_DMA_Init+0x2ae>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b52      	cmp	r3, #82	@ 0x52
 800248c:	d801      	bhi.n	8002492 <HAL_DMA_Init+0x2ae>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_DMA_Init+0x2b0>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800249e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f023 0307 	bic.w	r3, r3, #7
 80024b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d117      	bne.n	80024fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f001 ff1d 	bl	800431c <DMA_CheckFifoParam>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2240      	movs	r2, #64	@ 0x40
 80024ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e197      	b.n	800282a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f001 fe58 	bl	80041b8 <DMA_CalcBaseAndBitshift>
 8002508:	4603      	mov	r3, r0
 800250a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	223f      	movs	r2, #63	@ 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e0cd      	b.n	80026ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3b      	ldr	r2, [pc, #236]	@ (8002610 <HAL_DMA_Init+0x42c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	@ (8002614 <HAL_DMA_Init+0x430>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01d      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a38      	ldr	r2, [pc, #224]	@ (8002618 <HAL_DMA_Init+0x434>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d018      	beq.n	800256e <HAL_DMA_Init+0x38a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a36      	ldr	r2, [pc, #216]	@ (800261c <HAL_DMA_Init+0x438>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a35      	ldr	r2, [pc, #212]	@ (8002620 <HAL_DMA_Init+0x43c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a33      	ldr	r2, [pc, #204]	@ (8002624 <HAL_DMA_Init+0x440>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_DMA_Init+0x38a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a32      	ldr	r2, [pc, #200]	@ (8002628 <HAL_DMA_Init+0x444>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_DMA_Init+0x38a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a30      	ldr	r2, [pc, #192]	@ (800262c <HAL_DMA_Init+0x448>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Init+0x38e>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_DMA_Init+0x390>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8097 	beq.w	80026a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a24      	ldr	r2, [pc, #144]	@ (8002610 <HAL_DMA_Init+0x42c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d021      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a22      	ldr	r2, [pc, #136]	@ (8002614 <HAL_DMA_Init+0x430>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01c      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <HAL_DMA_Init+0x434>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d017      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_DMA_Init+0x438>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d012      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002620 <HAL_DMA_Init+0x43c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002624 <HAL_DMA_Init+0x440>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d008      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_DMA_Init+0x444>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <HAL_DMA_Init+0x3e4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_DMA_Init+0x448>)
 80025c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_DMA_Init+0x44c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b40      	cmp	r3, #64	@ 0x40
 80025ee:	d021      	beq.n	8002634 <HAL_DMA_Init+0x450>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b80      	cmp	r3, #128	@ 0x80
 80025f6:	d102      	bne.n	80025fe <HAL_DMA_Init+0x41a>
 80025f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025fc:	e01b      	b.n	8002636 <HAL_DMA_Init+0x452>
 80025fe:	2300      	movs	r3, #0
 8002600:	e019      	b.n	8002636 <HAL_DMA_Init+0x452>
 8002602:	bf00      	nop
 8002604:	fe10803f 	.word	0xfe10803f
 8002608:	5c001000 	.word	0x5c001000
 800260c:	ffff0000 	.word	0xffff0000
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494
 8002630:	fffe000f 	.word	0xfffe000f
 8002634:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800263c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800264c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800265c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002664:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b6e      	ldr	r3, [pc, #440]	@ (8002834 <HAL_DMA_Init+0x650>)
 800267c:	4413      	add	r3, r2
 800267e:	4a6e      	ldr	r2, [pc, #440]	@ (8002838 <HAL_DMA_Init+0x654>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	009a      	lsls	r2, r3, #2
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 fd93 	bl	80041b8 <DMA_CalcBaseAndBitshift>
 8002692:	4603      	mov	r3, r0
 8002694:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e008      	b.n	80026ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2240      	movs	r2, #64	@ 0x40
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0b7      	b.n	800282a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a5f      	ldr	r2, [pc, #380]	@ (800283c <HAL_DMA_Init+0x658>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d072      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002840 <HAL_DMA_Init+0x65c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d06d      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002844 <HAL_DMA_Init+0x660>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d068      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002848 <HAL_DMA_Init+0x664>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d063      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a59      	ldr	r2, [pc, #356]	@ (800284c <HAL_DMA_Init+0x668>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d05e      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a57      	ldr	r2, [pc, #348]	@ (8002850 <HAL_DMA_Init+0x66c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d059      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a56      	ldr	r2, [pc, #344]	@ (8002854 <HAL_DMA_Init+0x670>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d054      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a54      	ldr	r2, [pc, #336]	@ (8002858 <HAL_DMA_Init+0x674>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d04f      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a53      	ldr	r2, [pc, #332]	@ (800285c <HAL_DMA_Init+0x678>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d04a      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a51      	ldr	r2, [pc, #324]	@ (8002860 <HAL_DMA_Init+0x67c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d045      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a50      	ldr	r2, [pc, #320]	@ (8002864 <HAL_DMA_Init+0x680>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d040      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <HAL_DMA_Init+0x684>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d03b      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4d      	ldr	r2, [pc, #308]	@ (800286c <HAL_DMA_Init+0x688>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d036      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a4b      	ldr	r2, [pc, #300]	@ (8002870 <HAL_DMA_Init+0x68c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d031      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4a      	ldr	r2, [pc, #296]	@ (8002874 <HAL_DMA_Init+0x690>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d02c      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a48      	ldr	r2, [pc, #288]	@ (8002878 <HAL_DMA_Init+0x694>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d027      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a47      	ldr	r2, [pc, #284]	@ (800287c <HAL_DMA_Init+0x698>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a45      	ldr	r2, [pc, #276]	@ (8002880 <HAL_DMA_Init+0x69c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a44      	ldr	r2, [pc, #272]	@ (8002884 <HAL_DMA_Init+0x6a0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a42      	ldr	r2, [pc, #264]	@ (8002888 <HAL_DMA_Init+0x6a4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a41      	ldr	r2, [pc, #260]	@ (800288c <HAL_DMA_Init+0x6a8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3f      	ldr	r2, [pc, #252]	@ (8002890 <HAL_DMA_Init+0x6ac>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3e      	ldr	r2, [pc, #248]	@ (8002894 <HAL_DMA_Init+0x6b0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_DMA_Init+0x5c6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002898 <HAL_DMA_Init+0x6b4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_DMA_Init+0x5ca>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_Init+0x5cc>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d032      	beq.n	800281a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f001 fe2d 	bl	8004414 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b80      	cmp	r3, #128	@ 0x80
 80027c0:	d102      	bne.n	80027c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_DMA_Init+0x624>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d80c      	bhi.n	8002808 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f001 feaa 	bl	8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e008      	b.n	800281a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	a7fdabf8 	.word	0xa7fdabf8
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	58025408 	.word	0x58025408
 8002880:	5802541c 	.word	0x5802541c
 8002884:	58025430 	.word	0x58025430
 8002888:	58025444 	.word	0x58025444
 800288c:	58025458 	.word	0x58025458
 8002890:	5802546c 	.word	0x5802546c
 8002894:	58025480 	.word	0x58025480
 8002898:	58025494 	.word	0x58025494

0800289c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff f972 	bl	8001b8c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e2dc      	b.n	8002e6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d008      	beq.n	80028d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e2cd      	b.n	8002e6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a76      	ldr	r2, [pc, #472]	@ (8002ab0 <HAL_DMA_Abort+0x214>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a74      	ldr	r2, [pc, #464]	@ (8002ab4 <HAL_DMA_Abort+0x218>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a73      	ldr	r2, [pc, #460]	@ (8002ab8 <HAL_DMA_Abort+0x21c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a71      	ldr	r2, [pc, #452]	@ (8002abc <HAL_DMA_Abort+0x220>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a70      	ldr	r2, [pc, #448]	@ (8002ac0 <HAL_DMA_Abort+0x224>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac4 <HAL_DMA_Abort+0x228>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6d      	ldr	r2, [pc, #436]	@ (8002ac8 <HAL_DMA_Abort+0x22c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6b      	ldr	r2, [pc, #428]	@ (8002acc <HAL_DMA_Abort+0x230>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad0 <HAL_DMA_Abort+0x234>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	@ (8002ad4 <HAL_DMA_Abort+0x238>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a67      	ldr	r2, [pc, #412]	@ (8002ad8 <HAL_DMA_Abort+0x23c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a65      	ldr	r2, [pc, #404]	@ (8002adc <HAL_DMA_Abort+0x240>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a64      	ldr	r2, [pc, #400]	@ (8002ae0 <HAL_DMA_Abort+0x244>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a62      	ldr	r2, [pc, #392]	@ (8002ae4 <HAL_DMA_Abort+0x248>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_DMA_Abort+0x24c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort+0xd6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5f      	ldr	r2, [pc, #380]	@ (8002aec <HAL_DMA_Abort+0x250>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_DMA_Abort+0xda>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_DMA_Abort+0xdc>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 021e 	bic.w	r2, r2, #30
 800298a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e00a      	b.n	80029ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 020e 	bic.w	r2, r2, #14
 80029b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab0 <HAL_DMA_Abort+0x214>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d072      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab4 <HAL_DMA_Abort+0x218>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d06d      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a39      	ldr	r2, [pc, #228]	@ (8002ab8 <HAL_DMA_Abort+0x21c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d068      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a37      	ldr	r2, [pc, #220]	@ (8002abc <HAL_DMA_Abort+0x220>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d063      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a36      	ldr	r2, [pc, #216]	@ (8002ac0 <HAL_DMA_Abort+0x224>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d05e      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a34      	ldr	r2, [pc, #208]	@ (8002ac4 <HAL_DMA_Abort+0x228>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d059      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a33      	ldr	r2, [pc, #204]	@ (8002ac8 <HAL_DMA_Abort+0x22c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d054      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a31      	ldr	r2, [pc, #196]	@ (8002acc <HAL_DMA_Abort+0x230>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04f      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_DMA_Abort+0x234>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d04a      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad4 <HAL_DMA_Abort+0x238>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d045      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad8 <HAL_DMA_Abort+0x23c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d040      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002adc <HAL_DMA_Abort+0x240>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d03b      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae0 <HAL_DMA_Abort+0x244>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d036      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a28      	ldr	r2, [pc, #160]	@ (8002ae4 <HAL_DMA_Abort+0x248>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d031      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ae8 <HAL_DMA_Abort+0x24c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d02c      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a25      	ldr	r2, [pc, #148]	@ (8002aec <HAL_DMA_Abort+0x250>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d027      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_DMA_Abort+0x254>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <HAL_DMA_Abort+0x258>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <HAL_DMA_Abort+0x25c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002afc <HAL_DMA_Abort+0x260>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <HAL_DMA_Abort+0x264>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_DMA_Abort+0x268>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b08 <HAL_DMA_Abort+0x26c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_DMA_Abort+0x20e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	@ (8002b0c <HAL_DMA_Abort+0x270>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d132      	bne.n	8002b10 <HAL_DMA_Abort+0x274>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e031      	b.n	8002b12 <HAL_DMA_Abort+0x276>
 8002aae:	bf00      	nop
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	58025408 	.word	0x58025408
 8002af4:	5802541c 	.word	0x5802541c
 8002af8:	58025430 	.word	0x58025430
 8002afc:	58025444 	.word	0x58025444
 8002b00:	58025458 	.word	0x58025458
 8002b04:	5802546c 	.word	0x5802546c
 8002b08:	58025480 	.word	0x58025480
 8002b0c:	58025494 	.word	0x58025494
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ce0 <HAL_DMA_Abort+0x444>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d04a      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce4 <HAL_DMA_Abort+0x448>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d045      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce8 <HAL_DMA_Abort+0x44c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d040      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a68      	ldr	r2, [pc, #416]	@ (8002cec <HAL_DMA_Abort+0x450>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a67      	ldr	r2, [pc, #412]	@ (8002cf0 <HAL_DMA_Abort+0x454>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d036      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_DMA_Abort+0x458>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d031      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a64      	ldr	r2, [pc, #400]	@ (8002cf8 <HAL_DMA_Abort+0x45c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d02c      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a62      	ldr	r2, [pc, #392]	@ (8002cfc <HAL_DMA_Abort+0x460>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d027      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a61      	ldr	r2, [pc, #388]	@ (8002d00 <HAL_DMA_Abort+0x464>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d022      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <HAL_DMA_Abort+0x468>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_DMA_Abort+0x46c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5c      	ldr	r2, [pc, #368]	@ (8002d0c <HAL_DMA_Abort+0x470>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d10 <HAL_DMA_Abort+0x474>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a59      	ldr	r2, [pc, #356]	@ (8002d14 <HAL_DMA_Abort+0x478>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a58      	ldr	r2, [pc, #352]	@ (8002d18 <HAL_DMA_Abort+0x47c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_DMA_Abort+0x32a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a56      	ldr	r2, [pc, #344]	@ (8002d1c <HAL_DMA_Abort+0x480>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_Abort+0x33c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_DMA_Abort+0x34c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002be8:	e013      	b.n	8002c12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bea:	f7fe ffcf 	bl	8001b8c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d90c      	bls.n	8002c12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e12d      	b.n	8002e6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e5      	bne.n	8002bea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce0 <HAL_DMA_Abort+0x444>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce4 <HAL_DMA_Abort+0x448>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <HAL_DMA_Abort+0x44c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2a      	ldr	r2, [pc, #168]	@ (8002cec <HAL_DMA_Abort+0x450>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a29      	ldr	r2, [pc, #164]	@ (8002cf0 <HAL_DMA_Abort+0x454>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a27      	ldr	r2, [pc, #156]	@ (8002cf4 <HAL_DMA_Abort+0x458>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a26      	ldr	r2, [pc, #152]	@ (8002cf8 <HAL_DMA_Abort+0x45c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a24      	ldr	r2, [pc, #144]	@ (8002cfc <HAL_DMA_Abort+0x460>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <HAL_DMA_Abort+0x464>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <HAL_DMA_Abort+0x468>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a20      	ldr	r2, [pc, #128]	@ (8002d08 <HAL_DMA_Abort+0x46c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1e      	ldr	r2, [pc, #120]	@ (8002d0c <HAL_DMA_Abort+0x470>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <HAL_DMA_Abort+0x474>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <HAL_DMA_Abort+0x478>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <HAL_DMA_Abort+0x47c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Abort+0x422>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <HAL_DMA_Abort+0x480>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Abort+0x426>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Abort+0x428>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02b      	beq.n	8002d20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	223f      	movs	r2, #63	@ 0x3f
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	e02a      	b.n	8002d36 <HAL_DMA_Abort+0x49a>
 8002ce0:	40020010 	.word	0x40020010
 8002ce4:	40020028 	.word	0x40020028
 8002ce8:	40020040 	.word	0x40020040
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	40020070 	.word	0x40020070
 8002cf4:	40020088 	.word	0x40020088
 8002cf8:	400200a0 	.word	0x400200a0
 8002cfc:	400200b8 	.word	0x400200b8
 8002d00:	40020410 	.word	0x40020410
 8002d04:	40020428 	.word	0x40020428
 8002d08:	40020440 	.word	0x40020440
 8002d0c:	40020458 	.word	0x40020458
 8002d10:	40020470 	.word	0x40020470
 8002d14:	40020488 	.word	0x40020488
 8002d18:	400204a0 	.word	0x400204a0
 8002d1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2201      	movs	r2, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e78 <HAL_DMA_Abort+0x5dc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d072      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a4d      	ldr	r2, [pc, #308]	@ (8002e7c <HAL_DMA_Abort+0x5e0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d06d      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e80 <HAL_DMA_Abort+0x5e4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d068      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4a      	ldr	r2, [pc, #296]	@ (8002e84 <HAL_DMA_Abort+0x5e8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d063      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <HAL_DMA_Abort+0x5ec>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d05e      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a47      	ldr	r2, [pc, #284]	@ (8002e8c <HAL_DMA_Abort+0x5f0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d059      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a46      	ldr	r2, [pc, #280]	@ (8002e90 <HAL_DMA_Abort+0x5f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d054      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a44      	ldr	r2, [pc, #272]	@ (8002e94 <HAL_DMA_Abort+0x5f8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04f      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	@ (8002e98 <HAL_DMA_Abort+0x5fc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d04a      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a41      	ldr	r2, [pc, #260]	@ (8002e9c <HAL_DMA_Abort+0x600>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d045      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ea0 <HAL_DMA_Abort+0x604>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d040      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ea4 <HAL_DMA_Abort+0x608>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d03b      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ea8 <HAL_DMA_Abort+0x60c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d036      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_DMA_Abort+0x610>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d031      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb0 <HAL_DMA_Abort+0x614>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d02c      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a38      	ldr	r2, [pc, #224]	@ (8002eb4 <HAL_DMA_Abort+0x618>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d027      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a37      	ldr	r2, [pc, #220]	@ (8002eb8 <HAL_DMA_Abort+0x61c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a35      	ldr	r2, [pc, #212]	@ (8002ebc <HAL_DMA_Abort+0x620>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01d      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a34      	ldr	r2, [pc, #208]	@ (8002ec0 <HAL_DMA_Abort+0x624>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <HAL_DMA_Abort+0x628>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a31      	ldr	r2, [pc, #196]	@ (8002ec8 <HAL_DMA_Abort+0x62c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <HAL_DMA_Abort+0x630>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed0 <HAL_DMA_Abort+0x634>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_DMA_Abort+0x58a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <HAL_DMA_Abort+0x638>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_DMA_Abort+0x58e>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_DMA_Abort+0x590>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00c      	beq.n	8002e5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020010 	.word	0x40020010
 8002e7c:	40020028 	.word	0x40020028
 8002e80:	40020040 	.word	0x40020040
 8002e84:	40020058 	.word	0x40020058
 8002e88:	40020070 	.word	0x40020070
 8002e8c:	40020088 	.word	0x40020088
 8002e90:	400200a0 	.word	0x400200a0
 8002e94:	400200b8 	.word	0x400200b8
 8002e98:	40020410 	.word	0x40020410
 8002e9c:	40020428 	.word	0x40020428
 8002ea0:	40020440 	.word	0x40020440
 8002ea4:	40020458 	.word	0x40020458
 8002ea8:	40020470 	.word	0x40020470
 8002eac:	40020488 	.word	0x40020488
 8002eb0:	400204a0 	.word	0x400204a0
 8002eb4:	400204b8 	.word	0x400204b8
 8002eb8:	58025408 	.word	0x58025408
 8002ebc:	5802541c 	.word	0x5802541c
 8002ec0:	58025430 	.word	0x58025430
 8002ec4:	58025444 	.word	0x58025444
 8002ec8:	58025458 	.word	0x58025458
 8002ecc:	5802546c 	.word	0x5802546c
 8002ed0:	58025480 	.word	0x58025480
 8002ed4:	58025494 	.word	0x58025494

08002ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e237      	b.n	800335a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2280      	movs	r2, #128	@ 0x80
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e22c      	b.n	800335a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5c      	ldr	r2, [pc, #368]	@ (8003078 <HAL_DMA_Abort_IT+0x1a0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04a      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800307c <HAL_DMA_Abort_IT+0x1a4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d045      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a59      	ldr	r2, [pc, #356]	@ (8003080 <HAL_DMA_Abort_IT+0x1a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d040      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a58      	ldr	r2, [pc, #352]	@ (8003084 <HAL_DMA_Abort_IT+0x1ac>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d03b      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_DMA_Abort_IT+0x1b0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d036      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a55      	ldr	r2, [pc, #340]	@ (800308c <HAL_DMA_Abort_IT+0x1b4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a53      	ldr	r2, [pc, #332]	@ (8003090 <HAL_DMA_Abort_IT+0x1b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02c      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a52      	ldr	r2, [pc, #328]	@ (8003094 <HAL_DMA_Abort_IT+0x1bc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d027      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_DMA_Abort_IT+0x1c0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800309c <HAL_DMA_Abort_IT+0x1c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01d      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_DMA_Abort_IT+0x1c8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4c      	ldr	r2, [pc, #304]	@ (80030a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80030a8 <HAL_DMA_Abort_IT+0x1d0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a49      	ldr	r2, [pc, #292]	@ (80030ac <HAL_DMA_Abort_IT+0x1d4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a47      	ldr	r2, [pc, #284]	@ (80030b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xc8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a46      	ldr	r2, [pc, #280]	@ (80030b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_DMA_Abort_IT+0xcc>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_Abort_IT+0xce>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8086 	beq.w	80030b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003078 <HAL_DMA_Abort_IT+0x1a0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04a      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_DMA_Abort_IT+0x1a4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d045      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8003080 <HAL_DMA_Abort_IT+0x1a8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d040      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <HAL_DMA_Abort_IT+0x1ac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d03b      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <HAL_DMA_Abort_IT+0x1b0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d036      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a28      	ldr	r2, [pc, #160]	@ (800308c <HAL_DMA_Abort_IT+0x1b4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d031      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <HAL_DMA_Abort_IT+0x1b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02c      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_DMA_Abort_IT+0x1bc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d027      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <HAL_DMA_Abort_IT+0x1c0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_Abort_IT+0x1c4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01d      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a20      	ldr	r2, [pc, #128]	@ (80030a0 <HAL_DMA_Abort_IT+0x1c8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_DMA_Abort_IT+0x1cc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <HAL_DMA_Abort_IT+0x1d0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_DMA_Abort_IT+0x1d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <HAL_DMA_Abort_IT+0x1d8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_Abort_IT+0x17c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_DMA_Abort_IT+0x1dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <HAL_DMA_Abort_IT+0x18e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e178      	b.n	8003358 <HAL_DMA_Abort_IT+0x480>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e16f      	b.n	8003358 <HAL_DMA_Abort_IT+0x480>
 8003078:	40020010 	.word	0x40020010
 800307c:	40020028 	.word	0x40020028
 8003080:	40020040 	.word	0x40020040
 8003084:	40020058 	.word	0x40020058
 8003088:	40020070 	.word	0x40020070
 800308c:	40020088 	.word	0x40020088
 8003090:	400200a0 	.word	0x400200a0
 8003094:	400200b8 	.word	0x400200b8
 8003098:	40020410 	.word	0x40020410
 800309c:	40020428 	.word	0x40020428
 80030a0:	40020440 	.word	0x40020440
 80030a4:	40020458 	.word	0x40020458
 80030a8:	40020470 	.word	0x40020470
 80030ac:	40020488 	.word	0x40020488
 80030b0:	400204a0 	.word	0x400204a0
 80030b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 020e 	bic.w	r2, r2, #14
 80030c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6c      	ldr	r2, [pc, #432]	@ (8003280 <HAL_DMA_Abort_IT+0x3a8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d04a      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003284 <HAL_DMA_Abort_IT+0x3ac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d045      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <HAL_DMA_Abort_IT+0x3b0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d040      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a68      	ldr	r2, [pc, #416]	@ (800328c <HAL_DMA_Abort_IT+0x3b4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d03b      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a66      	ldr	r2, [pc, #408]	@ (8003290 <HAL_DMA_Abort_IT+0x3b8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d036      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a65      	ldr	r2, [pc, #404]	@ (8003294 <HAL_DMA_Abort_IT+0x3bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d031      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a63      	ldr	r2, [pc, #396]	@ (8003298 <HAL_DMA_Abort_IT+0x3c0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02c      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a62      	ldr	r2, [pc, #392]	@ (800329c <HAL_DMA_Abort_IT+0x3c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d027      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a60      	ldr	r2, [pc, #384]	@ (80032a0 <HAL_DMA_Abort_IT+0x3c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d022      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5f      	ldr	r2, [pc, #380]	@ (80032a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01d      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5d      	ldr	r2, [pc, #372]	@ (80032a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d018      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5c      	ldr	r2, [pc, #368]	@ (80032ac <HAL_DMA_Abort_IT+0x3d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5a      	ldr	r2, [pc, #360]	@ (80032b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a59      	ldr	r2, [pc, #356]	@ (80032b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d009      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a57      	ldr	r2, [pc, #348]	@ (80032b8 <HAL_DMA_Abort_IT+0x3e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_DMA_Abort_IT+0x290>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_DMA_Abort_IT+0x3e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <HAL_DMA_Abort_IT+0x2a2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e007      	b.n	800318a <HAL_DMA_Abort_IT+0x2b2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a3c      	ldr	r2, [pc, #240]	@ (8003280 <HAL_DMA_Abort_IT+0x3a8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d072      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3a      	ldr	r2, [pc, #232]	@ (8003284 <HAL_DMA_Abort_IT+0x3ac>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d06d      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a39      	ldr	r2, [pc, #228]	@ (8003288 <HAL_DMA_Abort_IT+0x3b0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d068      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a37      	ldr	r2, [pc, #220]	@ (800328c <HAL_DMA_Abort_IT+0x3b4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a36      	ldr	r2, [pc, #216]	@ (8003290 <HAL_DMA_Abort_IT+0x3b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05e      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <HAL_DMA_Abort_IT+0x3bc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d059      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <HAL_DMA_Abort_IT+0x3c0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d054      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a31      	ldr	r2, [pc, #196]	@ (800329c <HAL_DMA_Abort_IT+0x3c4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04f      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a30      	ldr	r2, [pc, #192]	@ (80032a0 <HAL_DMA_Abort_IT+0x3c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2e      	ldr	r2, [pc, #184]	@ (80032a4 <HAL_DMA_Abort_IT+0x3cc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2d      	ldr	r2, [pc, #180]	@ (80032a8 <HAL_DMA_Abort_IT+0x3d0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2b      	ldr	r2, [pc, #172]	@ (80032ac <HAL_DMA_Abort_IT+0x3d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2a      	ldr	r2, [pc, #168]	@ (80032b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a28      	ldr	r2, [pc, #160]	@ (80032b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a27      	ldr	r2, [pc, #156]	@ (80032b8 <HAL_DMA_Abort_IT+0x3e0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a25      	ldr	r2, [pc, #148]	@ (80032bc <HAL_DMA_Abort_IT+0x3e4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a24      	ldr	r2, [pc, #144]	@ (80032c0 <HAL_DMA_Abort_IT+0x3e8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <HAL_DMA_Abort_IT+0x3ec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a21      	ldr	r2, [pc, #132]	@ (80032c8 <HAL_DMA_Abort_IT+0x3f0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	@ (80032cc <HAL_DMA_Abort_IT+0x3f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <HAL_DMA_Abort_IT+0x3f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <HAL_DMA_Abort_IT+0x3fc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1b      	ldr	r2, [pc, #108]	@ (80032d8 <HAL_DMA_Abort_IT+0x400>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_Abort_IT+0x3a2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <HAL_DMA_Abort_IT+0x404>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d132      	bne.n	80032e0 <HAL_DMA_Abort_IT+0x408>
 800327a:	2301      	movs	r3, #1
 800327c:	e031      	b.n	80032e2 <HAL_DMA_Abort_IT+0x40a>
 800327e:	bf00      	nop
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
 80032c0:	58025408 	.word	0x58025408
 80032c4:	5802541c 	.word	0x5802541c
 80032c8:	58025430 	.word	0x58025430
 80032cc:	58025444 	.word	0x58025444
 80032d0:	58025458 	.word	0x58025458
 80032d4:	5802546c 	.word	0x5802546c
 80032d8:	58025480 	.word	0x58025480
 80032dc:	58025494 	.word	0x58025494
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003314:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800332c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003336:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop

08003364 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	@ 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003370:	4b67      	ldr	r3, [pc, #412]	@ (8003510 <HAL_DMA_IRQHandler+0x1ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <HAL_DMA_IRQHandler+0x1b0>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a5f      	ldr	r2, [pc, #380]	@ (8003518 <HAL_DMA_IRQHandler+0x1b4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d04a      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5d      	ldr	r2, [pc, #372]	@ (800351c <HAL_DMA_IRQHandler+0x1b8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d045      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003520 <HAL_DMA_IRQHandler+0x1bc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d040      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003524 <HAL_DMA_IRQHandler+0x1c0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d03b      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a59      	ldr	r2, [pc, #356]	@ (8003528 <HAL_DMA_IRQHandler+0x1c4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d036      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a57      	ldr	r2, [pc, #348]	@ (800352c <HAL_DMA_IRQHandler+0x1c8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_DMA_IRQHandler+0x1cc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d02c      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a54      	ldr	r2, [pc, #336]	@ (8003534 <HAL_DMA_IRQHandler+0x1d0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d027      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a53      	ldr	r2, [pc, #332]	@ (8003538 <HAL_DMA_IRQHandler+0x1d4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d022      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a51      	ldr	r2, [pc, #324]	@ (800353c <HAL_DMA_IRQHandler+0x1d8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01d      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a50      	ldr	r2, [pc, #320]	@ (8003540 <HAL_DMA_IRQHandler+0x1dc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d018      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a4e      	ldr	r2, [pc, #312]	@ (8003544 <HAL_DMA_IRQHandler+0x1e0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a4d      	ldr	r2, [pc, #308]	@ (8003548 <HAL_DMA_IRQHandler+0x1e4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00e      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4b      	ldr	r2, [pc, #300]	@ (800354c <HAL_DMA_IRQHandler+0x1e8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d009      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4a      	ldr	r2, [pc, #296]	@ (8003550 <HAL_DMA_IRQHandler+0x1ec>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d004      	beq.n	8003436 <HAL_DMA_IRQHandler+0xd2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a48      	ldr	r2, [pc, #288]	@ (8003554 <HAL_DMA_IRQHandler+0x1f0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_DMA_IRQHandler+0xd6>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_DMA_IRQHandler+0xd8>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 842b 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2208      	movs	r2, #8
 800344c:	409a      	lsls	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a2 	beq.w	800359c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2e      	ldr	r2, [pc, #184]	@ (8003518 <HAL_DMA_IRQHandler+0x1b4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2d      	ldr	r2, [pc, #180]	@ (800351c <HAL_DMA_IRQHandler+0x1b8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d045      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_DMA_IRQHandler+0x1bc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2a      	ldr	r2, [pc, #168]	@ (8003524 <HAL_DMA_IRQHandler+0x1c0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d03b      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a28      	ldr	r2, [pc, #160]	@ (8003528 <HAL_DMA_IRQHandler+0x1c4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d036      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_DMA_IRQHandler+0x1c8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a25      	ldr	r2, [pc, #148]	@ (8003530 <HAL_DMA_IRQHandler+0x1cc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a24      	ldr	r2, [pc, #144]	@ (8003534 <HAL_DMA_IRQHandler+0x1d0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d027      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a22      	ldr	r2, [pc, #136]	@ (8003538 <HAL_DMA_IRQHandler+0x1d4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a21      	ldr	r2, [pc, #132]	@ (800353c <HAL_DMA_IRQHandler+0x1d8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_DMA_IRQHandler+0x1dc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <HAL_DMA_IRQHandler+0x1e0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_DMA_IRQHandler+0x1e4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_DMA_IRQHandler+0x1e8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	@ (8003550 <HAL_DMA_IRQHandler+0x1ec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x194>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_DMA_IRQHandler+0x1f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d12f      	bne.n	8003558 <HAL_DMA_IRQHandler+0x1f4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e02e      	b.n	800356c <HAL_DMA_IRQHandler+0x208>
 800350e:	bf00      	nop
 8003510:	24000000 	.word	0x24000000
 8003514:	1b4e81b5 	.word	0x1b4e81b5
 8003518:	40020010 	.word	0x40020010
 800351c:	40020028 	.word	0x40020028
 8003520:	40020040 	.word	0x40020040
 8003524:	40020058 	.word	0x40020058
 8003528:	40020070 	.word	0x40020070
 800352c:	40020088 	.word	0x40020088
 8003530:	400200a0 	.word	0x400200a0
 8003534:	400200b8 	.word	0x400200b8
 8003538:	40020410 	.word	0x40020410
 800353c:	40020428 	.word	0x40020428
 8003540:	40020440 	.word	0x40020440
 8003544:	40020458 	.word	0x40020458
 8003548:	40020470 	.word	0x40020470
 800354c:	40020488 	.word	0x40020488
 8003550:	400204a0 	.word	0x400204a0
 8003554:	400204b8 	.word	0x400204b8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2208      	movs	r2, #8
 800358a:	409a      	lsls	r2, r3
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06e      	beq.n	8003690 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a69      	ldr	r2, [pc, #420]	@ (800375c <HAL_DMA_IRQHandler+0x3f8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d04a      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a67      	ldr	r2, [pc, #412]	@ (8003760 <HAL_DMA_IRQHandler+0x3fc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d045      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a66      	ldr	r2, [pc, #408]	@ (8003764 <HAL_DMA_IRQHandler+0x400>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d040      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a64      	ldr	r2, [pc, #400]	@ (8003768 <HAL_DMA_IRQHandler+0x404>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d03b      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a63      	ldr	r2, [pc, #396]	@ (800376c <HAL_DMA_IRQHandler+0x408>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d036      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a61      	ldr	r2, [pc, #388]	@ (8003770 <HAL_DMA_IRQHandler+0x40c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d031      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a60      	ldr	r2, [pc, #384]	@ (8003774 <HAL_DMA_IRQHandler+0x410>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d02c      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003778 <HAL_DMA_IRQHandler+0x414>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d027      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a5d      	ldr	r2, [pc, #372]	@ (800377c <HAL_DMA_IRQHandler+0x418>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a5b      	ldr	r2, [pc, #364]	@ (8003780 <HAL_DMA_IRQHandler+0x41c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a5a      	ldr	r2, [pc, #360]	@ (8003784 <HAL_DMA_IRQHandler+0x420>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d018      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a58      	ldr	r2, [pc, #352]	@ (8003788 <HAL_DMA_IRQHandler+0x424>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a57      	ldr	r2, [pc, #348]	@ (800378c <HAL_DMA_IRQHandler+0x428>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a55      	ldr	r2, [pc, #340]	@ (8003790 <HAL_DMA_IRQHandler+0x42c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a54      	ldr	r2, [pc, #336]	@ (8003794 <HAL_DMA_IRQHandler+0x430>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2ee>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a52      	ldr	r2, [pc, #328]	@ (8003798 <HAL_DMA_IRQHandler+0x434>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10a      	bne.n	8003668 <HAL_DMA_IRQHandler+0x304>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e003      	b.n	8003670 <HAL_DMA_IRQHandler+0x30c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	f043 0202 	orr.w	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2204      	movs	r2, #4
 800369a:	409a      	lsls	r2, r3
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 808f 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <HAL_DMA_IRQHandler+0x3f8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003760 <HAL_DMA_IRQHandler+0x3fc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a29      	ldr	r2, [pc, #164]	@ (8003764 <HAL_DMA_IRQHandler+0x400>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a27      	ldr	r2, [pc, #156]	@ (8003768 <HAL_DMA_IRQHandler+0x404>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a26      	ldr	r2, [pc, #152]	@ (800376c <HAL_DMA_IRQHandler+0x408>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <HAL_DMA_IRQHandler+0x40c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a23      	ldr	r2, [pc, #140]	@ (8003774 <HAL_DMA_IRQHandler+0x410>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_DMA_IRQHandler+0x414>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a20      	ldr	r2, [pc, #128]	@ (800377c <HAL_DMA_IRQHandler+0x418>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1e      	ldr	r2, [pc, #120]	@ (8003780 <HAL_DMA_IRQHandler+0x41c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <HAL_DMA_IRQHandler+0x420>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1b      	ldr	r2, [pc, #108]	@ (8003788 <HAL_DMA_IRQHandler+0x424>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1a      	ldr	r2, [pc, #104]	@ (800378c <HAL_DMA_IRQHandler+0x428>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_DMA_IRQHandler+0x42c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <HAL_DMA_IRQHandler+0x430>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_IRQHandler+0x3e2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <HAL_DMA_IRQHandler+0x434>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d12a      	bne.n	800379c <HAL_DMA_IRQHandler+0x438>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e023      	b.n	80037a4 <HAL_DMA_IRQHandler+0x440>
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2204      	movs	r2, #4
 80037b2:	409a      	lsls	r2, r3
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2210      	movs	r2, #16
 80037ce:	409a      	lsls	r2, r3
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a6 	beq.w	8003926 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a85      	ldr	r2, [pc, #532]	@ (80039f4 <HAL_DMA_IRQHandler+0x690>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04a      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a83      	ldr	r2, [pc, #524]	@ (80039f8 <HAL_DMA_IRQHandler+0x694>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d045      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a82      	ldr	r2, [pc, #520]	@ (80039fc <HAL_DMA_IRQHandler+0x698>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d040      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a80      	ldr	r2, [pc, #512]	@ (8003a00 <HAL_DMA_IRQHandler+0x69c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d03b      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7f      	ldr	r2, [pc, #508]	@ (8003a04 <HAL_DMA_IRQHandler+0x6a0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d036      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7d      	ldr	r2, [pc, #500]	@ (8003a08 <HAL_DMA_IRQHandler+0x6a4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d031      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a0c <HAL_DMA_IRQHandler+0x6a8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d02c      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7a      	ldr	r2, [pc, #488]	@ (8003a10 <HAL_DMA_IRQHandler+0x6ac>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d027      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a79      	ldr	r2, [pc, #484]	@ (8003a14 <HAL_DMA_IRQHandler+0x6b0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a77      	ldr	r2, [pc, #476]	@ (8003a18 <HAL_DMA_IRQHandler+0x6b4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01d      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a76      	ldr	r2, [pc, #472]	@ (8003a1c <HAL_DMA_IRQHandler+0x6b8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a74      	ldr	r2, [pc, #464]	@ (8003a20 <HAL_DMA_IRQHandler+0x6bc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a73      	ldr	r2, [pc, #460]	@ (8003a24 <HAL_DMA_IRQHandler+0x6c0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a71      	ldr	r2, [pc, #452]	@ (8003a28 <HAL_DMA_IRQHandler+0x6c4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a70      	ldr	r2, [pc, #448]	@ (8003a2c <HAL_DMA_IRQHandler+0x6c8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_DMA_IRQHandler+0x516>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6e      	ldr	r2, [pc, #440]	@ (8003a30 <HAL_DMA_IRQHandler+0x6cc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10a      	bne.n	8003890 <HAL_DMA_IRQHandler+0x52c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e009      	b.n	80038a4 <HAL_DMA_IRQHandler+0x540>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03e      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2210      	movs	r2, #16
 80038b2:	409a      	lsls	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d024      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e01f      	b.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01b      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e016      	b.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2220      	movs	r2, #32
 8003930:	409a      	lsls	r2, r3
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8110 	beq.w	8003b5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2c      	ldr	r2, [pc, #176]	@ (80039f4 <HAL_DMA_IRQHandler+0x690>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2b      	ldr	r2, [pc, #172]	@ (80039f8 <HAL_DMA_IRQHandler+0x694>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a29      	ldr	r2, [pc, #164]	@ (80039fc <HAL_DMA_IRQHandler+0x698>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a28      	ldr	r2, [pc, #160]	@ (8003a00 <HAL_DMA_IRQHandler+0x69c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a26      	ldr	r2, [pc, #152]	@ (8003a04 <HAL_DMA_IRQHandler+0x6a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a25      	ldr	r2, [pc, #148]	@ (8003a08 <HAL_DMA_IRQHandler+0x6a4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <HAL_DMA_IRQHandler+0x6a8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a22      	ldr	r2, [pc, #136]	@ (8003a10 <HAL_DMA_IRQHandler+0x6ac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a20      	ldr	r2, [pc, #128]	@ (8003a14 <HAL_DMA_IRQHandler+0x6b0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a18 <HAL_DMA_IRQHandler+0x6b4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_DMA_IRQHandler+0x6b8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_DMA_IRQHandler+0x6bc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a24 <HAL_DMA_IRQHandler+0x6c0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <HAL_DMA_IRQHandler+0x6c4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a17      	ldr	r2, [pc, #92]	@ (8003a2c <HAL_DMA_IRQHandler+0x6c8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_IRQHandler+0x678>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <HAL_DMA_IRQHandler+0x6cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d12b      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x6d0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e02a      	b.n	8003a48 <HAL_DMA_IRQHandler+0x6e4>
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8087 	beq.w	8003b5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2220      	movs	r2, #32
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d139      	bne.n	8003ade <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0216 	bic.w	r2, r2, #22
 8003a78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_DMA_IRQHandler+0x736>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0208 	bic.w	r2, r2, #8
 8003aa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	223f      	movs	r2, #63	@ 0x3f
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 834a 	beq.w	8004168 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
          }
          return;
 8003adc:	e344      	b.n	8004168 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e027      	b.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d023      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e01e      	b.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0210 	bic.w	r2, r2, #16
 8003b3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8306 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8088 	beq.w	8003c84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2204      	movs	r2, #4
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7a      	ldr	r2, [pc, #488]	@ (8003d6c <HAL_DMA_IRQHandler+0xa08>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d04a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a79      	ldr	r2, [pc, #484]	@ (8003d70 <HAL_DMA_IRQHandler+0xa0c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d045      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a77      	ldr	r2, [pc, #476]	@ (8003d74 <HAL_DMA_IRQHandler+0xa10>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d040      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a76      	ldr	r2, [pc, #472]	@ (8003d78 <HAL_DMA_IRQHandler+0xa14>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d03b      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a74      	ldr	r2, [pc, #464]	@ (8003d7c <HAL_DMA_IRQHandler+0xa18>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d036      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	@ (8003d80 <HAL_DMA_IRQHandler+0xa1c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d031      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a71      	ldr	r2, [pc, #452]	@ (8003d84 <HAL_DMA_IRQHandler+0xa20>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02c      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a70      	ldr	r2, [pc, #448]	@ (8003d88 <HAL_DMA_IRQHandler+0xa24>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d027      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d8c <HAL_DMA_IRQHandler+0xa28>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6d      	ldr	r2, [pc, #436]	@ (8003d90 <HAL_DMA_IRQHandler+0xa2c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01d      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d94 <HAL_DMA_IRQHandler+0xa30>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6a      	ldr	r2, [pc, #424]	@ (8003d98 <HAL_DMA_IRQHandler+0xa34>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a68      	ldr	r2, [pc, #416]	@ (8003d9c <HAL_DMA_IRQHandler+0xa38>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a67      	ldr	r2, [pc, #412]	@ (8003da0 <HAL_DMA_IRQHandler+0xa3c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_DMA_IRQHandler+0xa40>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x8b8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a64      	ldr	r2, [pc, #400]	@ (8003da8 <HAL_DMA_IRQHandler+0xa44>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x8ca>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e007      	b.n	8003c3e <HAL_DMA_IRQHandler+0x8da>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d307      	bcc.n	8003c5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f2      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x8da>
 8003c58:	e000      	b.n	8003c5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c72:	e003      	b.n	8003c7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8272 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
 8003c96:	e26c      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a43      	ldr	r2, [pc, #268]	@ (8003dac <HAL_DMA_IRQHandler+0xa48>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d022      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a42      	ldr	r2, [pc, #264]	@ (8003db0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01d      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a40      	ldr	r2, [pc, #256]	@ (8003db4 <HAL_DMA_IRQHandler+0xa50>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d018      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3f      	ldr	r2, [pc, #252]	@ (8003db8 <HAL_DMA_IRQHandler+0xa54>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8003dbc <HAL_DMA_IRQHandler+0xa58>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc0 <HAL_DMA_IRQHandler+0xa5c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc4 <HAL_DMA_IRQHandler+0xa60>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x984>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a39      	ldr	r2, [pc, #228]	@ (8003dc8 <HAL_DMA_IRQHandler+0xa64>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_DMA_IRQHandler+0x988>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_DMA_IRQHandler+0x98a>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 823f 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2204      	movs	r2, #4
 8003d06:	409a      	lsls	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80cd 	beq.w	8003eac <HAL_DMA_IRQHandler+0xb48>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80c7 	beq.w	8003eac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2204      	movs	r2, #4
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d049      	beq.n	8003dcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8210 	beq.w	800416c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d54:	e20a      	b.n	800416c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8206 	beq.w	800416c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d68:	e200      	b.n	800416c <HAL_DMA_IRQHandler+0xe08>
 8003d6a:	bf00      	nop
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d160      	bne.n	8003e98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd8 <HAL_DMA_IRQHandler+0xc74>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04a      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7d      	ldr	r2, [pc, #500]	@ (8003fdc <HAL_DMA_IRQHandler+0xc78>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d045      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d040      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fe4 <HAL_DMA_IRQHandler+0xc80>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d03b      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a79      	ldr	r2, [pc, #484]	@ (8003fe8 <HAL_DMA_IRQHandler+0xc84>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d036      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <HAL_DMA_IRQHandler+0xc88>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d031      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a76      	ldr	r2, [pc, #472]	@ (8003ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d02c      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a74      	ldr	r2, [pc, #464]	@ (8003ff4 <HAL_DMA_IRQHandler+0xc90>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d027      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a73      	ldr	r2, [pc, #460]	@ (8003ff8 <HAL_DMA_IRQHandler+0xc94>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a71      	ldr	r2, [pc, #452]	@ (8003ffc <HAL_DMA_IRQHandler+0xc98>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01d      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a70      	ldr	r2, [pc, #448]	@ (8004000 <HAL_DMA_IRQHandler+0xc9c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6e      	ldr	r2, [pc, #440]	@ (8004004 <HAL_DMA_IRQHandler+0xca0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6d      	ldr	r2, [pc, #436]	@ (8004008 <HAL_DMA_IRQHandler+0xca4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800400c <HAL_DMA_IRQHandler+0xca8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6a      	ldr	r2, [pc, #424]	@ (8004010 <HAL_DMA_IRQHandler+0xcac>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_DMA_IRQHandler+0xb12>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a68      	ldr	r2, [pc, #416]	@ (8004014 <HAL_DMA_IRQHandler+0xcb0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_DMA_IRQHandler+0xb24>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0208 	bic.w	r2, r2, #8
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <HAL_DMA_IRQHandler+0xb34>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8165 	beq.w	800416c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eaa:	e15f      	b.n	800416c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80c5 	beq.w	800404c <HAL_DMA_IRQHandler+0xce8>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80bf 	beq.w	800404c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d018      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 813a 	beq.w	8004170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f04:	e134      	b.n	8004170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8130 	beq.w	8004170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f18:	e12a      	b.n	8004170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8089 	bne.w	8004038 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd8 <HAL_DMA_IRQHandler+0xc74>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d04a      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a29      	ldr	r2, [pc, #164]	@ (8003fdc <HAL_DMA_IRQHandler+0xc78>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d045      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a28      	ldr	r2, [pc, #160]	@ (8003fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d040      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <HAL_DMA_IRQHandler+0xc80>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d03b      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a25      	ldr	r2, [pc, #148]	@ (8003fe8 <HAL_DMA_IRQHandler+0xc84>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d036      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <HAL_DMA_IRQHandler+0xc88>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d031      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a22      	ldr	r2, [pc, #136]	@ (8003ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d02c      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <HAL_DMA_IRQHandler+0xc90>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d027      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff8 <HAL_DMA_IRQHandler+0xc94>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d022      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <HAL_DMA_IRQHandler+0xc98>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01d      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004000 <HAL_DMA_IRQHandler+0xc9c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d018      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	@ (8004004 <HAL_DMA_IRQHandler+0xca0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a19      	ldr	r2, [pc, #100]	@ (8004008 <HAL_DMA_IRQHandler+0xca4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_DMA_IRQHandler+0xca8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d009      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <HAL_DMA_IRQHandler+0xcac>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xc62>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <HAL_DMA_IRQHandler+0xcb0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d128      	bne.n	8004018 <HAL_DMA_IRQHandler+0xcb4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0214 	bic.w	r2, r2, #20
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e027      	b.n	8004028 <HAL_DMA_IRQHandler+0xcc4>
 8003fd8:	40020010 	.word	0x40020010
 8003fdc:	40020028 	.word	0x40020028
 8003fe0:	40020040 	.word	0x40020040
 8003fe4:	40020058 	.word	0x40020058
 8003fe8:	40020070 	.word	0x40020070
 8003fec:	40020088 	.word	0x40020088
 8003ff0:	400200a0 	.word	0x400200a0
 8003ff4:	400200b8 	.word	0x400200b8
 8003ff8:	40020410 	.word	0x40020410
 8003ffc:	40020428 	.word	0x40020428
 8004000:	40020440 	.word	0x40020440
 8004004:	40020458 	.word	0x40020458
 8004008:	40020470 	.word	0x40020470
 800400c:	40020488 	.word	0x40020488
 8004010:	400204a0 	.word	0x400204a0
 8004014:	400204b8 	.word	0x400204b8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 020a 	bic.w	r2, r2, #10
 8004026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800404a:	e091      	b.n	8004170 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2208      	movs	r2, #8
 8004056:	409a      	lsls	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8088 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8082 	beq.w	8004172 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a41      	ldr	r2, [pc, #260]	@ (8004178 <HAL_DMA_IRQHandler+0xe14>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04a      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3f      	ldr	r2, [pc, #252]	@ (800417c <HAL_DMA_IRQHandler+0xe18>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d045      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3e      	ldr	r2, [pc, #248]	@ (8004180 <HAL_DMA_IRQHandler+0xe1c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d040      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3c      	ldr	r2, [pc, #240]	@ (8004184 <HAL_DMA_IRQHandler+0xe20>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03b      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3b      	ldr	r2, [pc, #236]	@ (8004188 <HAL_DMA_IRQHandler+0xe24>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d036      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a39      	ldr	r2, [pc, #228]	@ (800418c <HAL_DMA_IRQHandler+0xe28>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a38      	ldr	r2, [pc, #224]	@ (8004190 <HAL_DMA_IRQHandler+0xe2c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d02c      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a36      	ldr	r2, [pc, #216]	@ (8004194 <HAL_DMA_IRQHandler+0xe30>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d027      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a35      	ldr	r2, [pc, #212]	@ (8004198 <HAL_DMA_IRQHandler+0xe34>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a33      	ldr	r2, [pc, #204]	@ (800419c <HAL_DMA_IRQHandler+0xe38>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01d      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a32      	ldr	r2, [pc, #200]	@ (80041a0 <HAL_DMA_IRQHandler+0xe3c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <HAL_DMA_IRQHandler+0xe40>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <HAL_DMA_IRQHandler+0xe44>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2d      	ldr	r2, [pc, #180]	@ (80041ac <HAL_DMA_IRQHandler+0xe48>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2c      	ldr	r2, [pc, #176]	@ (80041b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_DMA_IRQHandler+0xdaa>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2a      	ldr	r2, [pc, #168]	@ (80041b4 <HAL_DMA_IRQHandler+0xe50>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <HAL_DMA_IRQHandler+0xdbc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 021c 	bic.w	r2, r2, #28
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e007      	b.n	8004130 <HAL_DMA_IRQHandler+0xdcc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 020e 	bic.w	r2, r2, #14
 800412e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e004      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004168:	bf00      	nop
 800416a:	e002      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004170:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004172:	3728      	adds	r7, #40	@ 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40020010 	.word	0x40020010
 800417c:	40020028 	.word	0x40020028
 8004180:	40020040 	.word	0x40020040
 8004184:	40020058 	.word	0x40020058
 8004188:	40020070 	.word	0x40020070
 800418c:	40020088 	.word	0x40020088
 8004190:	400200a0 	.word	0x400200a0
 8004194:	400200b8 	.word	0x400200b8
 8004198:	40020410 	.word	0x40020410
 800419c:	40020428 	.word	0x40020428
 80041a0:	40020440 	.word	0x40020440
 80041a4:	40020458 	.word	0x40020458
 80041a8:	40020470 	.word	0x40020470
 80041ac:	40020488 	.word	0x40020488
 80041b0:	400204a0 	.word	0x400204a0
 80041b4:	400204b8 	.word	0x400204b8

080041b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a42      	ldr	r2, [pc, #264]	@ (80042d0 <DMA_CalcBaseAndBitshift+0x118>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d04a      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a41      	ldr	r2, [pc, #260]	@ (80042d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d045      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a3f      	ldr	r2, [pc, #252]	@ (80042d8 <DMA_CalcBaseAndBitshift+0x120>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d040      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a3e      	ldr	r2, [pc, #248]	@ (80042dc <DMA_CalcBaseAndBitshift+0x124>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d03b      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3c      	ldr	r2, [pc, #240]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x128>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d036      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3b      	ldr	r2, [pc, #236]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d031      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a39      	ldr	r2, [pc, #228]	@ (80042e8 <DMA_CalcBaseAndBitshift+0x130>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d02c      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a38      	ldr	r2, [pc, #224]	@ (80042ec <DMA_CalcBaseAndBitshift+0x134>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d027      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a36      	ldr	r2, [pc, #216]	@ (80042f0 <DMA_CalcBaseAndBitshift+0x138>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d022      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a35      	ldr	r2, [pc, #212]	@ (80042f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d01d      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a33      	ldr	r2, [pc, #204]	@ (80042f8 <DMA_CalcBaseAndBitshift+0x140>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d018      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a32      	ldr	r2, [pc, #200]	@ (80042fc <DMA_CalcBaseAndBitshift+0x144>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a30      	ldr	r2, [pc, #192]	@ (8004300 <DMA_CalcBaseAndBitshift+0x148>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2f      	ldr	r2, [pc, #188]	@ (8004304 <DMA_CalcBaseAndBitshift+0x14c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2d      	ldr	r2, [pc, #180]	@ (8004308 <DMA_CalcBaseAndBitshift+0x150>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <DMA_CalcBaseAndBitshift+0xa8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2c      	ldr	r2, [pc, #176]	@ (800430c <DMA_CalcBaseAndBitshift+0x154>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <DMA_CalcBaseAndBitshift+0xac>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <DMA_CalcBaseAndBitshift+0xae>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d024      	beq.n	80042b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3b10      	subs	r3, #16
 8004272:	4a27      	ldr	r2, [pc, #156]	@ (8004310 <DMA_CalcBaseAndBitshift+0x158>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	4a24      	ldr	r2, [pc, #144]	@ (8004314 <DMA_CalcBaseAndBitshift+0x15c>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d908      	bls.n	80042a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <DMA_CalcBaseAndBitshift+0x160>)
 800429a:	4013      	ands	r3, r2
 800429c:	1d1a      	adds	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042a2:	e00d      	b.n	80042c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <DMA_CalcBaseAndBitshift+0x160>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b2:	e005      	b.n	80042c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8
 8004310:	aaaaaaab 	.word	0xaaaaaaab
 8004314:	0800e450 	.word	0x0800e450
 8004318:	fffffc00 	.word	0xfffffc00

0800431c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d120      	bne.n	8004372 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	2b03      	cmp	r3, #3
 8004336:	d858      	bhi.n	80043ea <DMA_CheckFifoParam+0xce>
 8004338:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <DMA_CheckFifoParam+0x24>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004351 	.word	0x08004351
 8004344:	08004363 	.word	0x08004363
 8004348:	08004351 	.word	0x08004351
 800434c:	080043eb 	.word	0x080043eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d048      	beq.n	80043ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004360:	e045      	b.n	80043ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800436a:	d142      	bne.n	80043f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004370:	e03f      	b.n	80043f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437a:	d123      	bne.n	80043c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	2b03      	cmp	r3, #3
 8004382:	d838      	bhi.n	80043f6 <DMA_CheckFifoParam+0xda>
 8004384:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <DMA_CheckFifoParam+0x70>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043a3 	.word	0x080043a3
 8004394:	0800439d 	.word	0x0800439d
 8004398:	080043b5 	.word	0x080043b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
        break;
 80043a0:	e030      	b.n	8004404 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d025      	beq.n	80043fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b2:	e022      	b.n	80043fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043bc:	d11f      	bne.n	80043fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043c2:	e01c      	b.n	80043fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d902      	bls.n	80043d2 <DMA_CheckFifoParam+0xb6>
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d003      	beq.n	80043d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043d0:	e018      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
        break;
 80043d6:	e015      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
    break;
 80043e8:	e00b      	b.n	8004402 <DMA_CheckFifoParam+0xe6>
        break;
 80043ea:	bf00      	nop
 80043ec:	e00a      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        break;
 80043ee:	bf00      	nop
 80043f0:	e008      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        break;
 80043f2:	bf00      	nop
 80043f4:	e006      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        break;
 80043f6:	bf00      	nop
 80043f8:	e004      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
        break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <DMA_CheckFifoParam+0xe8>
    break;
 8004402:	bf00      	nop
    }
  }

  return status;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop

08004414 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a38      	ldr	r2, [pc, #224]	@ (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a36      	ldr	r2, [pc, #216]	@ (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a35      	ldr	r2, [pc, #212]	@ (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a33      	ldr	r2, [pc, #204]	@ (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a32      	ldr	r2, [pc, #200]	@ (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a30      	ldr	r2, [pc, #192]	@ (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2f      	ldr	r2, [pc, #188]	@ (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2d      	ldr	r2, [pc, #180]	@ (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01a      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	3b08      	subs	r3, #8
 8004484:	4a28      	ldr	r2, [pc, #160]	@ (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4b26      	ldr	r3, [pc, #152]	@ (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2201      	movs	r2, #1
 80044aa:	409a      	lsls	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044b0:	e024      	b.n	80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3b10      	subs	r3, #16
 80044ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d806      	bhi.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d902      	bls.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3308      	adds	r3, #8
 80044d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2201      	movs	r2, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	58025408 	.word	0x58025408
 800450c:	5802541c 	.word	0x5802541c
 8004510:	58025430 	.word	0x58025430
 8004514:	58025444 	.word	0x58025444
 8004518:	58025458 	.word	0x58025458
 800451c:	5802546c 	.word	0x5802546c
 8004520:	58025480 	.word	0x58025480
 8004524:	58025494 	.word	0x58025494
 8004528:	cccccccd 	.word	0xcccccccd
 800452c:	16009600 	.word	0x16009600
 8004530:	58025880 	.word	0x58025880
 8004534:	aaaaaaab 	.word	0xaaaaaaab
 8004538:	400204b8 	.word	0x400204b8
 800453c:	4002040f 	.word	0x4002040f
 8004540:	10008200 	.word	0x10008200
 8004544:	40020880 	.word	0x40020880

08004548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d04a      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b08      	cmp	r3, #8
 8004562:	d847      	bhi.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a25      	ldr	r2, [pc, #148]	@ (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d022      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a24      	ldr	r2, [pc, #144]	@ (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d01d      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d018      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a21      	ldr	r2, [pc, #132]	@ (800460c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1e      	ldr	r2, [pc, #120]	@ (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d009      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4b17      	ldr	r3, [pc, #92]	@ (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	461a      	mov	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80045d2:	e009      	b.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4b14      	ldr	r3, [pc, #80]	@ (8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a11      	ldr	r2, [pc, #68]	@ (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	58025408 	.word	0x58025408
 8004604:	5802541c 	.word	0x5802541c
 8004608:	58025430 	.word	0x58025430
 800460c:	58025444 	.word	0x58025444
 8004610:	58025458 	.word	0x58025458
 8004614:	5802546c 	.word	0x5802546c
 8004618:	58025480 	.word	0x58025480
 800461c:	58025494 	.word	0x58025494
 8004620:	1600963f 	.word	0x1600963f
 8004624:	58025940 	.word	0x58025940
 8004628:	1000823f 	.word	0x1000823f
 800462c:	40020940 	.word	0x40020940

08004630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	@ 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800463e:	4b89      	ldr	r3, [pc, #548]	@ (8004864 <HAL_GPIO_Init+0x234>)
 8004640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004642:	e194      	b.n	800496e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	2101      	movs	r1, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8186 	beq.w	8004968 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d005      	beq.n	8004674 <HAL_GPIO_Init+0x44>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d130      	bne.n	80046d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	2203      	movs	r2, #3
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046aa:	2201      	movs	r2, #1
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0201 	and.w	r2, r3, #1
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d017      	beq.n	8004712 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d123      	bne.n	8004766 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	08da      	lsrs	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3208      	adds	r2, #8
 8004726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	08da      	lsrs	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3208      	adds	r2, #8
 8004760:	69b9      	ldr	r1, [r7, #24]
 8004762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	2203      	movs	r2, #3
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0203 	and.w	r2, r3, #3
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80e0 	beq.w	8004968 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004868 <HAL_GPIO_Init+0x238>)
 80047aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004868 <HAL_GPIO_Init+0x238>)
 80047b0:	f043 0302 	orr.w	r3, r3, #2
 80047b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80047b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004868 <HAL_GPIO_Init+0x238>)
 80047ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c6:	4a29      	ldr	r2, [pc, #164]	@ (800486c <HAL_GPIO_Init+0x23c>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a20      	ldr	r2, [pc, #128]	@ (8004870 <HAL_GPIO_Init+0x240>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d052      	beq.n	8004898 <HAL_GPIO_Init+0x268>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004874 <HAL_GPIO_Init+0x244>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_GPIO_Init+0x22e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004878 <HAL_GPIO_Init+0x248>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02b      	beq.n	800485a <HAL_GPIO_Init+0x22a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1d      	ldr	r2, [pc, #116]	@ (800487c <HAL_GPIO_Init+0x24c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d025      	beq.n	8004856 <HAL_GPIO_Init+0x226>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <HAL_GPIO_Init+0x250>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01f      	beq.n	8004852 <HAL_GPIO_Init+0x222>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <HAL_GPIO_Init+0x254>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d019      	beq.n	800484e <HAL_GPIO_Init+0x21e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <HAL_GPIO_Init+0x258>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_GPIO_Init+0x21a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a19      	ldr	r2, [pc, #100]	@ (800488c <HAL_GPIO_Init+0x25c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00d      	beq.n	8004846 <HAL_GPIO_Init+0x216>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <HAL_GPIO_Init+0x260>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <HAL_GPIO_Init+0x212>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_GPIO_Init+0x264>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_GPIO_Init+0x20e>
 800483a:	2309      	movs	r3, #9
 800483c:	e02d      	b.n	800489a <HAL_GPIO_Init+0x26a>
 800483e:	230a      	movs	r3, #10
 8004840:	e02b      	b.n	800489a <HAL_GPIO_Init+0x26a>
 8004842:	2308      	movs	r3, #8
 8004844:	e029      	b.n	800489a <HAL_GPIO_Init+0x26a>
 8004846:	2307      	movs	r3, #7
 8004848:	e027      	b.n	800489a <HAL_GPIO_Init+0x26a>
 800484a:	2306      	movs	r3, #6
 800484c:	e025      	b.n	800489a <HAL_GPIO_Init+0x26a>
 800484e:	2305      	movs	r3, #5
 8004850:	e023      	b.n	800489a <HAL_GPIO_Init+0x26a>
 8004852:	2304      	movs	r3, #4
 8004854:	e021      	b.n	800489a <HAL_GPIO_Init+0x26a>
 8004856:	2303      	movs	r3, #3
 8004858:	e01f      	b.n	800489a <HAL_GPIO_Init+0x26a>
 800485a:	2302      	movs	r3, #2
 800485c:	e01d      	b.n	800489a <HAL_GPIO_Init+0x26a>
 800485e:	2301      	movs	r3, #1
 8004860:	e01b      	b.n	800489a <HAL_GPIO_Init+0x26a>
 8004862:	bf00      	nop
 8004864:	58000080 	.word	0x58000080
 8004868:	58024400 	.word	0x58024400
 800486c:	58000400 	.word	0x58000400
 8004870:	58020000 	.word	0x58020000
 8004874:	58020400 	.word	0x58020400
 8004878:	58020800 	.word	0x58020800
 800487c:	58020c00 	.word	0x58020c00
 8004880:	58021000 	.word	0x58021000
 8004884:	58021400 	.word	0x58021400
 8004888:	58021800 	.word	0x58021800
 800488c:	58021c00 	.word	0x58021c00
 8004890:	58022000 	.word	0x58022000
 8004894:	58022400 	.word	0x58022400
 8004898:	2300      	movs	r3, #0
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	f002 0203 	and.w	r2, r2, #3
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	4093      	lsls	r3, r2
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048aa:	4938      	ldr	r1, [pc, #224]	@ (800498c <HAL_GPIO_Init+0x35c>)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	3302      	adds	r3, #2
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	3301      	adds	r3, #1
 800496c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f ae63 	bne.w	8004644 <HAL_GPIO_Init+0x14>
  }
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	3724      	adds	r7, #36	@ 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	58000400 	.word	0x58000400

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049ac:	e003      	b.n	80049b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	041a      	lsls	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	041a      	lsls	r2, r3, #16
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43d9      	mvns	r1, r3
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	400b      	ands	r3, r1
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a00:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <HAL_PWREx_ConfigSupply+0x70>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d00a      	beq.n	8004a22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a0c:	4b16      	ldr	r3, [pc, #88]	@ (8004a68 <HAL_PWREx_ConfigSupply+0x70>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d001      	beq.n	8004a1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e01f      	b.n	8004a5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e01d      	b.n	8004a5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a22:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <HAL_PWREx_ConfigSupply+0x70>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 0207 	bic.w	r2, r3, #7
 8004a2a:	490f      	ldr	r1, [pc, #60]	@ (8004a68 <HAL_PWREx_ConfigSupply+0x70>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a32:	f7fd f8ab 	bl	8001b8c <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a38:	e009      	b.n	8004a4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a3a:	f7fd f8a7 	bl	8001b8c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a48:	d901      	bls.n	8004a4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e007      	b.n	8004a5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <HAL_PWREx_ConfigSupply+0x70>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5a:	d1ee      	bne.n	8004a3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	58024800 	.word	0x58024800

08004a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08c      	sub	sp, #48	@ 0x30
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f000 bc48 	b.w	8005310 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8088 	beq.w	8004b9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8e:	4b99      	ldr	r3, [pc, #612]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a98:	4b96      	ldr	r3, [pc, #600]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d007      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x48>
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	2b18      	cmp	r3, #24
 8004aa8:	d111      	bne.n	8004ace <HAL_RCC_OscConfig+0x62>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d06d      	beq.n	8004b9c <HAL_RCC_OscConfig+0x130>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d169      	bne.n	8004b9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f000 bc21 	b.w	8005310 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x7a>
 8004ad8:	4b86      	ldr	r3, [pc, #536]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a85      	ldr	r2, [pc, #532]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e02e      	b.n	8004b44 <HAL_RCC_OscConfig+0xd8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x9c>
 8004aee:	4b81      	ldr	r3, [pc, #516]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a80      	ldr	r2, [pc, #512]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b7e      	ldr	r3, [pc, #504]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7d      	ldr	r2, [pc, #500]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e01d      	b.n	8004b44 <HAL_RCC_OscConfig+0xd8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0xc0>
 8004b12:	4b78      	ldr	r3, [pc, #480]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a77      	ldr	r2, [pc, #476]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	4b75      	ldr	r3, [pc, #468]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a74      	ldr	r2, [pc, #464]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCC_OscConfig+0xd8>
 8004b2c:	4b71      	ldr	r3, [pc, #452]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a70      	ldr	r2, [pc, #448]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	4b6e      	ldr	r3, [pc, #440]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a6d      	ldr	r2, [pc, #436]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd f81e 	bl	8001b8c <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fd f81a 	bl	8001b8c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	@ 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e3d4      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b66:	4b63      	ldr	r3, [pc, #396]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0xe8>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fd f80a 	bl	8001b8c <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fd f806 	bl	8001b8c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e3c0      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b8e:	4b59      	ldr	r3, [pc, #356]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x110>
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80ca 	beq.w	8004d40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bac:	4b51      	ldr	r3, [pc, #324]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x166>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	2b18      	cmp	r3, #24
 8004bc6:	d156      	bne.n	8004c76 <HAL_RCC_OscConfig+0x20a>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d151      	bne.n	8004c76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd2:	4b48      	ldr	r3, [pc, #288]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_RCC_OscConfig+0x17e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e392      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bea:	4b42      	ldr	r3, [pc, #264]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0219 	bic.w	r2, r3, #25
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	493f      	ldr	r1, [pc, #252]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fc ffc6 	bl	8001b8c <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7fc ffc2 	bl	8001b8c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e37c      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c16:	4b37      	ldr	r3, [pc, #220]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c22:	f7fc ffe3 	bl	8001bec <HAL_GetREVID>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d817      	bhi.n	8004c60 <HAL_RCC_OscConfig+0x1f4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d108      	bne.n	8004c4a <HAL_RCC_OscConfig+0x1de>
 8004c38:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c40:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c48:	e07a      	b.n	8004d40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	031b      	lsls	r3, r3, #12
 8004c58:	4926      	ldr	r1, [pc, #152]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5e:	e06f      	b.n	8004d40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	4b24      	ldr	r3, [pc, #144]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	4921      	ldr	r1, [pc, #132]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c74:	e064      	b.n	8004d40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d047      	beq.n	8004d0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 0219 	bic.w	r2, r3, #25
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	491a      	ldr	r1, [pc, #104]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fc ff7c 	bl	8001b8c <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c98:	f7fc ff78 	bl	8001b8c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e332      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	f7fc ff99 	bl	8001bec <HAL_GetREVID>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d819      	bhi.n	8004cf8 <HAL_RCC_OscConfig+0x28c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d108      	bne.n	8004cde <HAL_RCC_OscConfig+0x272>
 8004ccc:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004cd4:	4a07      	ldr	r2, [pc, #28]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cda:	6053      	str	r3, [r2, #4]
 8004cdc:	e030      	b.n	8004d40 <HAL_RCC_OscConfig+0x2d4>
 8004cde:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	031b      	lsls	r3, r3, #12
 8004cec:	4901      	ldr	r1, [pc, #4]	@ (8004cf4 <HAL_RCC_OscConfig+0x288>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
 8004cf2:	e025      	b.n	8004d40 <HAL_RCC_OscConfig+0x2d4>
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	4b9a      	ldr	r3, [pc, #616]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	4997      	ldr	r1, [pc, #604]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	e018      	b.n	8004d40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0e:	4b95      	ldr	r3, [pc, #596]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a94      	ldr	r2, [pc, #592]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fc ff37 	bl	8001b8c <HAL_GetTick>
 8004d1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fc ff33 	bl	8001b8c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e2ed      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d34:	4b8b      	ldr	r3, [pc, #556]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80a9 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	4b85      	ldr	r3, [pc, #532]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d58:	4b82      	ldr	r3, [pc, #520]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d007      	beq.n	8004d74 <HAL_RCC_OscConfig+0x308>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b18      	cmp	r3, #24
 8004d68:	d13a      	bne.n	8004de0 <HAL_RCC_OscConfig+0x374>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d135      	bne.n	8004de0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d74:	4b7b      	ldr	r3, [pc, #492]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_OscConfig+0x320>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2b80      	cmp	r3, #128	@ 0x80
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e2c1      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d8c:	f7fc ff2e 	bl	8001bec <HAL_GetREVID>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d817      	bhi.n	8004dca <HAL_RCC_OscConfig+0x35e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d108      	bne.n	8004db4 <HAL_RCC_OscConfig+0x348>
 8004da2:	4b70      	ldr	r3, [pc, #448]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004daa:	4a6e      	ldr	r2, [pc, #440]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004db0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db2:	e075      	b.n	8004ea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004db4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	069b      	lsls	r3, r3, #26
 8004dc2:	4968      	ldr	r1, [pc, #416]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dc8:	e06a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dca:	4b66      	ldr	r3, [pc, #408]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	4962      	ldr	r1, [pc, #392]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dde:	e05f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d042      	beq.n	8004e6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004de8:	4b5e      	ldr	r3, [pc, #376]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5d      	ldr	r2, [pc, #372]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fc feca 	bl	8001b8c <HAL_GetTick>
 8004df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dfc:	f7fc fec6 	bl	8001b8c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e280      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e0e:	4b55      	ldr	r3, [pc, #340]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e1a:	f7fc fee7 	bl	8001bec <HAL_GetREVID>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d817      	bhi.n	8004e58 <HAL_RCC_OscConfig+0x3ec>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d108      	bne.n	8004e42 <HAL_RCC_OscConfig+0x3d6>
 8004e30:	4b4c      	ldr	r3, [pc, #304]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e38:	4a4a      	ldr	r2, [pc, #296]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e3e:	6053      	str	r3, [r2, #4]
 8004e40:	e02e      	b.n	8004ea0 <HAL_RCC_OscConfig+0x434>
 8004e42:	4b48      	ldr	r3, [pc, #288]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	069b      	lsls	r3, r3, #26
 8004e50:	4944      	ldr	r1, [pc, #272]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	604b      	str	r3, [r1, #4]
 8004e56:	e023      	b.n	8004ea0 <HAL_RCC_OscConfig+0x434>
 8004e58:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	493f      	ldr	r1, [pc, #252]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60cb      	str	r3, [r1, #12]
 8004e6c:	e018      	b.n	8004ea0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3c      	ldr	r2, [pc, #240]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fc fe87 	bl	8001b8c <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e82:	f7fc fe83 	bl	8001b8c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e23d      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e94:	4b33      	ldr	r3, [pc, #204]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d036      	beq.n	8004f1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d019      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fc fe64 	bl	8001b8c <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fc fe60 	bl	8001b8c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e21a      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eda:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x45c>
 8004ee6:	e018      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eec:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004eee:	f023 0301 	bic.w	r3, r3, #1
 8004ef2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fc fe4a 	bl	8001b8c <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efc:	f7fc fe46 	bl	8001b8c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e200      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d039      	beq.n	8004f9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01c      	beq.n	8004f68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004f34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fe27 	bl	8001b8c <HAL_GetTick>
 8004f3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f42:	f7fc fe23 	bl	8001b8c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1dd      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f54:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <HAL_RCC_OscConfig+0x4f8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x4d6>
 8004f60:	e01b      	b.n	8004f9a <HAL_RCC_OscConfig+0x52e>
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f68:	4b9b      	ldr	r3, [pc, #620]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a9a      	ldr	r2, [pc, #616]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f74:	f7fc fe0a 	bl	8001b8c <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7c:	f7fc fe06 	bl	8001b8c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1c0      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f8e:	4b92      	ldr	r3, [pc, #584]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8081 	beq.w	80050aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80051dc <HAL_RCC_OscConfig+0x770>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a8b      	ldr	r2, [pc, #556]	@ (80051dc <HAL_RCC_OscConfig+0x770>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb4:	f7fc fdea 	bl	8001b8c <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fde6 	bl	8001b8c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	@ 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1a0      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fce:	4b83      	ldr	r3, [pc, #524]	@ (80051dc <HAL_RCC_OscConfig+0x770>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x584>
 8004fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fee:	e02d      	b.n	800504c <HAL_RCC_OscConfig+0x5e0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10c      	bne.n	8005012 <HAL_RCC_OscConfig+0x5a6>
 8004ff8:	4b77      	ldr	r3, [pc, #476]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a76      	ldr	r2, [pc, #472]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
 8005004:	4b74      	ldr	r3, [pc, #464]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005008:	4a73      	ldr	r2, [pc, #460]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800500a:	f023 0304 	bic.w	r3, r3, #4
 800500e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005010:	e01c      	b.n	800504c <HAL_RCC_OscConfig+0x5e0>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b05      	cmp	r3, #5
 8005018:	d10c      	bne.n	8005034 <HAL_RCC_OscConfig+0x5c8>
 800501a:	4b6f      	ldr	r3, [pc, #444]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a6e      	ldr	r2, [pc, #440]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005020:	f043 0304 	orr.w	r3, r3, #4
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
 8005026:	4b6c      	ldr	r3, [pc, #432]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	4a6b      	ldr	r2, [pc, #428]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6713      	str	r3, [r2, #112]	@ 0x70
 8005032:	e00b      	b.n	800504c <HAL_RCC_OscConfig+0x5e0>
 8005034:	4b68      	ldr	r3, [pc, #416]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a67      	ldr	r2, [pc, #412]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005040:	4b65      	ldr	r3, [pc, #404]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	4a64      	ldr	r2, [pc, #400]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005046:	f023 0304 	bic.w	r3, r3, #4
 800504a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d015      	beq.n	8005080 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005054:	f7fc fd9a 	bl	8001b8c <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505a:	e00a      	b.n	8005072 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505c:	f7fc fd96 	bl	8001b8c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e14e      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005072:	4b59      	ldr	r3, [pc, #356]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ee      	beq.n	800505c <HAL_RCC_OscConfig+0x5f0>
 800507e:	e014      	b.n	80050aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fc fd84 	bl	8001b8c <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005086:	e00a      	b.n	800509e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fc fd80 	bl	8001b8c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e138      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800509e:	4b4e      	ldr	r3, [pc, #312]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ee      	bne.n	8005088 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 812d 	beq.w	800530e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050b4:	4b48      	ldr	r3, [pc, #288]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050bc:	2b18      	cmp	r3, #24
 80050be:	f000 80bd 	beq.w	800523c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	f040 809e 	bne.w	8005208 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050cc:	4b42      	ldr	r3, [pc, #264]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a41      	ldr	r2, [pc, #260]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80050d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fc fd58 	bl	8001b8c <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fc fd54 	bl	8001b8c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e10e      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050f2:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fe:	4b36      	ldr	r3, [pc, #216]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005102:	4b37      	ldr	r3, [pc, #220]	@ (80051e0 <HAL_RCC_OscConfig+0x774>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800510e:	0112      	lsls	r2, r2, #4
 8005110:	430a      	orrs	r2, r1
 8005112:	4931      	ldr	r1, [pc, #196]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	628b      	str	r3, [r1, #40]	@ 0x28
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	3b01      	subs	r3, #1
 800511e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	3b01      	subs	r3, #1
 8005128:	025b      	lsls	r3, r3, #9
 800512a:	b29b      	uxth	r3, r3
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005132:	3b01      	subs	r3, #1
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	3b01      	subs	r3, #1
 8005142:	061b      	lsls	r3, r3, #24
 8005144:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005148:	4923      	ldr	r1, [pc, #140]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800514e:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800515a:	4b1f      	ldr	r3, [pc, #124]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800515c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800515e:	4b21      	ldr	r3, [pc, #132]	@ (80051e4 <HAL_RCC_OscConfig+0x778>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005166:	00d2      	lsls	r2, r2, #3
 8005168:	491b      	ldr	r1, [pc, #108]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800516e:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	f023 020c 	bic.w	r2, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	4917      	ldr	r1, [pc, #92]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005180:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	f023 0202 	bic.w	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518c:	4912      	ldr	r1, [pc, #72]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005192:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	4a10      	ldr	r2, [pc, #64]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800519c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800519e:	4b0e      	ldr	r3, [pc, #56]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a0d      	ldr	r2, [pc, #52]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051aa:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	4a0a      	ldr	r2, [pc, #40]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051b6:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	4a07      	ldr	r2, [pc, #28]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c2:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a04      	ldr	r2, [pc, #16]	@ (80051d8 <HAL_RCC_OscConfig+0x76c>)
 80051c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ce:	f7fc fcdd 	bl	8001b8c <HAL_GetTick>
 80051d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051d4:	e011      	b.n	80051fa <HAL_RCC_OscConfig+0x78e>
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	58024800 	.word	0x58024800
 80051e0:	fffffc0c 	.word	0xfffffc0c
 80051e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fc fcd0 	bl	8001b8c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e08a      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051fa:	4b47      	ldr	r3, [pc, #284]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x77c>
 8005206:	e082      	b.n	800530e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005208:	4b43      	ldr	r3, [pc, #268]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a42      	ldr	r2, [pc, #264]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 800520e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fc fcba 	bl	8001b8c <HAL_GetTick>
 8005218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fc fcb6 	bl	8001b8c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e070      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800522e:	4b3a      	ldr	r3, [pc, #232]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x7b0>
 800523a:	e068      	b.n	800530e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800523c:	4b36      	ldr	r3, [pc, #216]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005242:	4b35      	ldr	r3, [pc, #212]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	2b01      	cmp	r3, #1
 800524e:	d031      	beq.n	80052b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f003 0203 	and.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d12a      	bne.n	80052b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d122      	bne.n	80052b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d11a      	bne.n	80052b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	0a5b      	lsrs	r3, r3, #9
 8005282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d111      	bne.n	80052b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d108      	bne.n	80052b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e02b      	b.n	8005310 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052b8:	4b17      	ldr	r3, [pc, #92]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 80052ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052bc:	08db      	lsrs	r3, r3, #3
 80052be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d01f      	beq.n	800530e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052ce:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	4a11      	ldr	r2, [pc, #68]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052da:	f7fc fc57 	bl	8001b8c <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052e0:	bf00      	nop
 80052e2:	f7fc fc53 	bl	8001b8c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d0f9      	beq.n	80052e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 80052f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <HAL_RCC_OscConfig+0x8b0>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052fa:	00d2      	lsls	r2, r2, #3
 80052fc:	4906      	ldr	r1, [pc, #24]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005302:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	4a04      	ldr	r2, [pc, #16]	@ (8005318 <HAL_RCC_OscConfig+0x8ac>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3730      	adds	r7, #48	@ 0x30
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	58024400 	.word	0x58024400
 800531c:	ffff0007 	.word	0xffff0007

08005320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e19c      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b8a      	ldr	r3, [pc, #552]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d910      	bls.n	8005364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b87      	ldr	r3, [pc, #540]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 020f 	bic.w	r2, r3, #15
 800534a:	4985      	ldr	r1, [pc, #532]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b83      	ldr	r3, [pc, #524]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e184      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	4b7b      	ldr	r3, [pc, #492]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800537c:	429a      	cmp	r2, r3
 800537e:	d908      	bls.n	8005392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005380:	4b78      	ldr	r3, [pc, #480]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	4975      	ldr	r1, [pc, #468]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 800538e:	4313      	orrs	r3, r2
 8005390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d010      	beq.n	80053c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695a      	ldr	r2, [r3, #20]
 80053a2:	4b70      	ldr	r3, [pc, #448]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d908      	bls.n	80053c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	496a      	ldr	r1, [pc, #424]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	4b64      	ldr	r3, [pc, #400]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053d8:	429a      	cmp	r2, r3
 80053da:	d908      	bls.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053dc:	4b61      	ldr	r3, [pc, #388]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	495e      	ldr	r1, [pc, #376]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d010      	beq.n	800541c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	4b59      	ldr	r3, [pc, #356]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005406:	429a      	cmp	r2, r3
 8005408:	d908      	bls.n	800541c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800540a:	4b56      	ldr	r3, [pc, #344]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	4953      	ldr	r1, [pc, #332]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005418:	4313      	orrs	r3, r2
 800541a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	4b4d      	ldr	r3, [pc, #308]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	429a      	cmp	r2, r3
 8005436:	d908      	bls.n	800544a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b4a      	ldr	r3, [pc, #296]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f023 020f 	bic.w	r2, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4947      	ldr	r1, [pc, #284]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005446:	4313      	orrs	r3, r2
 8005448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d055      	beq.n	8005502 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005456:	4b43      	ldr	r3, [pc, #268]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4940      	ldr	r1, [pc, #256]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005464:	4313      	orrs	r3, r2
 8005466:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d107      	bne.n	8005480 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005470:	4b3c      	ldr	r3, [pc, #240]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d121      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0f6      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d107      	bne.n	8005498 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005488:	4b36      	ldr	r3, [pc, #216]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d115      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0ea      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a0:	4b30      	ldr	r3, [pc, #192]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0de      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0d6      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054c0:	4b28      	ldr	r3, [pc, #160]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f023 0207 	bic.w	r2, r3, #7
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4925      	ldr	r1, [pc, #148]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d2:	f7fc fb5b 	bl	8001b8c <HAL_GetTick>
 80054d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d8:	e00a      	b.n	80054f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054da:	f7fc fb57 	bl	8001b8c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e0be      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	429a      	cmp	r2, r3
 8005500:	d1eb      	bne.n	80054da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	429a      	cmp	r2, r3
 800551c:	d208      	bcs.n	8005530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f023 020f 	bic.w	r2, r3, #15
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	490e      	ldr	r1, [pc, #56]	@ (8005564 <HAL_RCC_ClockConfig+0x244>)
 800552c:	4313      	orrs	r3, r2
 800552e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d214      	bcs.n	8005568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 020f 	bic.w	r2, r3, #15
 8005546:	4906      	ldr	r1, [pc, #24]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <HAL_RCC_ClockConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e086      	b.n	800566e <HAL_RCC_ClockConfig+0x34e>
 8005560:	52002000 	.word	0x52002000
 8005564:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d010      	beq.n	8005596 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	4b3f      	ldr	r3, [pc, #252]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005580:	429a      	cmp	r2, r3
 8005582:	d208      	bcs.n	8005596 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005584:	4b3c      	ldr	r3, [pc, #240]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	4939      	ldr	r1, [pc, #228]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 8005592:	4313      	orrs	r3, r2
 8005594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d010      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	4b34      	ldr	r3, [pc, #208]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d208      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055b2:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	492e      	ldr	r1, [pc, #184]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055dc:	429a      	cmp	r2, r3
 80055de:	d208      	bcs.n	80055f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055e0:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	4922      	ldr	r1, [pc, #136]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d010      	beq.n	8005620 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69da      	ldr	r2, [r3, #28]
 8005602:	4b1d      	ldr	r3, [pc, #116]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800560a:	429a      	cmp	r2, r3
 800560c:	d208      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800560e:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	4917      	ldr	r1, [pc, #92]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 800561c:	4313      	orrs	r3, r2
 800561e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005620:	f000 f834 	bl	800568c <HAL_RCC_GetSysClockFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b14      	ldr	r3, [pc, #80]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	4912      	ldr	r1, [pc, #72]	@ (800567c <HAL_RCC_ClockConfig+0x35c>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800563e:	4b0e      	ldr	r3, [pc, #56]	@ (8005678 <HAL_RCC_ClockConfig+0x358>)
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	4a0d      	ldr	r2, [pc, #52]	@ (800567c <HAL_RCC_ClockConfig+0x35c>)
 8005648:	5cd3      	ldrb	r3, [r2, r3]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	4a0a      	ldr	r2, [pc, #40]	@ (8005680 <HAL_RCC_ClockConfig+0x360>)
 8005656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005658:	4a0a      	ldr	r2, [pc, #40]	@ (8005684 <HAL_RCC_ClockConfig+0x364>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800565e:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <HAL_RCC_ClockConfig+0x368>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc fa48 	bl	8001af8 <HAL_InitTick>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
 800567c:	0800e440 	.word	0x0800e440
 8005680:	24000004 	.word	0x24000004
 8005684:	24000000 	.word	0x24000000
 8005688:	24000008 	.word	0x24000008

0800568c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	@ 0x24
 8005690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005692:	4bb3      	ldr	r3, [pc, #716]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800569a:	2b18      	cmp	r3, #24
 800569c:	f200 8155 	bhi.w	800594a <HAL_RCC_GetSysClockFreq+0x2be>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	0800570d 	.word	0x0800570d
 80056ac:	0800594b 	.word	0x0800594b
 80056b0:	0800594b 	.word	0x0800594b
 80056b4:	0800594b 	.word	0x0800594b
 80056b8:	0800594b 	.word	0x0800594b
 80056bc:	0800594b 	.word	0x0800594b
 80056c0:	0800594b 	.word	0x0800594b
 80056c4:	0800594b 	.word	0x0800594b
 80056c8:	08005733 	.word	0x08005733
 80056cc:	0800594b 	.word	0x0800594b
 80056d0:	0800594b 	.word	0x0800594b
 80056d4:	0800594b 	.word	0x0800594b
 80056d8:	0800594b 	.word	0x0800594b
 80056dc:	0800594b 	.word	0x0800594b
 80056e0:	0800594b 	.word	0x0800594b
 80056e4:	0800594b 	.word	0x0800594b
 80056e8:	08005739 	.word	0x08005739
 80056ec:	0800594b 	.word	0x0800594b
 80056f0:	0800594b 	.word	0x0800594b
 80056f4:	0800594b 	.word	0x0800594b
 80056f8:	0800594b 	.word	0x0800594b
 80056fc:	0800594b 	.word	0x0800594b
 8005700:	0800594b 	.word	0x0800594b
 8005704:	0800594b 	.word	0x0800594b
 8005708:	0800573f 	.word	0x0800573f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800570c:	4b94      	ldr	r3, [pc, #592]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005718:	4b91      	ldr	r3, [pc, #580]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	4a90      	ldr	r2, [pc, #576]	@ (8005964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
 8005728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800572a:	e111      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800572c:	4b8d      	ldr	r3, [pc, #564]	@ (8005964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800572e:	61bb      	str	r3, [r7, #24]
      break;
 8005730:	e10e      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005732:	4b8d      	ldr	r3, [pc, #564]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005734:	61bb      	str	r3, [r7, #24]
      break;
 8005736:	e10b      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005738:	4b8c      	ldr	r3, [pc, #560]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800573a:	61bb      	str	r3, [r7, #24]
      break;
 800573c:	e108      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800573e:	4b88      	ldr	r3, [pc, #544]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005748:	4b85      	ldr	r3, [pc, #532]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005752:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005754:	4b82      	ldr	r3, [pc, #520]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800575e:	4b80      	ldr	r3, [pc, #512]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005762:	08db      	lsrs	r3, r3, #3
 8005764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80e1 	beq.w	8005944 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b02      	cmp	r3, #2
 8005786:	f000 8083 	beq.w	8005890 <HAL_RCC_GetSysClockFreq+0x204>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b02      	cmp	r3, #2
 800578e:	f200 80a1 	bhi.w	80058d4 <HAL_RCC_GetSysClockFreq+0x248>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0x114>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d056      	beq.n	800584c <HAL_RCC_GetSysClockFreq+0x1c0>
 800579e:	e099      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02d      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	4a6b      	ldr	r2, [pc, #428]	@ (8005964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d6:	4b62      	ldr	r3, [pc, #392]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005802:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005806:	e087      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005974 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581a:	4b51      	ldr	r3, [pc, #324]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582a:	ed97 6a02 	vldr	s12, [r7, #8]
 800582e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800584a:	e065      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005856:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585e:	4b40      	ldr	r3, [pc, #256]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005872:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800588e:	e043      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800597c <HAL_RCC_GetSysClockFreq+0x2f0>
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058d2:	e021      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005978 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005916:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005918:	4b11      	ldr	r3, [pc, #68]	@ (8005960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591c:	0a5b      	lsrs	r3, r3, #9
 800591e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005922:	3301      	adds	r3, #1
 8005924:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005930:	edd7 6a07 	vldr	s13, [r7, #28]
 8005934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593c:	ee17 3a90 	vmov	r3, s15
 8005940:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005942:	e005      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	61bb      	str	r3, [r7, #24]
      break;
 8005948:	e002      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800594a:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800594c:	61bb      	str	r3, [r7, #24]
      break;
 800594e:	bf00      	nop
  }

  return sysclockfreq;
 8005950:	69bb      	ldr	r3, [r7, #24]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3724      	adds	r7, #36	@ 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	58024400 	.word	0x58024400
 8005964:	03d09000 	.word	0x03d09000
 8005968:	003d0900 	.word	0x003d0900
 800596c:	017d7840 	.word	0x017d7840
 8005970:	46000000 	.word	0x46000000
 8005974:	4c742400 	.word	0x4c742400
 8005978:	4a742400 	.word	0x4a742400
 800597c:	4bbebc20 	.word	0x4bbebc20

08005980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005986:	f7ff fe81 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800598a:	4602      	mov	r2, r0
 800598c:	4b10      	ldr	r3, [pc, #64]	@ (80059d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	490f      	ldr	r1, [pc, #60]	@ (80059d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005998:	5ccb      	ldrb	r3, [r1, r3]
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059a4:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	4a09      	ldr	r2, [pc, #36]	@ (80059d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80059ae:	5cd3      	ldrb	r3, [r2, r3]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ba:	4a07      	ldr	r2, [pc, #28]	@ (80059d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80059bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059be:	4a07      	ldr	r2, [pc, #28]	@ (80059dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059c4:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	58024400 	.word	0x58024400
 80059d4:	0800e440 	.word	0x0800e440
 80059d8:	24000004 	.word	0x24000004
 80059dc:	24000000 	.word	0x24000000

080059e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059e4:	f7ff ffcc 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4904      	ldr	r1, [pc, #16]	@ (8005a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	58024400 	.word	0x58024400
 8005a08:	0800e440 	.word	0x0800e440

08005a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a10:	f7ff ffb6 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 8005a14:	4602      	mov	r2, r0
 8005a16:	4b06      	ldr	r3, [pc, #24]	@ (8005a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	4904      	ldr	r1, [pc, #16]	@ (8005a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a22:	5ccb      	ldrb	r3, [r1, r3]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	58024400 	.word	0x58024400
 8005a34:	0800e440 	.word	0x0800e440

08005a38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a3c:	b0ca      	sub	sp, #296	@ 0x128
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a5c:	2500      	movs	r5, #0
 8005a5e:	ea54 0305 	orrs.w	r3, r4, r5
 8005a62:	d049      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a6e:	d02f      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a74:	d828      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a7a:	d01a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a80:	d822      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a8a:	d007      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a8c:	e01c      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8e:	4bb8      	ldr	r3, [pc, #736]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a92:	4ab7      	ldr	r2, [pc, #732]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a9a:	e01a      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 fc8f 	bl	80073c8 <RCCEx_PLL2_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ab0:	e00f      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	3328      	adds	r3, #40	@ 0x28
 8005ab8:	2102      	movs	r1, #2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 fd36 	bl	800752c <RCCEx_PLL3_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ac6:	e004      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ace:	e000      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ada:	4ba5      	ldr	r3, [pc, #660]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ade:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ae8:	4aa1      	ldr	r2, [pc, #644]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aea:	430b      	orrs	r3, r1
 8005aec:	6513      	str	r3, [r2, #80]	@ 0x50
 8005aee:	e003      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b04:	f04f 0900 	mov.w	r9, #0
 8005b08:	ea58 0309 	orrs.w	r3, r8, r9
 8005b0c:	d047      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d82a      	bhi.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b18:	a201      	add	r2, pc, #4	@ (adr r2, 8005b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b35 	.word	0x08005b35
 8005b24:	08005b43 	.word	0x08005b43
 8005b28:	08005b59 	.word	0x08005b59
 8005b2c:	08005b77 	.word	0x08005b77
 8005b30:	08005b77 	.word	0x08005b77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b34:	4b8e      	ldr	r3, [pc, #568]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	4a8d      	ldr	r2, [pc, #564]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b40:	e01a      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b46:	3308      	adds	r3, #8
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 fc3c 	bl	80073c8 <RCCEx_PLL2_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b56:	e00f      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	3328      	adds	r3, #40	@ 0x28
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fce3 	bl	800752c <RCCEx_PLL3_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e004      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b80:	4b7b      	ldr	r3, [pc, #492]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b84:	f023 0107 	bic.w	r1, r3, #7
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8e:	4a78      	ldr	r2, [pc, #480]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b94:	e003      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005baa:	f04f 0b00 	mov.w	fp, #0
 8005bae:	ea5a 030b 	orrs.w	r3, sl, fp
 8005bb2:	d04c      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbe:	d030      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc4:	d829      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc8:	d02d      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bcc:	d825      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bce:	2b80      	cmp	r3, #128	@ 0x80
 8005bd0:	d018      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005bd2:	2b80      	cmp	r3, #128	@ 0x80
 8005bd4:	d821      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005bda:	2b40      	cmp	r3, #64	@ 0x40
 8005bdc:	d007      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005bde:	e01c      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	4b63      	ldr	r3, [pc, #396]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	4a62      	ldr	r2, [pc, #392]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bec:	e01c      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fbe6 	bl	80073c8 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c02:	e011      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c08:	3328      	adds	r3, #40	@ 0x28
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 fc8d 	bl	800752c <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c18:	e006      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c20:	e002      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c22:	bf00      	nop
 8005c24:	e000      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c30:	4b4f      	ldr	r3, [pc, #316]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c44:	e003      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d053      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c7a:	d035      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c80:	d82e      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c86:	d031      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c8c:	d828      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c92:	d01a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c98:	d822      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca2:	d007      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ca4:	e01c      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca6:	4b32      	ldr	r3, [pc, #200]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	4a31      	ldr	r2, [pc, #196]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb2:	e01c      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb8:	3308      	adds	r3, #8
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 fb83 	bl	80073c8 <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cc8:	e011      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	3328      	adds	r3, #40	@ 0x28
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fc2a 	bl	800752c <RCCEx_PLL3_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d06:	4a1a      	ldr	r2, [pc, #104]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d0c:	e003      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d056      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d42:	d038      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d48:	d831      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d4e:	d034      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d54:	d82b      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d5a:	d01d      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d60:	d825      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d006      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d6c:	e01f      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d6e:	bf00      	nop
 8005d70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d74:	4ba2      	ldr	r3, [pc, #648]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	4aa1      	ldr	r2, [pc, #644]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d80:	e01c      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	3308      	adds	r3, #8
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fb1c 	bl	80073c8 <RCCEx_PLL2_Config>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d96:	e011      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9c:	3328      	adds	r3, #40	@ 0x28
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 fbc3 	bl	800752c <RCCEx_PLL3_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005db4:	e002      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005db6:	bf00      	nop
 8005db8:	e000      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dd4:	4a8a      	ldr	r2, [pc, #552]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005df0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dfa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	d03a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0a:	2b30      	cmp	r3, #48	@ 0x30
 8005e0c:	d01f      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e0e:	2b30      	cmp	r3, #48	@ 0x30
 8005e10:	d819      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d00c      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d815      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d019      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d111      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e22:	4b77      	ldr	r3, [pc, #476]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4a76      	ldr	r2, [pc, #472]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e2e:	e011      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	3308      	adds	r3, #8
 8005e36:	2102      	movs	r1, #2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fac5 	bl	80073c8 <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e44:	e006      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e5c:	4b68      	ldr	r3, [pc, #416]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6a:	4a65      	ldr	r2, [pc, #404]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d051      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea4:	d035      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eaa:	d82e      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb0:	d031      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005eb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb6:	d828      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d01a      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec2:	d822      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ecc:	d007      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ece:	e01c      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005edc:	e01c      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fa6e 	bl	80073c8 <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ef2:	e011      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	3328      	adds	r3, #40	@ 0x28
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fb15 	bl	800752c <RCCEx_PLL3_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f20:	4b37      	ldr	r3, [pc, #220]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2e:	4a34      	ldr	r2, [pc, #208]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f34:	e003      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	d056      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f68:	d033      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f6e:	d82c      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f74:	d02f      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f7a:	d826      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f80:	d02b      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f86:	d820      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f8c:	d012      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f92:	d81a      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d022      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d115      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 fa0e 	bl	80073c8 <RCCEx_PLL2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fb2:	e015      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb8:	3328      	adds	r3, #40	@ 0x28
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fab5 	bl	800752c <RCCEx_PLL3_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e00a      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fd0:	e006      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fd2:	bf00      	nop
 8005fd4:	e004      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fd6:	bf00      	nop
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fda:	bf00      	nop
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10d      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ff6:	4a02      	ldr	r2, [pc, #8]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ffe:	bf00      	nop
 8006000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800601c:	2300      	movs	r3, #0
 800601e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006022:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006026:	460b      	mov	r3, r1
 8006028:	4313      	orrs	r3, r2
 800602a:	d055      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006038:	d033      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800603a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800603e:	d82c      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d02f      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604a:	d826      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800604c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006050:	d02b      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006052:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006056:	d820      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605c:	d012      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800605e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006062:	d81a      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d022      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606c:	d115      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006072:	3308      	adds	r3, #8
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f9a6 	bl	80073c8 <RCCEx_PLL2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006082:	e015      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006088:	3328      	adds	r3, #40	@ 0x28
 800608a:	2101      	movs	r1, #1
 800608c:	4618      	mov	r0, r3
 800608e:	f001 fa4d 	bl	800752c <RCCEx_PLL3_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006098:	e00a      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060a2:	bf00      	nop
 80060a4:	e004      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060a6:	bf00      	nop
 80060a8:	e002      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060aa:	bf00      	nop
 80060ac:	e000      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10b      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060b8:	4ba3      	ldr	r3, [pc, #652]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060bc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060c8:	4a9f      	ldr	r2, [pc, #636]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ce:	e003      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d037      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006102:	d00e      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006108:	d816      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800610e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006112:	d111      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006114:	4b8c      	ldr	r3, [pc, #560]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	4a8b      	ldr	r2, [pc, #556]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800611a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006120:	e00f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	3308      	adds	r3, #8
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f001 f94c 	bl	80073c8 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800614a:	4b7f      	ldr	r3, [pc, #508]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800614c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006158:	4a7b      	ldr	r2, [pc, #492]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615a:	430b      	orrs	r3, r1
 800615c:	6513      	str	r3, [r2, #80]	@ 0x50
 800615e:	e003      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800617e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d039      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800618e:	2b03      	cmp	r3, #3
 8006190:	d81c      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006192:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061d5 	.word	0x080061d5
 800619c:	080061a9 	.word	0x080061a9
 80061a0:	080061b7 	.word	0x080061b7
 80061a4:	080061d5 	.word	0x080061d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a8:	4b67      	ldr	r3, [pc, #412]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	4a66      	ldr	r2, [pc, #408]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061b4:	e00f      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	3308      	adds	r3, #8
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f902 	bl	80073c8 <RCCEx_PLL2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061de:	4b5a      	ldr	r3, [pc, #360]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	f023 0103 	bic.w	r1, r3, #3
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ec:	4a56      	ldr	r2, [pc, #344]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ee:	430b      	orrs	r3, r1
 80061f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061f2:	e003      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800620c:	2300      	movs	r3, #0
 800620e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006212:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006216:	460b      	mov	r3, r1
 8006218:	4313      	orrs	r3, r2
 800621a:	f000 809f 	beq.w	800635c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800621e:	4b4b      	ldr	r3, [pc, #300]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a4a      	ldr	r2, [pc, #296]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800622a:	f7fb fcaf 	bl	8001b8c <HAL_GetTick>
 800622e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006232:	e00b      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006234:	f7fb fcaa 	bl	8001b8c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b64      	cmp	r3, #100	@ 0x64
 8006242:	d903      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800624a:	e005      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624c:	4b3f      	ldr	r3, [pc, #252]	@ (800634c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ed      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625c:	2b00      	cmp	r3, #0
 800625e:	d179      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006260:	4b39      	ldr	r3, [pc, #228]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800626c:	4053      	eors	r3, r2
 800626e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006272:	2b00      	cmp	r3, #0
 8006274:	d015      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006276:	4b34      	ldr	r3, [pc, #208]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800627e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006282:	4b31      	ldr	r3, [pc, #196]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	4a30      	ldr	r2, [pc, #192]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800628e:	4b2e      	ldr	r3, [pc, #184]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	4a2d      	ldr	r2, [pc, #180]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006298:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800629a:	4a2b      	ldr	r2, [pc, #172]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800629c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ae:	d118      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fb fc6c 	bl	8001b8c <HAL_GetTick>
 80062b4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b8:	e00d      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ba:	f7fb fc67 	bl	8001b8c <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d903      	bls.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80062d4:	e005      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0eb      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d129      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062fa:	d10e      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062fc:	4b12      	ldr	r3, [pc, #72]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800630c:	091a      	lsrs	r2, r3, #4
 800630e:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006310:	4013      	ands	r3, r2
 8006312:	4a0d      	ldr	r2, [pc, #52]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	430b      	orrs	r3, r1
 8006316:	6113      	str	r3, [r2, #16]
 8006318:	e005      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800631a:	4b0b      	ldr	r3, [pc, #44]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	4a0a      	ldr	r2, [pc, #40]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006320:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006324:	6113      	str	r3, [r2, #16]
 8006326:	4b08      	ldr	r3, [pc, #32]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006328:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006336:	4a04      	ldr	r2, [pc, #16]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006338:	430b      	orrs	r3, r1
 800633a:	6713      	str	r3, [r2, #112]	@ 0x70
 800633c:	e00e      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800633e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006346:	e009      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006348:	58024400 	.word	0x58024400
 800634c:	58024800 	.word	0x58024800
 8006350:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f002 0301 	and.w	r3, r2, #1
 8006368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006372:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006376:	460b      	mov	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	f000 8089 	beq.w	8006490 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006384:	2b28      	cmp	r3, #40	@ 0x28
 8006386:	d86b      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006388:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	08006469 	.word	0x08006469
 8006394:	08006461 	.word	0x08006461
 8006398:	08006461 	.word	0x08006461
 800639c:	08006461 	.word	0x08006461
 80063a0:	08006461 	.word	0x08006461
 80063a4:	08006461 	.word	0x08006461
 80063a8:	08006461 	.word	0x08006461
 80063ac:	08006461 	.word	0x08006461
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006461 	.word	0x08006461
 80063b8:	08006461 	.word	0x08006461
 80063bc:	08006461 	.word	0x08006461
 80063c0:	08006461 	.word	0x08006461
 80063c4:	08006461 	.word	0x08006461
 80063c8:	08006461 	.word	0x08006461
 80063cc:	08006461 	.word	0x08006461
 80063d0:	0800644b 	.word	0x0800644b
 80063d4:	08006461 	.word	0x08006461
 80063d8:	08006461 	.word	0x08006461
 80063dc:	08006461 	.word	0x08006461
 80063e0:	08006461 	.word	0x08006461
 80063e4:	08006461 	.word	0x08006461
 80063e8:	08006461 	.word	0x08006461
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006469 	.word	0x08006469
 80063f4:	08006461 	.word	0x08006461
 80063f8:	08006461 	.word	0x08006461
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006461 	.word	0x08006461
 8006404:	08006461 	.word	0x08006461
 8006408:	08006461 	.word	0x08006461
 800640c:	08006461 	.word	0x08006461
 8006410:	08006469 	.word	0x08006469
 8006414:	08006461 	.word	0x08006461
 8006418:	08006461 	.word	0x08006461
 800641c:	08006461 	.word	0x08006461
 8006420:	08006461 	.word	0x08006461
 8006424:	08006461 	.word	0x08006461
 8006428:	08006461 	.word	0x08006461
 800642c:	08006461 	.word	0x08006461
 8006430:	08006469 	.word	0x08006469
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	3308      	adds	r3, #8
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f000 ffc3 	bl	80073c8 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006448:	e00f      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f001 f86a 	bl	800752c <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800645e:	e004      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006472:	4bbf      	ldr	r3, [pc, #764]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006476:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006480:	4abb      	ldr	r2, [pc, #748]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006482:	430b      	orrs	r3, r1
 8006484:	6553      	str	r3, [r2, #84]	@ 0x54
 8006486:	e003      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f002 0302 	and.w	r3, r2, #2
 800649c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80064a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d041      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	d824      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	0800650d 	.word	0x0800650d
 80064c4:	080064d9 	.word	0x080064d9
 80064c8:	080064ef 	.word	0x080064ef
 80064cc:	0800650d 	.word	0x0800650d
 80064d0:	0800650d 	.word	0x0800650d
 80064d4:	0800650d 	.word	0x0800650d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	3308      	adds	r3, #8
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ff71 	bl	80073c8 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f2:	3328      	adds	r3, #40	@ 0x28
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f818 	bl	800752c <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006516:	4b96      	ldr	r3, [pc, #600]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	f023 0107 	bic.w	r1, r3, #7
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006524:	4a92      	ldr	r2, [pc, #584]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006526:	430b      	orrs	r3, r1
 8006528:	6553      	str	r3, [r2, #84]	@ 0x54
 800652a:	e003      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f002 0304 	and.w	r3, r2, #4
 8006540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800654a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d044      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655c:	2b05      	cmp	r3, #5
 800655e:	d825      	bhi.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	080065b5 	.word	0x080065b5
 800656c:	08006581 	.word	0x08006581
 8006570:	08006597 	.word	0x08006597
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006584:	3308      	adds	r3, #8
 8006586:	2101      	movs	r1, #1
 8006588:	4618      	mov	r0, r3
 800658a:	f000 ff1d 	bl	80073c8 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006594:	e00f      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659a:	3328      	adds	r3, #40	@ 0x28
 800659c:	2101      	movs	r1, #1
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ffc4 	bl	800752c <RCCEx_PLL3_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065aa:	e004      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80065b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065be:	4b6c      	ldr	r3, [pc, #432]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c2:	f023 0107 	bic.w	r1, r3, #7
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ce:	4a68      	ldr	r2, [pc, #416]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065d4:	e003      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f002 0320 	and.w	r3, r2, #32
 80065ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065f8:	460b      	mov	r3, r1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d055      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800660a:	d033      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800660c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006610:	d82c      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006616:	d02f      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661c:	d826      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800661e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006622:	d02b      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006628:	d820      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800662a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800662e:	d012      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006634:	d81a      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d022      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800663a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800663e:	d115      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006644:	3308      	adds	r3, #8
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f000 febd 	bl	80073c8 <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006654:	e015      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	3328      	adds	r3, #40	@ 0x28
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ff64 	bl	800752c <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800666a:	e00a      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006672:	e006      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006674:	bf00      	nop
 8006676:	e004      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800668a:	4b39      	ldr	r3, [pc, #228]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800668c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669a:	4a35      	ldr	r2, [pc, #212]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6553      	str	r3, [r2, #84]	@ 0x54
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066ba:	2300      	movs	r3, #0
 80066bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80066c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d058      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066d6:	d033      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066dc:	d82c      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e2:	d02f      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e8:	d826      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ee:	d02b      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066f4:	d820      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066fa:	d012      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006700:	d81a      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d022      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670a:	d115      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006710:	3308      	adds	r3, #8
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fe57 	bl	80073c8 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006720:	e015      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	3328      	adds	r3, #40	@ 0x28
 8006728:	2102      	movs	r1, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fefe 	bl	800752c <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800673e:	e006      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006740:	bf00      	nop
 8006742:	e004      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10e      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006766:	4a02      	ldr	r2, [pc, #8]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6593      	str	r3, [r2, #88]	@ 0x58
 800676c:	e006      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800678c:	2300      	movs	r3, #0
 800678e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006792:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d055      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067a8:	d033      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80067aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067ae:	d82c      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b4:	d02f      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80067b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ba:	d826      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067c0:	d02b      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80067c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067c6:	d820      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067cc:	d012      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80067ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d2:	d81a      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d022      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067dc:	d115      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	3308      	adds	r3, #8
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fdee 	bl	80073c8 <RCCEx_PLL2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067f2:	e015      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f8:	3328      	adds	r3, #40	@ 0x28
 80067fa:	2102      	movs	r1, #2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fe95 	bl	800752c <RCCEx_PLL3_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006808:	e00a      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006810:	e006      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006812:	bf00      	nop
 8006814:	e004      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006816:	bf00      	nop
 8006818:	e002      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800681a:	bf00      	nop
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800681e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006828:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800682a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006838:	4a9d      	ldr	r2, [pc, #628]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800683a:	430b      	orrs	r3, r1
 800683c:	6593      	str	r3, [r2, #88]	@ 0x58
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f002 0308 	and.w	r3, r2, #8
 8006854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800685e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d01e      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006874:	d10c      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	3328      	adds	r3, #40	@ 0x28
 800687c:	2102      	movs	r1, #2
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fe54 	bl	800752c <RCCEx_PLL3_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006890:	4b87      	ldr	r3, [pc, #540]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006894:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a0:	4a83      	ldr	r2, [pc, #524]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f002 0310 	and.w	r3, r2, #16
 80068b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d01e      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	d10c      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	3328      	adds	r3, #40	@ 0x28
 80068da:	2102      	movs	r1, #2
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fe25 	bl	800752c <RCCEx_PLL3_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068ee:	4b70      	ldr	r3, [pc, #448]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068fe:	4a6c      	ldr	r2, [pc, #432]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006900:	430b      	orrs	r3, r1
 8006902:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800691a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800691e:	460b      	mov	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	d03e      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800692c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006930:	d022      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006936:	d81b      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006940:	d00b      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006942:	e015      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006948:	3308      	adds	r3, #8
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fd3b 	bl	80073c8 <RCCEx_PLL2_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006958:	e00f      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	3328      	adds	r3, #40	@ 0x28
 8006960:	2102      	movs	r1, #2
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fde2 	bl	800752c <RCCEx_PLL3_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800696e:	e004      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006976:	e000      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006982:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006986:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006992:	4a47      	ldr	r2, [pc, #284]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006994:	430b      	orrs	r3, r1
 8006996:	6593      	str	r3, [r2, #88]	@ 0x58
 8006998:	e003      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069b0:	2300      	movs	r3, #0
 80069b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80069b8:	460b      	mov	r3, r1
 80069ba:	4313      	orrs	r3, r2
 80069bc:	d03b      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ca:	d01f      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80069cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069d0:	d818      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80069d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069dc:	d007      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069de:	e011      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b33      	ldr	r3, [pc, #204]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a32      	ldr	r2, [pc, #200]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069ec:	e00f      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	3328      	adds	r3, #40	@ 0x28
 80069f4:	2101      	movs	r1, #1
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fd98 	bl	800752c <RCCEx_PLL3_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a02:	e004      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a0a:	e000      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a16:	4b26      	ldr	r3, [pc, #152]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a26:	4a22      	ldr	r2, [pc, #136]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a2c:	e003      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a44:	2300      	movs	r3, #0
 8006a46:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d034      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a60:	d007      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a62:	e011      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a64:	4b12      	ldr	r3, [pc, #72]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a68:	4a11      	ldr	r2, [pc, #68]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a70:	e00e      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	3308      	adds	r3, #8
 8006a78:	2102      	movs	r1, #2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fca4 	bl	80073c8 <RCCEx_PLL2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a86:	e003      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10d      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa6:	4a02      	ldr	r2, [pc, #8]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aac:	e006      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aca:	2300      	movs	r3, #0
 8006acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ace:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	d00c      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	3328      	adds	r3, #40	@ 0x28
 8006ade:	2102      	movs	r1, #2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fd23 	bl	800752c <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006afe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b00:	2300      	movs	r3, #0
 8006b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d038      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b1a:	d018      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b20:	d811      	bhi.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b26:	d014      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b2c:	d80b      	bhi.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b36:	d106      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b38:	4bc3      	ldr	r3, [pc, #780]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	4ac2      	ldr	r2, [pc, #776]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b44:	e008      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b4c:	e004      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b4e:	bf00      	nop
 8006b50:	e002      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b52:	bf00      	nop
 8006b54:	e000      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b60:	4bb9      	ldr	r3, [pc, #740]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b70:	4ab5      	ldr	r2, [pc, #724]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b76:	e003      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b8e:	2300      	movs	r3, #0
 8006b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b96:	460b      	mov	r3, r1
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b9c:	4baa      	ldr	r3, [pc, #680]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006baa:	4aa7      	ldr	r2, [pc, #668]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006bbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d00a      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bcc:	4b9e      	ldr	r3, [pc, #632]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006bdc:	4a9a      	ldr	r2, [pc, #616]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bfe:	4b92      	ldr	r3, [pc, #584]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c02:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c0c:	4a8e      	ldr	r2, [pc, #568]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c20:	2300      	movs	r3, #0
 8006c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c2e:	4b86      	ldr	r3, [pc, #536]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	4a85      	ldr	r2, [pc, #532]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c38:	6113      	str	r3, [r2, #16]
 8006c3a:	4b83      	ldr	r3, [pc, #524]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3c:	6919      	ldr	r1, [r3, #16]
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c46:	4a80      	ldr	r2, [pc, #512]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c68:	4b77      	ldr	r3, [pc, #476]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c76:	4a74      	ldr	r2, [pc, #464]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d00a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c98:	4b6b      	ldr	r3, [pc, #428]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ca8:	4a67      	ldr	r2, [pc, #412]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006caa:	430b      	orrs	r3, r1
 8006cac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d011      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cce:	3308      	adds	r3, #8
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fb78 	bl	80073c8 <RCCEx_PLL2_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6239      	str	r1, [r7, #32]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d04:	460b      	mov	r3, r1
 8006d06:	4313      	orrs	r3, r2
 8006d08:	d011      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0e:	3308      	adds	r3, #8
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fb58 	bl	80073c8 <RCCEx_PLL2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	2100      	movs	r1, #0
 8006d38:	61b9      	str	r1, [r7, #24]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d44:	460b      	mov	r3, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	d011      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4e:	3308      	adds	r3, #8
 8006d50:	2102      	movs	r1, #2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fb38 	bl	80073c8 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	2100      	movs	r1, #0
 8006d78:	6139      	str	r1, [r7, #16]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d84:	460b      	mov	r3, r1
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d011      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8e:	3328      	adds	r3, #40	@ 0x28
 8006d90:	2100      	movs	r1, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fbca 	bl	800752c <RCCEx_PLL3_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	2100      	movs	r1, #0
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	d011      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	3328      	adds	r3, #40	@ 0x28
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fbaa 	bl	800752c <RCCEx_PLL3_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	2100      	movs	r1, #0
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e04:	460b      	mov	r3, r1
 8006e06:	4313      	orrs	r3, r2
 8006e08:	d011      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	3328      	adds	r3, #40	@ 0x28
 8006e10:	2102      	movs	r1, #2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fb8a 	bl	800752c <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006e2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006e42:	46bd      	mov	sp, r7
 8006e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e48:	58024400 	.word	0x58024400

08006e4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e50:	f7fe fd96 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	091b      	lsrs	r3, r3, #4
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	4904      	ldr	r1, [pc, #16]	@ (8006e74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	58024400 	.word	0x58024400
 8006e74:	0800e440 	.word	0x0800e440

08006e78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b089      	sub	sp, #36	@ 0x24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e80:	4ba1      	ldr	r3, [pc, #644]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e8a:	4b9f      	ldr	r3, [pc, #636]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	0b1b      	lsrs	r3, r3, #12
 8006e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e96:	4b9c      	ldr	r3, [pc, #624]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	091b      	lsrs	r3, r3, #4
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ea2:	4b99      	ldr	r3, [pc, #612]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea6:	08db      	lsrs	r3, r3, #3
 8006ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8111 	beq.w	80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	f000 8083 	beq.w	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	f200 80a1 	bhi.w	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d056      	beq.n	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ee2:	e099      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee4:	4b88      	ldr	r3, [pc, #544]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d02d      	beq.n	8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef0:	4b85      	ldr	r3, [pc, #532]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	4a84      	ldr	r2, [pc, #528]	@ (800710c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	ee07 3a90 	vmov	s15, r3
 8006f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f4a:	e087      	b.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8e:	e065      	b.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa2:	4b59      	ldr	r3, [pc, #356]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd2:	e043      	b.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe6:	4b48      	ldr	r3, [pc, #288]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007016:	e021      	b.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007022:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702a:	4b37      	ldr	r3, [pc, #220]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703a:	ed97 6a03 	vldr	s12, [r7, #12]
 800703e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800705a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800705c:	4b2a      	ldr	r3, [pc, #168]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	0a5b      	lsrs	r3, r3, #9
 8007062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007076:	edd7 6a07 	vldr	s13, [r7, #28]
 800707a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007082:	ee17 2a90 	vmov	r2, s15
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800708a:	4b1f      	ldr	r3, [pc, #124]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708e:	0c1b      	lsrs	r3, r3, #16
 8007090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b0:	ee17 2a90 	vmov	r2, s15
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070b8:	4b13      	ldr	r3, [pc, #76]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	0e1b      	lsrs	r3, r3, #24
 80070be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070de:	ee17 2a90 	vmov	r2, s15
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070e6:	e008      	b.n	80070fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	609a      	str	r2, [r3, #8]
}
 80070fa:	bf00      	nop
 80070fc:	3724      	adds	r7, #36	@ 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	58024400 	.word	0x58024400
 800710c:	03d09000 	.word	0x03d09000
 8007110:	46000000 	.word	0x46000000
 8007114:	4c742400 	.word	0x4c742400
 8007118:	4a742400 	.word	0x4a742400
 800711c:	4bbebc20 	.word	0x4bbebc20

08007120 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	@ 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007128:	4ba1      	ldr	r3, [pc, #644]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007132:	4b9f      	ldr	r3, [pc, #636]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007136:	0d1b      	lsrs	r3, r3, #20
 8007138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800713c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800713e:	4b9c      	ldr	r3, [pc, #624]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800714a:	4b99      	ldr	r3, [pc, #612]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8111 	beq.w	8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b02      	cmp	r3, #2
 8007172:	f000 8083 	beq.w	800727c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b02      	cmp	r3, #2
 800717a:	f200 80a1 	bhi.w	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d056      	beq.n	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800718a:	e099      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718c:	4b88      	ldr	r3, [pc, #544]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d02d      	beq.n	80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007198:	4b85      	ldr	r3, [pc, #532]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	08db      	lsrs	r3, r3, #3
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	4a84      	ldr	r2, [pc, #528]	@ (80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
 80071a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b7b      	ldr	r3, [pc, #492]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071f2:	e087      	b.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b6a      	ldr	r3, [pc, #424]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007236:	e065      	b.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b59      	ldr	r3, [pc, #356]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727a:	e043      	b.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b48      	ldr	r3, [pc, #288]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072be:	e021      	b.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d2:	4b37      	ldr	r3, [pc, #220]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007302:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007304:	4b2a      	ldr	r3, [pc, #168]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	0a5b      	lsrs	r3, r3, #9
 800730a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800731a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	ee17 2a90 	vmov	r2, s15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007332:	4b1f      	ldr	r3, [pc, #124]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007358:	ee17 2a90 	vmov	r2, s15
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007360:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007364:	0e1b      	lsrs	r3, r3, #24
 8007366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737a:	edd7 6a07 	vldr	s13, [r7, #28]
 800737e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007386:	ee17 2a90 	vmov	r2, s15
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800738e:	e008      	b.n	80073a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	609a      	str	r2, [r3, #8]
}
 80073a2:	bf00      	nop
 80073a4:	3724      	adds	r7, #36	@ 0x24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	58024400 	.word	0x58024400
 80073b4:	03d09000 	.word	0x03d09000
 80073b8:	46000000 	.word	0x46000000
 80073bc:	4c742400 	.word	0x4c742400
 80073c0:	4a742400 	.word	0x4a742400
 80073c4:	4bbebc20 	.word	0x4bbebc20

080073c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073d6:	4b53      	ldr	r3, [pc, #332]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d101      	bne.n	80073e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e099      	b.n	800751a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a4e      	ldr	r2, [pc, #312]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f2:	f7fa fbcb 	bl	8001b8c <HAL_GetTick>
 80073f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073f8:	e008      	b.n	800740c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073fa:	f7fa fbc7 	bl	8001b8c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e086      	b.n	800751a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800740c:	4b45      	ldr	r3, [pc, #276]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f0      	bne.n	80073fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007418:	4b42      	ldr	r3, [pc, #264]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	493f      	ldr	r1, [pc, #252]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	628b      	str	r3, [r1, #40]	@ 0x28
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	3b01      	subs	r3, #1
 800743c:	025b      	lsls	r3, r3, #9
 800743e:	b29b      	uxth	r3, r3
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	3b01      	subs	r3, #1
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	3b01      	subs	r3, #1
 8007456:	061b      	lsls	r3, r3, #24
 8007458:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800745c:	4931      	ldr	r1, [pc, #196]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007462:	4b30      	ldr	r3, [pc, #192]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	492d      	ldr	r1, [pc, #180]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007470:	4313      	orrs	r3, r2
 8007472:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007474:	4b2b      	ldr	r3, [pc, #172]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	f023 0220 	bic.w	r2, r3, #32
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	4928      	ldr	r1, [pc, #160]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007486:	4b27      	ldr	r3, [pc, #156]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	4a26      	ldr	r2, [pc, #152]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 800748c:	f023 0310 	bic.w	r3, r3, #16
 8007490:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007492:	4b24      	ldr	r3, [pc, #144]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007496:	4b24      	ldr	r3, [pc, #144]	@ (8007528 <RCCEx_PLL2_Config+0x160>)
 8007498:	4013      	ands	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	69d2      	ldr	r2, [r2, #28]
 800749e:	00d2      	lsls	r2, r2, #3
 80074a0:	4920      	ldr	r1, [pc, #128]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	f043 0310 	orr.w	r3, r3, #16
 80074b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	4a19      	ldr	r2, [pc, #100]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074c4:	e00f      	b.n	80074e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d106      	bne.n	80074da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074cc:	4b15      	ldr	r3, [pc, #84]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d0:	4a14      	ldr	r2, [pc, #80]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074d8:	e005      	b.n	80074e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074da:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	4a11      	ldr	r2, [pc, #68]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f2:	f7fa fb4b 	bl	8001b8c <HAL_GetTick>
 80074f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074f8:	e008      	b.n	800750c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074fa:	f7fa fb47 	bl	8001b8c <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e006      	b.n	800751a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <RCCEx_PLL2_Config+0x15c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0f0      	beq.n	80074fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400
 8007528:	ffff0007 	.word	0xffff0007

0800752c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800753a:	4b53      	ldr	r3, [pc, #332]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b03      	cmp	r3, #3
 8007544:	d101      	bne.n	800754a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e099      	b.n	800767e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800754a:	4b4f      	ldr	r3, [pc, #316]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a4e      	ldr	r2, [pc, #312]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007556:	f7fa fb19 	bl	8001b8c <HAL_GetTick>
 800755a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800755c:	e008      	b.n	8007570 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800755e:	f7fa fb15 	bl	8001b8c <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e086      	b.n	800767e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007570:	4b45      	ldr	r3, [pc, #276]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f0      	bne.n	800755e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800757c:	4b42      	ldr	r3, [pc, #264]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800757e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007580:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	051b      	lsls	r3, r3, #20
 800758a:	493f      	ldr	r1, [pc, #252]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	3b01      	subs	r3, #1
 8007596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	3b01      	subs	r3, #1
 80075a0:	025b      	lsls	r3, r3, #9
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	061b      	lsls	r3, r3, #24
 80075bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075c0:	4931      	ldr	r1, [pc, #196]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075c6:	4b30      	ldr	r3, [pc, #192]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	492d      	ldr	r1, [pc, #180]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	4928      	ldr	r1, [pc, #160]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ea:	4b27      	ldr	r3, [pc, #156]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ee:	4a26      	ldr	r2, [pc, #152]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075f6:	4b24      	ldr	r3, [pc, #144]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075fa:	4b24      	ldr	r3, [pc, #144]	@ (800768c <RCCEx_PLL3_Config+0x160>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	69d2      	ldr	r2, [r2, #28]
 8007602:	00d2      	lsls	r2, r2, #3
 8007604:	4920      	ldr	r1, [pc, #128]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007606:	4313      	orrs	r3, r2
 8007608:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800760a:	4b1f      	ldr	r3, [pc, #124]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	4a1e      	ldr	r2, [pc, #120]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007614:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d106      	bne.n	800762a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800761c:	4b1a      	ldr	r3, [pc, #104]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	4a19      	ldr	r2, [pc, #100]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007622:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007628:	e00f      	b.n	800764a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d106      	bne.n	800763e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007630:	4b15      	ldr	r3, [pc, #84]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	4a14      	ldr	r2, [pc, #80]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007636:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800763a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800763c:	e005      	b.n	800764a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800763e:	4b12      	ldr	r3, [pc, #72]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	4a11      	ldr	r2, [pc, #68]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007644:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007648:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800764a:	4b0f      	ldr	r3, [pc, #60]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a0e      	ldr	r2, [pc, #56]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007656:	f7fa fa99 	bl	8001b8c <HAL_GetTick>
 800765a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800765c:	e008      	b.n	8007670 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800765e:	f7fa fa95 	bl	8001b8c <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007670:	4b05      	ldr	r3, [pc, #20]	@ (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
 800768c:	ffff0007 	.word	0xffff0007

08007690 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e10f      	b.n	80078c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a87      	ldr	r2, [pc, #540]	@ (80078cc <HAL_SPI_Init+0x23c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00f      	beq.n	80076d2 <HAL_SPI_Init+0x42>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a86      	ldr	r2, [pc, #536]	@ (80078d0 <HAL_SPI_Init+0x240>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00a      	beq.n	80076d2 <HAL_SPI_Init+0x42>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a84      	ldr	r2, [pc, #528]	@ (80078d4 <HAL_SPI_Init+0x244>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d005      	beq.n	80076d2 <HAL_SPI_Init+0x42>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d901      	bls.n	80076d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e0f7      	b.n	80078c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fe2c 	bl	8008330 <SPI_GetPacketSize>
 80076d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a7b      	ldr	r2, [pc, #492]	@ (80078cc <HAL_SPI_Init+0x23c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00c      	beq.n	80076fe <HAL_SPI_Init+0x6e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a79      	ldr	r2, [pc, #484]	@ (80078d0 <HAL_SPI_Init+0x240>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <HAL_SPI_Init+0x6e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a78      	ldr	r2, [pc, #480]	@ (80078d4 <HAL_SPI_Init+0x244>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_Init+0x6e>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d811      	bhi.n	8007722 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007702:	4a72      	ldr	r2, [pc, #456]	@ (80078cc <HAL_SPI_Init+0x23c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a70      	ldr	r2, [pc, #448]	@ (80078d0 <HAL_SPI_Init+0x240>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_SPI_Init+0x8c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a6f      	ldr	r2, [pc, #444]	@ (80078d4 <HAL_SPI_Init+0x244>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d104      	bne.n	8007726 <HAL_SPI_Init+0x96>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b10      	cmp	r3, #16
 8007720:	d901      	bls.n	8007726 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e0cd      	b.n	80078c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7f9 fd5a 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007762:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800776c:	d119      	bne.n	80077a2 <HAL_SPI_Init+0x112>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007776:	d103      	bne.n	8007780 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10c      	bne.n	80077a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007790:	d107      	bne.n	80077a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00f      	beq.n	80077ce <HAL_SPI_Init+0x13e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d90b      	bls.n	80077ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e007      	b.n	80077de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69da      	ldr	r2, [r3, #28]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e6:	431a      	orrs	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f0:	ea42 0103 	orr.w	r1, r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800783e:	ea42 0103 	orr.w	r1, r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d113      	bne.n	800787e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007868:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800787c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40013000 	.word	0x40013000
 80078d0:	40003800 	.word	0x40003800
 80078d4:	40003c00 	.word	0x40003c00

080078d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3301      	adds	r3, #1
 80078f2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3330      	adds	r3, #48	@ 0x30
 80078fa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078fc:	f7fa f946 	bl	8001b8c <HAL_GetTick>
 8007900:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800790e:	2302      	movs	r3, #2
 8007910:	e250      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_SPI_Receive+0x46>
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e248      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_SPI_Receive+0x58>
 800792c:	2302      	movs	r3, #2
 800792e:	e241      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2204      	movs	r2, #4
 800793c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007988:	d108      	bne.n	800799c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e009      	b.n	80079b0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80079ae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4b95      	ldr	r3, [pc, #596]	@ (8007c0c <HAL_SPI_Receive+0x334>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	88f9      	ldrh	r1, [r7, #6]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0201 	orr.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079dc:	d107      	bne.n	80079ee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d96c      	bls.n	8007ad0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80079f6:	e064      	b.n	8007ac2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d114      	bne.n	8007a38 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a18:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a1e:	1d1a      	adds	r2, r3, #4
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a36:	e044      	b.n	8007ac2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8bfa      	ldrh	r2, [r7, #30]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d919      	bls.n	8007a7a <HAL_SPI_Receive+0x1a2>
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d014      	beq.n	8007a7a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a5a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a60:	1d1a      	adds	r2, r3, #4
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a78:	e023      	b.n	8007ac2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a7a:	f7fa f887 	bl	8001b8c <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d803      	bhi.n	8007a92 <HAL_SPI_Receive+0x1ba>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d102      	bne.n	8007a98 <HAL_SPI_Receive+0x1c0>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d114      	bne.n	8007ac2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fba9 	bl	80081f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aa4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e178      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d194      	bne.n	80079f8 <HAL_SPI_Receive+0x120>
 8007ace:	e15e      	b.n	8007d8e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b07      	cmp	r3, #7
 8007ad6:	f240 8153 	bls.w	8007d80 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007ada:	e08f      	b.n	8007bfc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d114      	bne.n	8007b1c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	8812      	ldrh	r2, [r2, #0]
 8007afa:	b292      	uxth	r2, r2
 8007afc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b1a:	e06f      	b.n	8007bfc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8bfa      	ldrh	r2, [r7, #30]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d924      	bls.n	8007b74 <HAL_SPI_Receive+0x29c>
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01f      	beq.n	8007b74 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	8812      	ldrh	r2, [r2, #0]
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b44:	1c9a      	adds	r2, r3, #2
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	b292      	uxth	r2, r2
 8007b54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b02      	subs	r3, #2
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b72:	e043      	b.n	8007bfc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d119      	bne.n	8007bb4 <HAL_SPI_Receive+0x2dc>
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	8812      	ldrh	r2, [r2, #0]
 8007b92:	b292      	uxth	r2, r2
 8007b94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9a:	1c9a      	adds	r2, r3, #2
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bb2:	e023      	b.n	8007bfc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bb4:	f7f9 ffea 	bl	8001b8c <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d803      	bhi.n	8007bcc <HAL_SPI_Receive+0x2f4>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bca:	d102      	bne.n	8007bd2 <HAL_SPI_Receive+0x2fa>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d114      	bne.n	8007bfc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fb0c 	bl	80081f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e0db      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f af69 	bne.w	8007adc <HAL_SPI_Receive+0x204>
 8007c0a:	e0c0      	b.n	8007d8e <HAL_SPI_Receive+0x4b6>
 8007c0c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d117      	bne.n	8007c56 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c32:	7812      	ldrb	r2, [r2, #0]
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c54:	e094      	b.n	8007d80 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	8bfa      	ldrh	r2, [r7, #30]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d946      	bls.n	8007cf2 <HAL_SPI_Receive+0x41a>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d041      	beq.n	8007cf2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b04      	subs	r3, #4
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cf0:	e046      	b.n	8007d80 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d81c      	bhi.n	8007d38 <HAL_SPI_Receive+0x460>
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d017      	beq.n	8007d38 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d36:	e023      	b.n	8007d80 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d38:	f7f9 ff28 	bl	8001b8c <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d803      	bhi.n	8007d50 <HAL_SPI_Receive+0x478>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d102      	bne.n	8007d56 <HAL_SPI_Receive+0x47e>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d114      	bne.n	8007d80 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fa4a 	bl	80081f0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e019      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f47f af41 	bne.w	8007c10 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fa2e 	bl	80081f0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007db2:	2300      	movs	r3, #0
  }
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	@ 0x28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007dd4:	6a3a      	ldr	r2, [r7, #32]
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007dee:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3330      	adds	r3, #48	@ 0x30
 8007df6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d010      	beq.n	8007e24 <HAL_SPI_IRQHandler+0x68>
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e1a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9c3 	bl	80081a8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007e22:	e192      	b.n	800814a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d113      	bne.n	8007e56 <HAL_SPI_IRQHandler+0x9a>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10e      	bne.n	8007e56 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
    handled = 1UL;
 8007e52:	2301      	movs	r3, #1
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10f      	bne.n	8007e80 <HAL_SPI_IRQHandler+0xc4>
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
    handled = 1UL;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10f      	bne.n	8007eaa <HAL_SPI_IRQHandler+0xee>
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
    handled = 1UL;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 8147 	bne.w	8008140 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 808b 	beq.w	8007fd4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0208 	orr.w	r2, r2, #8
 8007ecc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0210 	orr.w	r2, r2, #16
 8007edc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eec:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0208 	bic.w	r2, r2, #8
 8007efc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d13d      	bne.n	8007f88 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007f0c:	e036      	b.n	8007f7c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b0f      	cmp	r3, #15
 8007f14:	d90b      	bls.n	8007f2e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007f20:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f26:	1d1a      	adds	r2, r3, #4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	665a      	str	r2, [r3, #100]	@ 0x64
 8007f2c:	e01d      	b.n	8007f6a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b07      	cmp	r3, #7
 8007f34:	d90b      	bls.n	8007f4e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	8812      	ldrh	r2, [r2, #0]
 8007f3e:	b292      	uxth	r2, r2
 8007f40:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f46:	1c9a      	adds	r2, r3, #2
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	665a      	str	r2, [r3, #100]	@ 0x64
 8007f4c:	e00d      	b.n	8007f6a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f5a:	7812      	ldrb	r2, [r2, #0]
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1c2      	bne.n	8007f0e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f931 	bl	80081f0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f8f7 	bl	8008194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007fa6:	e0d0      	b.n	800814a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007fa8:	7cfb      	ldrb	r3, [r7, #19]
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	d103      	bne.n	8007fb6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f8e6 	bl	8008180 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007fb4:	e0c6      	b.n	8008144 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007fb6:	7cfb      	ldrb	r3, [r7, #19]
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d103      	bne.n	8007fc4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f8d5 	bl	800816c <HAL_SPI_RxCpltCallback>
    return;
 8007fc2:	e0bf      	b.n	8008144 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007fc4:	7cfb      	ldrb	r3, [r7, #19]
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	f040 80bc 	bne.w	8008144 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8c3 	bl	8008158 <HAL_SPI_TxCpltCallback>
    return;
 8007fd2:	e0b7      	b.n	8008144 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 80b5 	beq.w	800814a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff0:	f043 0204 	orr.w	r2, r3, #4
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	699a      	ldr	r2, [r3, #24]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008008:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00f      	beq.n	8008034 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800801a:	f043 0201 	orr.w	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008032:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00f      	beq.n	800805e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008044:	f043 0208 	orr.w	r2, r3, #8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800805c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00f      	beq.n	8008088 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800806e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0220 	orr.w	r2, r2, #32
 8008086:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808e:	2b00      	cmp	r3, #0
 8008090:	d05a      	beq.n	8008148 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0201 	bic.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6919      	ldr	r1, [r3, #16]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b28      	ldr	r3, [pc, #160]	@ (8008150 <HAL_SPI_IRQHandler+0x394>)
 80080ae:	400b      	ands	r3, r1
 80080b0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80080b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080bc:	d138      	bne.n	8008130 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80080cc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d013      	beq.n	80080fe <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080da:	4a1e      	ldr	r2, [pc, #120]	@ (8008154 <HAL_SPI_IRQHandler+0x398>)
 80080dc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fa fef8 	bl	8002ed8 <HAL_DMA_Abort_IT>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008102:	2b00      	cmp	r3, #0
 8008104:	d020      	beq.n	8008148 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800810a:	4a12      	ldr	r2, [pc, #72]	@ (8008154 <HAL_SPI_IRQHandler+0x398>)
 800810c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008112:	4618      	mov	r0, r3
 8008114:	f7fa fee0 	bl	8002ed8 <HAL_DMA_Abort_IT>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d014      	beq.n	8008148 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008124:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800812e:	e00b      	b.n	8008148 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f82b 	bl	8008194 <HAL_SPI_ErrorCallback>
    return;
 800813e:	e003      	b.n	8008148 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008140:	bf00      	nop
 8008142:	e002      	b.n	800814a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008144:	bf00      	nop
 8008146:	e000      	b.n	800814a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008148:	bf00      	nop
  }
}
 800814a:	3728      	adds	r7, #40	@ 0x28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	fffffc94 	.word	0xfffffc94
 8008154:	080081bd 	.word	0x080081bd

08008158 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff ffd6 	bl	8008194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0208 	orr.w	r2, r2, #8
 800820e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0210 	orr.w	r2, r2, #16
 800821e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6919      	ldr	r1, [r3, #16]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	4b3c      	ldr	r3, [pc, #240]	@ (800832c <SPI_CloseTransfer+0x13c>)
 800823c:	400b      	ands	r3, r1
 800823e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800824e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b04      	cmp	r3, #4
 800825a:	d014      	beq.n	8008286 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00f      	beq.n	8008286 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800826c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	699a      	ldr	r2, [r3, #24]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0220 	orr.w	r2, r2, #32
 8008284:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b03      	cmp	r3, #3
 8008290:	d014      	beq.n	80082bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00f      	beq.n	80082bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082a2:	f043 0204 	orr.w	r2, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00f      	beq.n	80082e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082cc:	f043 0201 	orr.w	r2, r3, #1
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699a      	ldr	r2, [r3, #24]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00f      	beq.n	8008310 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082f6:	f043 0208 	orr.w	r2, r3, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800830e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008320:	bf00      	nop
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	fffffc90 	.word	0xfffffc90

08008330 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3307      	adds	r3, #7
 800834e:	08db      	lsrs	r3, r3, #3
 8008350:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	fb02 f303 	mul.w	r3, r2, r3
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e042      	b.n	80083fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7f9 fa60 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2224      	movs	r2, #36	@ 0x24
 8008394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0201 	bic.w	r2, r2, #1
 80083a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fa15 	bl	80097e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fcaa 	bl	8008d10 <UART_SetConfig>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e01b      	b.n	80083fe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f042 0201 	orr.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fa94 	bl	8009924 <UART_CheckIdleState>
 80083fc:	4603      	mov	r3, r0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b08a      	sub	sp, #40	@ 0x28
 800840a:	af02      	add	r7, sp, #8
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	603b      	str	r3, [r7, #0]
 8008412:	4613      	mov	r3, r2
 8008414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800841c:	2b20      	cmp	r3, #32
 800841e:	d17b      	bne.n	8008518 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <HAL_UART_Transmit+0x26>
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e074      	b.n	800851a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2221      	movs	r2, #33	@ 0x21
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008440:	f7f9 fba4 	bl	8001b8c <HAL_GetTick>
 8008444:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	88fa      	ldrh	r2, [r7, #6]
 800844a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800845e:	d108      	bne.n	8008472 <HAL_UART_Transmit+0x6c>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	61bb      	str	r3, [r7, #24]
 8008470:	e003      	b.n	800847a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800847a:	e030      	b.n	80084de <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2200      	movs	r2, #0
 8008484:	2180      	movs	r1, #128	@ 0x80
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f001 faf6 	bl	8009a78 <UART_WaitOnFlagUntilTimeout>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d005      	beq.n	800849e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e03d      	b.n	800851a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10b      	bne.n	80084bc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	3302      	adds	r3, #2
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	e007      	b.n	80084cc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	781a      	ldrb	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3301      	adds	r3, #1
 80084ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	3b01      	subs	r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1c8      	bne.n	800847c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2200      	movs	r2, #0
 80084f2:	2140      	movs	r1, #64	@ 0x40
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f001 fabf 	bl	8009a78 <UART_WaitOnFlagUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e006      	b.n	800851a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b0ba      	sub	sp, #232	@ 0xe8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800854a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800854e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008552:	4013      	ands	r3, r2
 8008554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11b      	bne.n	8008598 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800857c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8393 	beq.w	8008cb4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
      }
      return;
 8008596:	e38d      	b.n	8008cb4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8123 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085a6:	4b8d      	ldr	r3, [pc, #564]	@ (80087dc <HAL_UART_IRQHandler+0x2b8>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085b2:	4b8b      	ldr	r3, [pc, #556]	@ (80087e0 <HAL_UART_IRQHandler+0x2bc>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8116 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d011      	beq.n	80085ec <HAL_UART_IRQHandler+0xc8>
 80085c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2201      	movs	r2, #1
 80085da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e2:	f043 0201 	orr.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d011      	beq.n	800861c <HAL_UART_IRQHandler+0xf8>
 80085f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2202      	movs	r2, #2
 800860a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008612:	f043 0204 	orr.w	r2, r3, #4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800861c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d011      	beq.n	800864c <HAL_UART_IRQHandler+0x128>
 8008628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2204      	movs	r2, #4
 800863a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008642:	f043 0202 	orr.w	r2, r3, #2
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008668:	4b5c      	ldr	r3, [pc, #368]	@ (80087dc <HAL_UART_IRQHandler+0x2b8>)
 800866a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2208      	movs	r2, #8
 8008676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800867e:	f043 0208 	orr.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800868c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008690:	2b00      	cmp	r3, #0
 8008692:	d012      	beq.n	80086ba <HAL_UART_IRQHandler+0x196>
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b0:	f043 0220 	orr.w	r2, r3, #32
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 82f9 	beq.w	8008cb8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d013      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008700:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870e:	2b40      	cmp	r3, #64	@ 0x40
 8008710:	d005      	beq.n	800871e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008716:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800871a:	2b00      	cmp	r3, #0
 800871c:	d054      	beq.n	80087c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fa18 	bl	8009b54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872e:	2b40      	cmp	r3, #64	@ 0x40
 8008730:	d146      	bne.n	80087c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008748:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800874c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800875e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800876a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1d9      	bne.n	8008732 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008784:	2b00      	cmp	r3, #0
 8008786:	d017      	beq.n	80087b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878e:	4a15      	ldr	r2, [pc, #84]	@ (80087e4 <HAL_UART_IRQHandler+0x2c0>)
 8008790:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008798:	4618      	mov	r0, r3
 800879a:	f7fa fb9d 	bl	8002ed8 <HAL_DMA_Abort_IT>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d019      	beq.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80087b2:	4610      	mov	r0, r2
 80087b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b6:	e00f      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fa93 	bl	8008ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087be:	e00b      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa8f 	bl	8008ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c6:	e007      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa8b 	bl	8008ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087d6:	e26f      	b.n	8008cb8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	bf00      	nop
    return;
 80087da:	e26d      	b.n	8008cb8 <HAL_UART_IRQHandler+0x794>
 80087dc:	10000001 	.word	0x10000001
 80087e0:	04000120 	.word	0x04000120
 80087e4:	08009c21 	.word	0x08009c21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	f040 8203 	bne.w	8008bf8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 81fc 	beq.w	8008bf8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 81f5 	beq.w	8008bf8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2210      	movs	r2, #16
 8008814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	f040 816d 	bne.w	8008b00 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4aa4      	ldr	r2, [pc, #656]	@ (8008ac0 <HAL_UART_IRQHandler+0x59c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d068      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4aa1      	ldr	r2, [pc, #644]	@ (8008ac4 <HAL_UART_IRQHandler+0x5a0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d061      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ac8 <HAL_UART_IRQHandler+0x5a4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d05a      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a9c      	ldr	r2, [pc, #624]	@ (8008acc <HAL_UART_IRQHandler+0x5a8>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d053      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a9a      	ldr	r2, [pc, #616]	@ (8008ad0 <HAL_UART_IRQHandler+0x5ac>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04c      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a97      	ldr	r2, [pc, #604]	@ (8008ad4 <HAL_UART_IRQHandler+0x5b0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d045      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a95      	ldr	r2, [pc, #596]	@ (8008ad8 <HAL_UART_IRQHandler+0x5b4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d03e      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a92      	ldr	r2, [pc, #584]	@ (8008adc <HAL_UART_IRQHandler+0x5b8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d037      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a90      	ldr	r2, [pc, #576]	@ (8008ae0 <HAL_UART_IRQHandler+0x5bc>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d030      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a8d      	ldr	r2, [pc, #564]	@ (8008ae4 <HAL_UART_IRQHandler+0x5c0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d029      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a8b      	ldr	r2, [pc, #556]	@ (8008ae8 <HAL_UART_IRQHandler+0x5c4>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d022      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a88      	ldr	r2, [pc, #544]	@ (8008aec <HAL_UART_IRQHandler+0x5c8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d01b      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a86      	ldr	r2, [pc, #536]	@ (8008af0 <HAL_UART_IRQHandler+0x5cc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d014      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a83      	ldr	r2, [pc, #524]	@ (8008af4 <HAL_UART_IRQHandler+0x5d0>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00d      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a81      	ldr	r2, [pc, #516]	@ (8008af8 <HAL_UART_IRQHandler+0x5d4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d006      	beq.n	8008906 <HAL_UART_IRQHandler+0x3e2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a7e      	ldr	r2, [pc, #504]	@ (8008afc <HAL_UART_IRQHandler+0x5d8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d106      	bne.n	8008914 <HAL_UART_IRQHandler+0x3f0>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	b29b      	uxth	r3, r3
 8008912:	e005      	b.n	8008920 <HAL_UART_IRQHandler+0x3fc>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008924:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80ad 	beq.w	8008a88 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008938:	429a      	cmp	r2, r3
 800893a:	f080 80a5 	bcs.w	8008a88 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008944:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008954:	f000 8087 	beq.w	8008a66 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800896c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008986:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800898e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800899a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1da      	bne.n	8008958 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089b4:	f023 0301 	bic.w	r3, r3, #1
 80089b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e1      	bne.n	80089a2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3308      	adds	r3, #8
 80089e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3308      	adds	r3, #8
 80089fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e3      	bne.n	80089de <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a34:	f023 0310 	bic.w	r3, r3, #16
 8008a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e4      	bne.n	8008a24 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7f9 ff1b 	bl	800289c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f939 	bl	8008cf8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008a86:	e119      	b.n	8008cbc <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a92:	429a      	cmp	r2, r3
 8008a94:	f040 8112 	bne.w	8008cbc <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aa4:	f040 810a 	bne.w	8008cbc <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f91e 	bl	8008cf8 <HAL_UARTEx_RxEventCallback>
      return;
 8008abc:	e0fe      	b.n	8008cbc <HAL_UART_IRQHandler+0x798>
 8008abe:	bf00      	nop
 8008ac0:	40020010 	.word	0x40020010
 8008ac4:	40020028 	.word	0x40020028
 8008ac8:	40020040 	.word	0x40020040
 8008acc:	40020058 	.word	0x40020058
 8008ad0:	40020070 	.word	0x40020070
 8008ad4:	40020088 	.word	0x40020088
 8008ad8:	400200a0 	.word	0x400200a0
 8008adc:	400200b8 	.word	0x400200b8
 8008ae0:	40020410 	.word	0x40020410
 8008ae4:	40020428 	.word	0x40020428
 8008ae8:	40020440 	.word	0x40020440
 8008aec:	40020458 	.word	0x40020458
 8008af0:	40020470 	.word	0x40020470
 8008af4:	40020488 	.word	0x40020488
 8008af8:	400204a0 	.word	0x400204a0
 8008afc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 80cf 	beq.w	8008cc0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 80ca 	beq.w	8008cc0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e4      	bne.n	8008b2c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	623b      	str	r3, [r7, #32]
   return(result);
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	4b55      	ldr	r3, [pc, #340]	@ (8008ccc <HAL_UART_IRQHandler+0x7a8>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e3      	bne.n	8008b62 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008bd0:	61fb      	str	r3, [r7, #28]
 8008bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	69b9      	ldr	r1, [r7, #24]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e4      	bne.n	8008bae <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f881 	bl	8008cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bf6:	e063      	b.n	8008cc0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00e      	beq.n	8008c22 <HAL_UART_IRQHandler+0x6fe>
 8008c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 f83d 	bl	8009c9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c20:	e051      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d014      	beq.n	8008c58 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d03a      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
    }
    return;
 8008c56:	e035      	b.n	8008cc4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d009      	beq.n	8008c78 <HAL_UART_IRQHandler+0x754>
 8008c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 ffe7 	bl	8009c44 <UART_EndTransmit_IT>
    return;
 8008c76:	e026      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d009      	beq.n	8008c98 <HAL_UART_IRQHandler+0x774>
 8008c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f816 	bl	8009cc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c96:	e016      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d010      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
 8008ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da0c      	bge.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fffe 	bl	8009cae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cb2:	e008      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008cb4:	bf00      	nop
 8008cb6:	e006      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008cb8:	bf00      	nop
 8008cba:	e004      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008cbc:	bf00      	nop
 8008cbe:	e002      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008cc4:	bf00      	nop
  }
}
 8008cc6:	37e8      	adds	r7, #232	@ 0xe8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	effffffe 	.word	0xeffffffe

08008cd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d14:	b092      	sub	sp, #72	@ 0x48
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4bbe      	ldr	r3, [pc, #760]	@ (8009038 <UART_SetConfig+0x328>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4ab3      	ldr	r2, [pc, #716]	@ (800903c <UART_SetConfig+0x32c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d004      	beq.n	8008d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	4baf      	ldr	r3, [pc, #700]	@ (8009040 <UART_SetConfig+0x330>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d96:	f023 010f 	bic.w	r1, r3, #15
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4aa6      	ldr	r2, [pc, #664]	@ (8009044 <UART_SetConfig+0x334>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d177      	bne.n	8008ea0 <UART_SetConfig+0x190>
 8008db0:	4ba5      	ldr	r3, [pc, #660]	@ (8009048 <UART_SetConfig+0x338>)
 8008db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008db8:	2b28      	cmp	r3, #40	@ 0x28
 8008dba:	d86d      	bhi.n	8008e98 <UART_SetConfig+0x188>
 8008dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc4 <UART_SetConfig+0xb4>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008e69 	.word	0x08008e69
 8008dc8:	08008e99 	.word	0x08008e99
 8008dcc:	08008e99 	.word	0x08008e99
 8008dd0:	08008e99 	.word	0x08008e99
 8008dd4:	08008e99 	.word	0x08008e99
 8008dd8:	08008e99 	.word	0x08008e99
 8008ddc:	08008e99 	.word	0x08008e99
 8008de0:	08008e99 	.word	0x08008e99
 8008de4:	08008e71 	.word	0x08008e71
 8008de8:	08008e99 	.word	0x08008e99
 8008dec:	08008e99 	.word	0x08008e99
 8008df0:	08008e99 	.word	0x08008e99
 8008df4:	08008e99 	.word	0x08008e99
 8008df8:	08008e99 	.word	0x08008e99
 8008dfc:	08008e99 	.word	0x08008e99
 8008e00:	08008e99 	.word	0x08008e99
 8008e04:	08008e79 	.word	0x08008e79
 8008e08:	08008e99 	.word	0x08008e99
 8008e0c:	08008e99 	.word	0x08008e99
 8008e10:	08008e99 	.word	0x08008e99
 8008e14:	08008e99 	.word	0x08008e99
 8008e18:	08008e99 	.word	0x08008e99
 8008e1c:	08008e99 	.word	0x08008e99
 8008e20:	08008e99 	.word	0x08008e99
 8008e24:	08008e81 	.word	0x08008e81
 8008e28:	08008e99 	.word	0x08008e99
 8008e2c:	08008e99 	.word	0x08008e99
 8008e30:	08008e99 	.word	0x08008e99
 8008e34:	08008e99 	.word	0x08008e99
 8008e38:	08008e99 	.word	0x08008e99
 8008e3c:	08008e99 	.word	0x08008e99
 8008e40:	08008e99 	.word	0x08008e99
 8008e44:	08008e89 	.word	0x08008e89
 8008e48:	08008e99 	.word	0x08008e99
 8008e4c:	08008e99 	.word	0x08008e99
 8008e50:	08008e99 	.word	0x08008e99
 8008e54:	08008e99 	.word	0x08008e99
 8008e58:	08008e99 	.word	0x08008e99
 8008e5c:	08008e99 	.word	0x08008e99
 8008e60:	08008e99 	.word	0x08008e99
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e222      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e21e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e21a      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e216      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e212      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008e90:	2340      	movs	r3, #64	@ 0x40
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e20e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008e98:	2380      	movs	r3, #128	@ 0x80
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e20a      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a69      	ldr	r2, [pc, #420]	@ (800904c <UART_SetConfig+0x33c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d130      	bne.n	8008f0c <UART_SetConfig+0x1fc>
 8008eaa:	4b67      	ldr	r3, [pc, #412]	@ (8009048 <UART_SetConfig+0x338>)
 8008eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d826      	bhi.n	8008f04 <UART_SetConfig+0x1f4>
 8008eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <UART_SetConfig+0x1ac>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ed5 	.word	0x08008ed5
 8008ec0:	08008edd 	.word	0x08008edd
 8008ec4:	08008ee5 	.word	0x08008ee5
 8008ec8:	08008eed 	.word	0x08008eed
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008efd 	.word	0x08008efd
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e1ec      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008edc:	2304      	movs	r3, #4
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e1e8      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e1e4      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008eec:	2310      	movs	r3, #16
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e1e0      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e1dc      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008efc:	2340      	movs	r3, #64	@ 0x40
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e1d8      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f04:	2380      	movs	r3, #128	@ 0x80
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e1d4      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a4f      	ldr	r2, [pc, #316]	@ (8009050 <UART_SetConfig+0x340>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d130      	bne.n	8008f78 <UART_SetConfig+0x268>
 8008f16:	4b4c      	ldr	r3, [pc, #304]	@ (8009048 <UART_SetConfig+0x338>)
 8008f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d826      	bhi.n	8008f70 <UART_SetConfig+0x260>
 8008f22:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <UART_SetConfig+0x218>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f41 	.word	0x08008f41
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f51 	.word	0x08008f51
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008f61 	.word	0x08008f61
 8008f3c:	08008f69 	.word	0x08008f69
 8008f40:	2300      	movs	r3, #0
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e1b6      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e1b2      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f50:	2308      	movs	r3, #8
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e1ae      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e1aa      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f60:	2320      	movs	r3, #32
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e1a6      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f68:	2340      	movs	r3, #64	@ 0x40
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e1a2      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f70:	2380      	movs	r3, #128	@ 0x80
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e19e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a35      	ldr	r2, [pc, #212]	@ (8009054 <UART_SetConfig+0x344>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d130      	bne.n	8008fe4 <UART_SetConfig+0x2d4>
 8008f82:	4b31      	ldr	r3, [pc, #196]	@ (8009048 <UART_SetConfig+0x338>)
 8008f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	d826      	bhi.n	8008fdc <UART_SetConfig+0x2cc>
 8008f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <UART_SetConfig+0x284>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fad 	.word	0x08008fad
 8008f98:	08008fb5 	.word	0x08008fb5
 8008f9c:	08008fbd 	.word	0x08008fbd
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	08008fd5 	.word	0x08008fd5
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e180      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e17c      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e178      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e174      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fcc:	2320      	movs	r3, #32
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e170      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fd4:	2340      	movs	r3, #64	@ 0x40
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e16c      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fdc:	2380      	movs	r3, #128	@ 0x80
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e168      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8009058 <UART_SetConfig+0x348>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d142      	bne.n	8009074 <UART_SetConfig+0x364>
 8008fee:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <UART_SetConfig+0x338>)
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d838      	bhi.n	800906c <UART_SetConfig+0x35c>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <UART_SetConfig+0x2f0>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009019 	.word	0x08009019
 8009004:	08009021 	.word	0x08009021
 8009008:	08009029 	.word	0x08009029
 800900c:	08009031 	.word	0x08009031
 8009010:	0800905d 	.word	0x0800905d
 8009014:	08009065 	.word	0x08009065
 8009018:	2300      	movs	r3, #0
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e14a      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009020:	2304      	movs	r3, #4
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e146      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009028:	2308      	movs	r3, #8
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e142      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009030:	2310      	movs	r3, #16
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e13e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009038:	cfff69f3 	.word	0xcfff69f3
 800903c:	58000c00 	.word	0x58000c00
 8009040:	11fff4ff 	.word	0x11fff4ff
 8009044:	40011000 	.word	0x40011000
 8009048:	58024400 	.word	0x58024400
 800904c:	40004400 	.word	0x40004400
 8009050:	40004800 	.word	0x40004800
 8009054:	40004c00 	.word	0x40004c00
 8009058:	40005000 	.word	0x40005000
 800905c:	2320      	movs	r3, #32
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e128      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009064:	2340      	movs	r3, #64	@ 0x40
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e124      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800906c:	2380      	movs	r3, #128	@ 0x80
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e120      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4acb      	ldr	r2, [pc, #812]	@ (80093a8 <UART_SetConfig+0x698>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d176      	bne.n	800916c <UART_SetConfig+0x45c>
 800907e:	4bcb      	ldr	r3, [pc, #812]	@ (80093ac <UART_SetConfig+0x69c>)
 8009080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009086:	2b28      	cmp	r3, #40	@ 0x28
 8009088:	d86c      	bhi.n	8009164 <UART_SetConfig+0x454>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x380>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	08009135 	.word	0x08009135
 8009094:	08009165 	.word	0x08009165
 8009098:	08009165 	.word	0x08009165
 800909c:	08009165 	.word	0x08009165
 80090a0:	08009165 	.word	0x08009165
 80090a4:	08009165 	.word	0x08009165
 80090a8:	08009165 	.word	0x08009165
 80090ac:	08009165 	.word	0x08009165
 80090b0:	0800913d 	.word	0x0800913d
 80090b4:	08009165 	.word	0x08009165
 80090b8:	08009165 	.word	0x08009165
 80090bc:	08009165 	.word	0x08009165
 80090c0:	08009165 	.word	0x08009165
 80090c4:	08009165 	.word	0x08009165
 80090c8:	08009165 	.word	0x08009165
 80090cc:	08009165 	.word	0x08009165
 80090d0:	08009145 	.word	0x08009145
 80090d4:	08009165 	.word	0x08009165
 80090d8:	08009165 	.word	0x08009165
 80090dc:	08009165 	.word	0x08009165
 80090e0:	08009165 	.word	0x08009165
 80090e4:	08009165 	.word	0x08009165
 80090e8:	08009165 	.word	0x08009165
 80090ec:	08009165 	.word	0x08009165
 80090f0:	0800914d 	.word	0x0800914d
 80090f4:	08009165 	.word	0x08009165
 80090f8:	08009165 	.word	0x08009165
 80090fc:	08009165 	.word	0x08009165
 8009100:	08009165 	.word	0x08009165
 8009104:	08009165 	.word	0x08009165
 8009108:	08009165 	.word	0x08009165
 800910c:	08009165 	.word	0x08009165
 8009110:	08009155 	.word	0x08009155
 8009114:	08009165 	.word	0x08009165
 8009118:	08009165 	.word	0x08009165
 800911c:	08009165 	.word	0x08009165
 8009120:	08009165 	.word	0x08009165
 8009124:	08009165 	.word	0x08009165
 8009128:	08009165 	.word	0x08009165
 800912c:	08009165 	.word	0x08009165
 8009130:	0800915d 	.word	0x0800915d
 8009134:	2301      	movs	r3, #1
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e0bc      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e0b8      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e0b4      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e0b0      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009154:	2320      	movs	r3, #32
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e0ac      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800915c:	2340      	movs	r3, #64	@ 0x40
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e0a8      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009164:	2380      	movs	r3, #128	@ 0x80
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e0a4      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a8f      	ldr	r2, [pc, #572]	@ (80093b0 <UART_SetConfig+0x6a0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d130      	bne.n	80091d8 <UART_SetConfig+0x4c8>
 8009176:	4b8d      	ldr	r3, [pc, #564]	@ (80093ac <UART_SetConfig+0x69c>)
 8009178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	2b05      	cmp	r3, #5
 8009180:	d826      	bhi.n	80091d0 <UART_SetConfig+0x4c0>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <UART_SetConfig+0x478>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091a1 	.word	0x080091a1
 800918c:	080091a9 	.word	0x080091a9
 8009190:	080091b1 	.word	0x080091b1
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091c1 	.word	0x080091c1
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e086      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091a8:	2304      	movs	r3, #4
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e082      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091b0:	2308      	movs	r3, #8
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e07e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091b8:	2310      	movs	r3, #16
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e07a      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091c0:	2320      	movs	r3, #32
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e076      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091c8:	2340      	movs	r3, #64	@ 0x40
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e072      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091d0:	2380      	movs	r3, #128	@ 0x80
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e06e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a75      	ldr	r2, [pc, #468]	@ (80093b4 <UART_SetConfig+0x6a4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d130      	bne.n	8009244 <UART_SetConfig+0x534>
 80091e2:	4b72      	ldr	r3, [pc, #456]	@ (80093ac <UART_SetConfig+0x69c>)
 80091e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d826      	bhi.n	800923c <UART_SetConfig+0x52c>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <UART_SetConfig+0x4e4>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009215 	.word	0x08009215
 80091fc:	0800921d 	.word	0x0800921d
 8009200:	08009225 	.word	0x08009225
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009235 	.word	0x08009235
 800920c:	2300      	movs	r3, #0
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e050      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009214:	2304      	movs	r3, #4
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e04c      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800921c:	2308      	movs	r3, #8
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e048      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009224:	2310      	movs	r3, #16
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e044      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800922c:	2320      	movs	r3, #32
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e040      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009234:	2340      	movs	r3, #64	@ 0x40
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e03c      	b.n	80092b6 <UART_SetConfig+0x5a6>
 800923c:	2380      	movs	r3, #128	@ 0x80
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e038      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a5b      	ldr	r2, [pc, #364]	@ (80093b8 <UART_SetConfig+0x6a8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d130      	bne.n	80092b0 <UART_SetConfig+0x5a0>
 800924e:	4b57      	ldr	r3, [pc, #348]	@ (80093ac <UART_SetConfig+0x69c>)
 8009250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b05      	cmp	r3, #5
 8009258:	d826      	bhi.n	80092a8 <UART_SetConfig+0x598>
 800925a:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <UART_SetConfig+0x550>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009279 	.word	0x08009279
 8009264:	08009281 	.word	0x08009281
 8009268:	08009289 	.word	0x08009289
 800926c:	08009291 	.word	0x08009291
 8009270:	08009299 	.word	0x08009299
 8009274:	080092a1 	.word	0x080092a1
 8009278:	2302      	movs	r3, #2
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e01a      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009280:	2304      	movs	r3, #4
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e016      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009288:	2308      	movs	r3, #8
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e012      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009290:	2310      	movs	r3, #16
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e00e      	b.n	80092b6 <UART_SetConfig+0x5a6>
 8009298:	2320      	movs	r3, #32
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e00a      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80092a0:	2340      	movs	r3, #64	@ 0x40
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e006      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80092a8:	2380      	movs	r3, #128	@ 0x80
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e002      	b.n	80092b6 <UART_SetConfig+0x5a6>
 80092b0:	2380      	movs	r3, #128	@ 0x80
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3f      	ldr	r2, [pc, #252]	@ (80093b8 <UART_SetConfig+0x6a8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	f040 80f8 	bne.w	80094b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092c6:	2b20      	cmp	r3, #32
 80092c8:	dc46      	bgt.n	8009358 <UART_SetConfig+0x648>
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	f2c0 8082 	blt.w	80093d4 <UART_SetConfig+0x6c4>
 80092d0:	3b02      	subs	r3, #2
 80092d2:	2b1e      	cmp	r3, #30
 80092d4:	d87e      	bhi.n	80093d4 <UART_SetConfig+0x6c4>
 80092d6:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <UART_SetConfig+0x5cc>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	0800935f 	.word	0x0800935f
 80092e0:	080093d5 	.word	0x080093d5
 80092e4:	08009367 	.word	0x08009367
 80092e8:	080093d5 	.word	0x080093d5
 80092ec:	080093d5 	.word	0x080093d5
 80092f0:	080093d5 	.word	0x080093d5
 80092f4:	08009377 	.word	0x08009377
 80092f8:	080093d5 	.word	0x080093d5
 80092fc:	080093d5 	.word	0x080093d5
 8009300:	080093d5 	.word	0x080093d5
 8009304:	080093d5 	.word	0x080093d5
 8009308:	080093d5 	.word	0x080093d5
 800930c:	080093d5 	.word	0x080093d5
 8009310:	080093d5 	.word	0x080093d5
 8009314:	08009387 	.word	0x08009387
 8009318:	080093d5 	.word	0x080093d5
 800931c:	080093d5 	.word	0x080093d5
 8009320:	080093d5 	.word	0x080093d5
 8009324:	080093d5 	.word	0x080093d5
 8009328:	080093d5 	.word	0x080093d5
 800932c:	080093d5 	.word	0x080093d5
 8009330:	080093d5 	.word	0x080093d5
 8009334:	080093d5 	.word	0x080093d5
 8009338:	080093d5 	.word	0x080093d5
 800933c:	080093d5 	.word	0x080093d5
 8009340:	080093d5 	.word	0x080093d5
 8009344:	080093d5 	.word	0x080093d5
 8009348:	080093d5 	.word	0x080093d5
 800934c:	080093d5 	.word	0x080093d5
 8009350:	080093d5 	.word	0x080093d5
 8009354:	080093c7 	.word	0x080093c7
 8009358:	2b40      	cmp	r3, #64	@ 0x40
 800935a:	d037      	beq.n	80093cc <UART_SetConfig+0x6bc>
 800935c:	e03a      	b.n	80093d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800935e:	f7fd fd75 	bl	8006e4c <HAL_RCCEx_GetD3PCLK1Freq>
 8009362:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009364:	e03c      	b.n	80093e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800936a:	4618      	mov	r0, r3
 800936c:	f7fd fd84 	bl	8006e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009374:	e034      	b.n	80093e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009376:	f107 0318 	add.w	r3, r7, #24
 800937a:	4618      	mov	r0, r3
 800937c:	f7fd fed0 	bl	8007120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009384:	e02c      	b.n	80093e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009386:	4b09      	ldr	r3, [pc, #36]	@ (80093ac <UART_SetConfig+0x69c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d016      	beq.n	80093c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009392:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <UART_SetConfig+0x69c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	08db      	lsrs	r3, r3, #3
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	4a07      	ldr	r2, [pc, #28]	@ (80093bc <UART_SetConfig+0x6ac>)
 800939e:	fa22 f303 	lsr.w	r3, r2, r3
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093a4:	e01c      	b.n	80093e0 <UART_SetConfig+0x6d0>
 80093a6:	bf00      	nop
 80093a8:	40011400 	.word	0x40011400
 80093ac:	58024400 	.word	0x58024400
 80093b0:	40007800 	.word	0x40007800
 80093b4:	40007c00 	.word	0x40007c00
 80093b8:	58000c00 	.word	0x58000c00
 80093bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80093c0:	4b9d      	ldr	r3, [pc, #628]	@ (8009638 <UART_SetConfig+0x928>)
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c4:	e00c      	b.n	80093e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093c6:	4b9d      	ldr	r3, [pc, #628]	@ (800963c <UART_SetConfig+0x92c>)
 80093c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ca:	e009      	b.n	80093e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d2:	e005      	b.n	80093e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 81de 	beq.w	80097a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ec:	4a94      	ldr	r2, [pc, #592]	@ (8009640 <UART_SetConfig+0x930>)
 80093ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093f2:	461a      	mov	r2, r3
 80093f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80093fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	4413      	add	r3, r2
 8009406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009408:	429a      	cmp	r2, r3
 800940a:	d305      	bcc.n	8009418 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009414:	429a      	cmp	r2, r3
 8009416:	d903      	bls.n	8009420 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800941e:	e1c1      	b.n	80097a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009422:	2200      	movs	r2, #0
 8009424:	60bb      	str	r3, [r7, #8]
 8009426:	60fa      	str	r2, [r7, #12]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942c:	4a84      	ldr	r2, [pc, #528]	@ (8009640 <UART_SetConfig+0x930>)
 800942e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009432:	b29b      	uxth	r3, r3
 8009434:	2200      	movs	r2, #0
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009442:	f7f7 f961 	bl	8000708 <__aeabi_uldivmod>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4610      	mov	r0, r2
 800944c:	4619      	mov	r1, r3
 800944e:	f04f 0200 	mov.w	r2, #0
 8009452:	f04f 0300 	mov.w	r3, #0
 8009456:	020b      	lsls	r3, r1, #8
 8009458:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800945c:	0202      	lsls	r2, r0, #8
 800945e:	6979      	ldr	r1, [r7, #20]
 8009460:	6849      	ldr	r1, [r1, #4]
 8009462:	0849      	lsrs	r1, r1, #1
 8009464:	2000      	movs	r0, #0
 8009466:	460c      	mov	r4, r1
 8009468:	4605      	mov	r5, r0
 800946a:	eb12 0804 	adds.w	r8, r2, r4
 800946e:	eb43 0905 	adc.w	r9, r3, r5
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	469a      	mov	sl, r3
 800947a:	4693      	mov	fp, r2
 800947c:	4652      	mov	r2, sl
 800947e:	465b      	mov	r3, fp
 8009480:	4640      	mov	r0, r8
 8009482:	4649      	mov	r1, r9
 8009484:	f7f7 f940 	bl	8000708 <__aeabi_uldivmod>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4613      	mov	r3, r2
 800948e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009496:	d308      	bcc.n	80094aa <UART_SetConfig+0x79a>
 8009498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800949e:	d204      	bcs.n	80094aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094a6:	60da      	str	r2, [r3, #12]
 80094a8:	e17c      	b.n	80097a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094b0:	e178      	b.n	80097a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ba:	f040 80c5 	bne.w	8009648 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80094be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	dc48      	bgt.n	8009558 <UART_SetConfig+0x848>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	db7b      	blt.n	80095c2 <UART_SetConfig+0x8b2>
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d879      	bhi.n	80095c2 <UART_SetConfig+0x8b2>
 80094ce:	a201      	add	r2, pc, #4	@ (adr r2, 80094d4 <UART_SetConfig+0x7c4>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	0800955f 	.word	0x0800955f
 80094d8:	08009567 	.word	0x08009567
 80094dc:	080095c3 	.word	0x080095c3
 80094e0:	080095c3 	.word	0x080095c3
 80094e4:	0800956f 	.word	0x0800956f
 80094e8:	080095c3 	.word	0x080095c3
 80094ec:	080095c3 	.word	0x080095c3
 80094f0:	080095c3 	.word	0x080095c3
 80094f4:	0800957f 	.word	0x0800957f
 80094f8:	080095c3 	.word	0x080095c3
 80094fc:	080095c3 	.word	0x080095c3
 8009500:	080095c3 	.word	0x080095c3
 8009504:	080095c3 	.word	0x080095c3
 8009508:	080095c3 	.word	0x080095c3
 800950c:	080095c3 	.word	0x080095c3
 8009510:	080095c3 	.word	0x080095c3
 8009514:	0800958f 	.word	0x0800958f
 8009518:	080095c3 	.word	0x080095c3
 800951c:	080095c3 	.word	0x080095c3
 8009520:	080095c3 	.word	0x080095c3
 8009524:	080095c3 	.word	0x080095c3
 8009528:	080095c3 	.word	0x080095c3
 800952c:	080095c3 	.word	0x080095c3
 8009530:	080095c3 	.word	0x080095c3
 8009534:	080095c3 	.word	0x080095c3
 8009538:	080095c3 	.word	0x080095c3
 800953c:	080095c3 	.word	0x080095c3
 8009540:	080095c3 	.word	0x080095c3
 8009544:	080095c3 	.word	0x080095c3
 8009548:	080095c3 	.word	0x080095c3
 800954c:	080095c3 	.word	0x080095c3
 8009550:	080095c3 	.word	0x080095c3
 8009554:	080095b5 	.word	0x080095b5
 8009558:	2b40      	cmp	r3, #64	@ 0x40
 800955a:	d02e      	beq.n	80095ba <UART_SetConfig+0x8aa>
 800955c:	e031      	b.n	80095c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800955e:	f7fc fa3f 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 8009562:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009564:	e033      	b.n	80095ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009566:	f7fc fa51 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 800956a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800956c:	e02f      	b.n	80095ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800956e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009572:	4618      	mov	r0, r3
 8009574:	f7fd fc80 	bl	8006e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957c:	e027      	b.n	80095ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800957e:	f107 0318 	add.w	r3, r7, #24
 8009582:	4618      	mov	r0, r3
 8009584:	f7fd fdcc 	bl	8007120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e01f      	b.n	80095ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800958e:	4b2d      	ldr	r3, [pc, #180]	@ (8009644 <UART_SetConfig+0x934>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800959a:	4b2a      	ldr	r3, [pc, #168]	@ (8009644 <UART_SetConfig+0x934>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	08db      	lsrs	r3, r3, #3
 80095a0:	f003 0303 	and.w	r3, r3, #3
 80095a4:	4a24      	ldr	r2, [pc, #144]	@ (8009638 <UART_SetConfig+0x928>)
 80095a6:	fa22 f303 	lsr.w	r3, r2, r3
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095ac:	e00f      	b.n	80095ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80095ae:	4b22      	ldr	r3, [pc, #136]	@ (8009638 <UART_SetConfig+0x928>)
 80095b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b2:	e00c      	b.n	80095ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095b4:	4b21      	ldr	r3, [pc, #132]	@ (800963c <UART_SetConfig+0x92c>)
 80095b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b8:	e009      	b.n	80095ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c0:	e005      	b.n	80095ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80e7 	beq.w	80097a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095da:	4a19      	ldr	r2, [pc, #100]	@ (8009640 <UART_SetConfig+0x930>)
 80095dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e8:	005a      	lsls	r2, r3, #1
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	441a      	add	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fe:	2b0f      	cmp	r3, #15
 8009600:	d916      	bls.n	8009630 <UART_SetConfig+0x920>
 8009602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009608:	d212      	bcs.n	8009630 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	b29b      	uxth	r3, r3
 800960e:	f023 030f 	bic.w	r3, r3, #15
 8009612:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	b29b      	uxth	r3, r3
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	b29a      	uxth	r2, r3
 8009620:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009622:	4313      	orrs	r3, r2
 8009624:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800962c:	60da      	str	r2, [r3, #12]
 800962e:	e0b9      	b.n	80097a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009636:	e0b5      	b.n	80097a4 <UART_SetConfig+0xa94>
 8009638:	03d09000 	.word	0x03d09000
 800963c:	003d0900 	.word	0x003d0900
 8009640:	0800e458 	.word	0x0800e458
 8009644:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009648:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800964c:	2b20      	cmp	r3, #32
 800964e:	dc49      	bgt.n	80096e4 <UART_SetConfig+0x9d4>
 8009650:	2b00      	cmp	r3, #0
 8009652:	db7c      	blt.n	800974e <UART_SetConfig+0xa3e>
 8009654:	2b20      	cmp	r3, #32
 8009656:	d87a      	bhi.n	800974e <UART_SetConfig+0xa3e>
 8009658:	a201      	add	r2, pc, #4	@ (adr r2, 8009660 <UART_SetConfig+0x950>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	080096eb 	.word	0x080096eb
 8009664:	080096f3 	.word	0x080096f3
 8009668:	0800974f 	.word	0x0800974f
 800966c:	0800974f 	.word	0x0800974f
 8009670:	080096fb 	.word	0x080096fb
 8009674:	0800974f 	.word	0x0800974f
 8009678:	0800974f 	.word	0x0800974f
 800967c:	0800974f 	.word	0x0800974f
 8009680:	0800970b 	.word	0x0800970b
 8009684:	0800974f 	.word	0x0800974f
 8009688:	0800974f 	.word	0x0800974f
 800968c:	0800974f 	.word	0x0800974f
 8009690:	0800974f 	.word	0x0800974f
 8009694:	0800974f 	.word	0x0800974f
 8009698:	0800974f 	.word	0x0800974f
 800969c:	0800974f 	.word	0x0800974f
 80096a0:	0800971b 	.word	0x0800971b
 80096a4:	0800974f 	.word	0x0800974f
 80096a8:	0800974f 	.word	0x0800974f
 80096ac:	0800974f 	.word	0x0800974f
 80096b0:	0800974f 	.word	0x0800974f
 80096b4:	0800974f 	.word	0x0800974f
 80096b8:	0800974f 	.word	0x0800974f
 80096bc:	0800974f 	.word	0x0800974f
 80096c0:	0800974f 	.word	0x0800974f
 80096c4:	0800974f 	.word	0x0800974f
 80096c8:	0800974f 	.word	0x0800974f
 80096cc:	0800974f 	.word	0x0800974f
 80096d0:	0800974f 	.word	0x0800974f
 80096d4:	0800974f 	.word	0x0800974f
 80096d8:	0800974f 	.word	0x0800974f
 80096dc:	0800974f 	.word	0x0800974f
 80096e0:	08009741 	.word	0x08009741
 80096e4:	2b40      	cmp	r3, #64	@ 0x40
 80096e6:	d02e      	beq.n	8009746 <UART_SetConfig+0xa36>
 80096e8:	e031      	b.n	800974e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ea:	f7fc f979 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 80096ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096f0:	e033      	b.n	800975a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096f2:	f7fc f98b 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 80096f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096f8:	e02f      	b.n	800975a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fd fbba 	bl	8006e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009708:	e027      	b.n	800975a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800970a:	f107 0318 	add.w	r3, r7, #24
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd fd06 	bl	8007120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009718:	e01f      	b.n	800975a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800971a:	4b2d      	ldr	r3, [pc, #180]	@ (80097d0 <UART_SetConfig+0xac0>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009726:	4b2a      	ldr	r3, [pc, #168]	@ (80097d0 <UART_SetConfig+0xac0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	08db      	lsrs	r3, r3, #3
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	4a28      	ldr	r2, [pc, #160]	@ (80097d4 <UART_SetConfig+0xac4>)
 8009732:	fa22 f303 	lsr.w	r3, r2, r3
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009738:	e00f      	b.n	800975a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800973a:	4b26      	ldr	r3, [pc, #152]	@ (80097d4 <UART_SetConfig+0xac4>)
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973e:	e00c      	b.n	800975a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009740:	4b25      	ldr	r3, [pc, #148]	@ (80097d8 <UART_SetConfig+0xac8>)
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009744:	e009      	b.n	800975a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800974a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974c:	e005      	b.n	800975a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009758:	bf00      	nop
    }

    if (pclk != 0U)
 800975a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d021      	beq.n	80097a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009764:	4a1d      	ldr	r2, [pc, #116]	@ (80097dc <UART_SetConfig+0xacc>)
 8009766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800976a:	461a      	mov	r2, r3
 800976c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	441a      	add	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009782:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	2b0f      	cmp	r3, #15
 8009788:	d909      	bls.n	800979e <UART_SetConfig+0xa8e>
 800978a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009790:	d205      	bcs.n	800979e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009794:	b29a      	uxth	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e002      	b.n	80097a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2200      	movs	r2, #0
 80097b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3748      	adds	r7, #72	@ 0x48
 80097c8:	46bd      	mov	sp, r7
 80097ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ce:	bf00      	nop
 80097d0:	58024400 	.word	0x58024400
 80097d4:	03d09000 	.word	0x03d09000
 80097d8:	003d0900 	.word	0x003d0900
 80097dc:	0800e458 	.word	0x0800e458

080097e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009830:	f003 0302 	and.w	r3, r3, #2
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	f003 0310 	and.w	r3, r3, #16
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009896:	f003 0320 	and.w	r3, r3, #32
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01a      	beq.n	80098f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098de:	d10a      	bne.n	80098f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	605a      	str	r2, [r3, #4]
  }
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b098      	sub	sp, #96	@ 0x60
 8009928:	af02      	add	r7, sp, #8
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009934:	f7f8 f92a 	bl	8001b8c <HAL_GetTick>
 8009938:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b08      	cmp	r3, #8
 8009946:	d12f      	bne.n	80099a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009950:	2200      	movs	r2, #0
 8009952:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f88e 	bl	8009a78 <UART_WaitOnFlagUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d022      	beq.n	80099a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009976:	653b      	str	r3, [r7, #80]	@ 0x50
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009980:	647b      	str	r3, [r7, #68]	@ 0x44
 8009982:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800998e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e6      	bne.n	8009962 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e063      	b.n	8009a70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d149      	bne.n	8009a4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099be:	2200      	movs	r2, #0
 80099c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f857 	bl	8009a78 <UART_WaitOnFlagUntilTimeout>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d03c      	beq.n	8009a4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	623b      	str	r3, [r7, #32]
   return(result);
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80099f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e6      	bne.n	80099d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a22:	61fa      	str	r2, [r7, #28]
 8009a24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	69b9      	ldr	r1, [r7, #24]
 8009a28:	69fa      	ldr	r2, [r7, #28]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e5      	bne.n	8009a02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e012      	b.n	8009a70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2220      	movs	r2, #32
 8009a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3758      	adds	r7, #88	@ 0x58
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a88:	e04f      	b.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d04b      	beq.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a92:	f7f8 f87b 	bl	8001b8c <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d302      	bcc.n	8009aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e04e      	b.n	8009b4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0304 	and.w	r3, r3, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d037      	beq.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b80      	cmp	r3, #128	@ 0x80
 8009abe:	d034      	beq.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b40      	cmp	r3, #64	@ 0x40
 8009ac4:	d031      	beq.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	f003 0308 	and.w	r3, r3, #8
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d110      	bne.n	8009af6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2208      	movs	r2, #8
 8009ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 f839 	bl	8009b54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e029      	b.n	8009b4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b04:	d111      	bne.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f81f 	bl	8009b54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e00f      	b.n	8009b4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69da      	ldr	r2, [r3, #28]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4013      	ands	r3, r2
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	bf0c      	ite	eq
 8009b3a:	2301      	moveq	r3, #1
 8009b3c:	2300      	movne	r3, #0
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d0a0      	beq.n	8009a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b095      	sub	sp, #84	@ 0x54
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e6      	bne.n	8009b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8009c1c <UART_EndRxTransfer+0xc8>)
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3308      	adds	r3, #8
 8009bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e5      	bne.n	8009b8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d118      	bne.n	8009bfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f023 0310 	bic.w	r3, r3, #16
 8009bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009be8:	61bb      	str	r3, [r7, #24]
 8009bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6979      	ldr	r1, [r7, #20]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e6      	bne.n	8009bca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c10:	bf00      	nop
 8009c12:	3754      	adds	r7, #84	@ 0x54
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	effffffe 	.word	0xeffffffe

08009c20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff f854 	bl	8008ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6979      	ldr	r1, [r7, #20]
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	613b      	str	r3, [r7, #16]
   return(result);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e6      	bne.n	8009c4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff f81f 	bl	8008cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c92:	bf00      	nop
 8009c94:	3720      	adds	r7, #32
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <HAL_UARTEx_DisableFifoMode+0x16>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e027      	b.n	8009d3c <HAL_UARTEx_DisableFifoMode+0x66>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2224      	movs	r2, #36	@ 0x24
 8009cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d101      	bne.n	8009d60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e02d      	b.n	8009dbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2224      	movs	r2, #36	@ 0x24
 8009d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f022 0201 	bic.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f84f 	bl	8009e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e02d      	b.n	8009e38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2224      	movs	r2, #36	@ 0x24
 8009de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0201 	bic.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f811 	bl	8009e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d108      	bne.n	8009e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e60:	e031      	b.n	8009ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e62:	2310      	movs	r3, #16
 8009e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e66:	2310      	movs	r3, #16
 8009e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	0e5b      	lsrs	r3, r3, #25
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	f003 0307 	and.w	r3, r3, #7
 8009e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	0f5b      	lsrs	r3, r3, #29
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	7b3a      	ldrb	r2, [r7, #12]
 8009e8e:	4911      	ldr	r1, [pc, #68]	@ (8009ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8009e90:	5c8a      	ldrb	r2, [r1, r2]
 8009e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e96:	7b3a      	ldrb	r2, [r7, #12]
 8009e98:	490f      	ldr	r1, [pc, #60]	@ (8009ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8009e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	7b7a      	ldrb	r2, [r7, #13]
 8009eac:	4909      	ldr	r1, [pc, #36]	@ (8009ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8009eae:	5c8a      	ldrb	r2, [r1, r2]
 8009eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eb4:	7b7a      	ldrb	r2, [r7, #13]
 8009eb6:	4908      	ldr	r1, [pc, #32]	@ (8009ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8009eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ec6:	bf00      	nop
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	0800e470 	.word	0x0800e470
 8009ed8:	0800e478 	.word	0x0800e478

08009edc <__cvt>:
 8009edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ede:	ed2d 8b02 	vpush	{d8}
 8009ee2:	eeb0 8b40 	vmov.f64	d8, d0
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	4617      	mov	r7, r2
 8009eea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009eec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009eee:	ee18 2a90 	vmov	r2, s17
 8009ef2:	f025 0520 	bic.w	r5, r5, #32
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	bfb6      	itet	lt
 8009efa:	222d      	movlt	r2, #45	@ 0x2d
 8009efc:	2200      	movge	r2, #0
 8009efe:	eeb1 8b40 	vneglt.f64	d8, d0
 8009f02:	2d46      	cmp	r5, #70	@ 0x46
 8009f04:	460c      	mov	r4, r1
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	d004      	beq.n	8009f14 <__cvt+0x38>
 8009f0a:	2d45      	cmp	r5, #69	@ 0x45
 8009f0c:	d100      	bne.n	8009f10 <__cvt+0x34>
 8009f0e:	3401      	adds	r4, #1
 8009f10:	2102      	movs	r1, #2
 8009f12:	e000      	b.n	8009f16 <__cvt+0x3a>
 8009f14:	2103      	movs	r1, #3
 8009f16:	ab03      	add	r3, sp, #12
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	ab02      	add	r3, sp, #8
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	4622      	mov	r2, r4
 8009f20:	4633      	mov	r3, r6
 8009f22:	eeb0 0b48 	vmov.f64	d0, d8
 8009f26:	f001 f84b 	bl	800afc0 <_dtoa_r>
 8009f2a:	2d47      	cmp	r5, #71	@ 0x47
 8009f2c:	d114      	bne.n	8009f58 <__cvt+0x7c>
 8009f2e:	07fb      	lsls	r3, r7, #31
 8009f30:	d50a      	bpl.n	8009f48 <__cvt+0x6c>
 8009f32:	1902      	adds	r2, r0, r4
 8009f34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3c:	bf08      	it	eq
 8009f3e:	9203      	streq	r2, [sp, #12]
 8009f40:	2130      	movs	r1, #48	@ 0x30
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d319      	bcc.n	8009f7c <__cvt+0xa0>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f4c:	1a1b      	subs	r3, r3, r0
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	b005      	add	sp, #20
 8009f52:	ecbd 8b02 	vpop	{d8}
 8009f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f58:	2d46      	cmp	r5, #70	@ 0x46
 8009f5a:	eb00 0204 	add.w	r2, r0, r4
 8009f5e:	d1e9      	bne.n	8009f34 <__cvt+0x58>
 8009f60:	7803      	ldrb	r3, [r0, #0]
 8009f62:	2b30      	cmp	r3, #48	@ 0x30
 8009f64:	d107      	bne.n	8009f76 <__cvt+0x9a>
 8009f66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6e:	bf1c      	itt	ne
 8009f70:	f1c4 0401 	rsbne	r4, r4, #1
 8009f74:	6034      	strne	r4, [r6, #0]
 8009f76:	6833      	ldr	r3, [r6, #0]
 8009f78:	441a      	add	r2, r3
 8009f7a:	e7db      	b.n	8009f34 <__cvt+0x58>
 8009f7c:	1c5c      	adds	r4, r3, #1
 8009f7e:	9403      	str	r4, [sp, #12]
 8009f80:	7019      	strb	r1, [r3, #0]
 8009f82:	e7de      	b.n	8009f42 <__cvt+0x66>

08009f84 <__exponent>:
 8009f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f86:	2900      	cmp	r1, #0
 8009f88:	bfba      	itte	lt
 8009f8a:	4249      	neglt	r1, r1
 8009f8c:	232d      	movlt	r3, #45	@ 0x2d
 8009f8e:	232b      	movge	r3, #43	@ 0x2b
 8009f90:	2909      	cmp	r1, #9
 8009f92:	7002      	strb	r2, [r0, #0]
 8009f94:	7043      	strb	r3, [r0, #1]
 8009f96:	dd29      	ble.n	8009fec <__exponent+0x68>
 8009f98:	f10d 0307 	add.w	r3, sp, #7
 8009f9c:	461d      	mov	r5, r3
 8009f9e:	270a      	movs	r7, #10
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	fbb1 f6f7 	udiv	r6, r1, r7
 8009fa6:	fb07 1416 	mls	r4, r7, r6, r1
 8009faa:	3430      	adds	r4, #48	@ 0x30
 8009fac:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	2c63      	cmp	r4, #99	@ 0x63
 8009fb4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fb8:	4631      	mov	r1, r6
 8009fba:	dcf1      	bgt.n	8009fa0 <__exponent+0x1c>
 8009fbc:	3130      	adds	r1, #48	@ 0x30
 8009fbe:	1e94      	subs	r4, r2, #2
 8009fc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fc4:	1c41      	adds	r1, r0, #1
 8009fc6:	4623      	mov	r3, r4
 8009fc8:	42ab      	cmp	r3, r5
 8009fca:	d30a      	bcc.n	8009fe2 <__exponent+0x5e>
 8009fcc:	f10d 0309 	add.w	r3, sp, #9
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	42ac      	cmp	r4, r5
 8009fd4:	bf88      	it	hi
 8009fd6:	2300      	movhi	r3, #0
 8009fd8:	3302      	adds	r3, #2
 8009fda:	4403      	add	r3, r0
 8009fdc:	1a18      	subs	r0, r3, r0
 8009fde:	b003      	add	sp, #12
 8009fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fe6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fea:	e7ed      	b.n	8009fc8 <__exponent+0x44>
 8009fec:	2330      	movs	r3, #48	@ 0x30
 8009fee:	3130      	adds	r1, #48	@ 0x30
 8009ff0:	7083      	strb	r3, [r0, #2]
 8009ff2:	70c1      	strb	r1, [r0, #3]
 8009ff4:	1d03      	adds	r3, r0, #4
 8009ff6:	e7f1      	b.n	8009fdc <__exponent+0x58>

08009ff8 <_printf_float>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	b08d      	sub	sp, #52	@ 0x34
 8009ffe:	460c      	mov	r4, r1
 800a000:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a004:	4616      	mov	r6, r2
 800a006:	461f      	mov	r7, r3
 800a008:	4605      	mov	r5, r0
 800a00a:	f000 fed1 	bl	800adb0 <_localeconv_r>
 800a00e:	f8d0 b000 	ldr.w	fp, [r0]
 800a012:	4658      	mov	r0, fp
 800a014:	f7f6 f9b4 	bl	8000380 <strlen>
 800a018:	2300      	movs	r3, #0
 800a01a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a01c:	f8d8 3000 	ldr.w	r3, [r8]
 800a020:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a024:	6822      	ldr	r2, [r4, #0]
 800a026:	9005      	str	r0, [sp, #20]
 800a028:	3307      	adds	r3, #7
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	f103 0108 	add.w	r1, r3, #8
 800a032:	f8c8 1000 	str.w	r1, [r8]
 800a036:	ed93 0b00 	vldr	d0, [r3]
 800a03a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a298 <_printf_float+0x2a0>
 800a03e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a042:	eeb4 7b46 	vcmp.f64	d7, d6
 800a046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a04e:	dd24      	ble.n	800a09a <_printf_float+0xa2>
 800a050:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a058:	d502      	bpl.n	800a060 <_printf_float+0x68>
 800a05a:	232d      	movs	r3, #45	@ 0x2d
 800a05c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a060:	498f      	ldr	r1, [pc, #572]	@ (800a2a0 <_printf_float+0x2a8>)
 800a062:	4b90      	ldr	r3, [pc, #576]	@ (800a2a4 <_printf_float+0x2ac>)
 800a064:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a068:	bf8c      	ite	hi
 800a06a:	4688      	movhi	r8, r1
 800a06c:	4698      	movls	r8, r3
 800a06e:	f022 0204 	bic.w	r2, r2, #4
 800a072:	2303      	movs	r3, #3
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	6022      	str	r2, [r4, #0]
 800a078:	f04f 0a00 	mov.w	sl, #0
 800a07c:	9700      	str	r7, [sp, #0]
 800a07e:	4633      	mov	r3, r6
 800a080:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f000 f9d1 	bl	800a42c <_printf_common>
 800a08a:	3001      	adds	r0, #1
 800a08c:	f040 8089 	bne.w	800a1a2 <_printf_float+0x1aa>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	b00d      	add	sp, #52	@ 0x34
 800a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a2:	d709      	bvc.n	800a0b8 <_printf_float+0xc0>
 800a0a4:	ee10 3a90 	vmov	r3, s1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	bfbc      	itt	lt
 800a0ac:	232d      	movlt	r3, #45	@ 0x2d
 800a0ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0b2:	497d      	ldr	r1, [pc, #500]	@ (800a2a8 <_printf_float+0x2b0>)
 800a0b4:	4b7d      	ldr	r3, [pc, #500]	@ (800a2ac <_printf_float+0x2b4>)
 800a0b6:	e7d5      	b.n	800a064 <_printf_float+0x6c>
 800a0b8:	6863      	ldr	r3, [r4, #4]
 800a0ba:	1c59      	adds	r1, r3, #1
 800a0bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a0c0:	d139      	bne.n	800a136 <_printf_float+0x13e>
 800a0c2:	2306      	movs	r3, #6
 800a0c4:	6063      	str	r3, [r4, #4]
 800a0c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6022      	str	r2, [r4, #0]
 800a0ce:	9303      	str	r3, [sp, #12]
 800a0d0:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a0d6:	ab09      	add	r3, sp, #36	@ 0x24
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	6861      	ldr	r1, [r4, #4]
 800a0dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff fefb 	bl	8009edc <__cvt>
 800a0e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0ec:	4680      	mov	r8, r0
 800a0ee:	d129      	bne.n	800a144 <_printf_float+0x14c>
 800a0f0:	1cc8      	adds	r0, r1, #3
 800a0f2:	db02      	blt.n	800a0fa <_printf_float+0x102>
 800a0f4:	6863      	ldr	r3, [r4, #4]
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	dd41      	ble.n	800a17e <_printf_float+0x186>
 800a0fa:	f1a9 0902 	sub.w	r9, r9, #2
 800a0fe:	fa5f f989 	uxtb.w	r9, r9
 800a102:	3901      	subs	r1, #1
 800a104:	464a      	mov	r2, r9
 800a106:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a10a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a10c:	f7ff ff3a 	bl	8009f84 <__exponent>
 800a110:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a112:	1813      	adds	r3, r2, r0
 800a114:	2a01      	cmp	r2, #1
 800a116:	4682      	mov	sl, r0
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	dc02      	bgt.n	800a122 <_printf_float+0x12a>
 800a11c:	6822      	ldr	r2, [r4, #0]
 800a11e:	07d2      	lsls	r2, r2, #31
 800a120:	d501      	bpl.n	800a126 <_printf_float+0x12e>
 800a122:	3301      	adds	r3, #1
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0a6      	beq.n	800a07c <_printf_float+0x84>
 800a12e:	232d      	movs	r3, #45	@ 0x2d
 800a130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a134:	e7a2      	b.n	800a07c <_printf_float+0x84>
 800a136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a13a:	d1c4      	bne.n	800a0c6 <_printf_float+0xce>
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1c2      	bne.n	800a0c6 <_printf_float+0xce>
 800a140:	2301      	movs	r3, #1
 800a142:	e7bf      	b.n	800a0c4 <_printf_float+0xcc>
 800a144:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a148:	d9db      	bls.n	800a102 <_printf_float+0x10a>
 800a14a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a14e:	d118      	bne.n	800a182 <_printf_float+0x18a>
 800a150:	2900      	cmp	r1, #0
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	dd0b      	ble.n	800a16e <_printf_float+0x176>
 800a156:	6121      	str	r1, [r4, #16]
 800a158:	b913      	cbnz	r3, 800a160 <_printf_float+0x168>
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	07d0      	lsls	r0, r2, #31
 800a15e:	d502      	bpl.n	800a166 <_printf_float+0x16e>
 800a160:	3301      	adds	r3, #1
 800a162:	440b      	add	r3, r1
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a168:	f04f 0a00 	mov.w	sl, #0
 800a16c:	e7db      	b.n	800a126 <_printf_float+0x12e>
 800a16e:	b913      	cbnz	r3, 800a176 <_printf_float+0x17e>
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	07d2      	lsls	r2, r2, #31
 800a174:	d501      	bpl.n	800a17a <_printf_float+0x182>
 800a176:	3302      	adds	r3, #2
 800a178:	e7f4      	b.n	800a164 <_printf_float+0x16c>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e7f2      	b.n	800a164 <_printf_float+0x16c>
 800a17e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a184:	4299      	cmp	r1, r3
 800a186:	db05      	blt.n	800a194 <_printf_float+0x19c>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	6121      	str	r1, [r4, #16]
 800a18c:	07d8      	lsls	r0, r3, #31
 800a18e:	d5ea      	bpl.n	800a166 <_printf_float+0x16e>
 800a190:	1c4b      	adds	r3, r1, #1
 800a192:	e7e7      	b.n	800a164 <_printf_float+0x16c>
 800a194:	2900      	cmp	r1, #0
 800a196:	bfd4      	ite	le
 800a198:	f1c1 0202 	rsble	r2, r1, #2
 800a19c:	2201      	movgt	r2, #1
 800a19e:	4413      	add	r3, r2
 800a1a0:	e7e0      	b.n	800a164 <_printf_float+0x16c>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	055a      	lsls	r2, r3, #21
 800a1a6:	d407      	bmi.n	800a1b8 <_printf_float+0x1c0>
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	4642      	mov	r2, r8
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	47b8      	blx	r7
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d12a      	bne.n	800a20c <_printf_float+0x214>
 800a1b6:	e76b      	b.n	800a090 <_printf_float+0x98>
 800a1b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a1bc:	f240 80e0 	bls.w	800a380 <_printf_float+0x388>
 800a1c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a1c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1cc:	d133      	bne.n	800a236 <_printf_float+0x23e>
 800a1ce:	4a38      	ldr	r2, [pc, #224]	@ (800a2b0 <_printf_float+0x2b8>)
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f43f af59 	beq.w	800a090 <_printf_float+0x98>
 800a1de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1e2:	4543      	cmp	r3, r8
 800a1e4:	db02      	blt.n	800a1ec <_printf_float+0x1f4>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	07d8      	lsls	r0, r3, #31
 800a1ea:	d50f      	bpl.n	800a20c <_printf_float+0x214>
 800a1ec:	9b05      	ldr	r3, [sp, #20]
 800a1ee:	465a      	mov	r2, fp
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f af4a 	beq.w	800a090 <_printf_float+0x98>
 800a1fc:	f04f 0900 	mov.w	r9, #0
 800a200:	f108 38ff 	add.w	r8, r8, #4294967295
 800a204:	f104 0a1a 	add.w	sl, r4, #26
 800a208:	45c8      	cmp	r8, r9
 800a20a:	dc09      	bgt.n	800a220 <_printf_float+0x228>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	079b      	lsls	r3, r3, #30
 800a210:	f100 8107 	bmi.w	800a422 <_printf_float+0x42a>
 800a214:	68e0      	ldr	r0, [r4, #12]
 800a216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a218:	4298      	cmp	r0, r3
 800a21a:	bfb8      	it	lt
 800a21c:	4618      	movlt	r0, r3
 800a21e:	e739      	b.n	800a094 <_printf_float+0x9c>
 800a220:	2301      	movs	r3, #1
 800a222:	4652      	mov	r2, sl
 800a224:	4631      	mov	r1, r6
 800a226:	4628      	mov	r0, r5
 800a228:	47b8      	blx	r7
 800a22a:	3001      	adds	r0, #1
 800a22c:	f43f af30 	beq.w	800a090 <_printf_float+0x98>
 800a230:	f109 0901 	add.w	r9, r9, #1
 800a234:	e7e8      	b.n	800a208 <_printf_float+0x210>
 800a236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc3b      	bgt.n	800a2b4 <_printf_float+0x2bc>
 800a23c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b0 <_printf_float+0x2b8>)
 800a23e:	2301      	movs	r3, #1
 800a240:	4631      	mov	r1, r6
 800a242:	4628      	mov	r0, r5
 800a244:	47b8      	blx	r7
 800a246:	3001      	adds	r0, #1
 800a248:	f43f af22 	beq.w	800a090 <_printf_float+0x98>
 800a24c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a250:	ea59 0303 	orrs.w	r3, r9, r3
 800a254:	d102      	bne.n	800a25c <_printf_float+0x264>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	07d9      	lsls	r1, r3, #31
 800a25a:	d5d7      	bpl.n	800a20c <_printf_float+0x214>
 800a25c:	9b05      	ldr	r3, [sp, #20]
 800a25e:	465a      	mov	r2, fp
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af12 	beq.w	800a090 <_printf_float+0x98>
 800a26c:	f04f 0a00 	mov.w	sl, #0
 800a270:	f104 0b1a 	add.w	fp, r4, #26
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	425b      	negs	r3, r3
 800a278:	4553      	cmp	r3, sl
 800a27a:	dc01      	bgt.n	800a280 <_printf_float+0x288>
 800a27c:	464b      	mov	r3, r9
 800a27e:	e794      	b.n	800a1aa <_printf_float+0x1b2>
 800a280:	2301      	movs	r3, #1
 800a282:	465a      	mov	r2, fp
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	47b8      	blx	r7
 800a28a:	3001      	adds	r0, #1
 800a28c:	f43f af00 	beq.w	800a090 <_printf_float+0x98>
 800a290:	f10a 0a01 	add.w	sl, sl, #1
 800a294:	e7ee      	b.n	800a274 <_printf_float+0x27c>
 800a296:	bf00      	nop
 800a298:	ffffffff 	.word	0xffffffff
 800a29c:	7fefffff 	.word	0x7fefffff
 800a2a0:	0800e484 	.word	0x0800e484
 800a2a4:	0800e480 	.word	0x0800e480
 800a2a8:	0800e48c 	.word	0x0800e48c
 800a2ac:	0800e488 	.word	0x0800e488
 800a2b0:	0800e490 	.word	0x0800e490
 800a2b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2ba:	4553      	cmp	r3, sl
 800a2bc:	bfa8      	it	ge
 800a2be:	4653      	movge	r3, sl
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	4699      	mov	r9, r3
 800a2c4:	dc37      	bgt.n	800a336 <_printf_float+0x33e>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9307      	str	r3, [sp, #28]
 800a2ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ce:	f104 021a 	add.w	r2, r4, #26
 800a2d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2d4:	9907      	ldr	r1, [sp, #28]
 800a2d6:	9306      	str	r3, [sp, #24]
 800a2d8:	eba3 0309 	sub.w	r3, r3, r9
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	dc31      	bgt.n	800a344 <_printf_float+0x34c>
 800a2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e2:	459a      	cmp	sl, r3
 800a2e4:	dc3b      	bgt.n	800a35e <_printf_float+0x366>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	07da      	lsls	r2, r3, #31
 800a2ea:	d438      	bmi.n	800a35e <_printf_float+0x366>
 800a2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ee:	ebaa 0903 	sub.w	r9, sl, r3
 800a2f2:	9b06      	ldr	r3, [sp, #24]
 800a2f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2f8:	4599      	cmp	r9, r3
 800a2fa:	bfa8      	it	ge
 800a2fc:	4699      	movge	r9, r3
 800a2fe:	f1b9 0f00 	cmp.w	r9, #0
 800a302:	dc34      	bgt.n	800a36e <_printf_float+0x376>
 800a304:	f04f 0800 	mov.w	r8, #0
 800a308:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a30c:	f104 0b1a 	add.w	fp, r4, #26
 800a310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a312:	ebaa 0303 	sub.w	r3, sl, r3
 800a316:	eba3 0309 	sub.w	r3, r3, r9
 800a31a:	4543      	cmp	r3, r8
 800a31c:	f77f af76 	ble.w	800a20c <_printf_float+0x214>
 800a320:	2301      	movs	r3, #1
 800a322:	465a      	mov	r2, fp
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	f43f aeb0 	beq.w	800a090 <_printf_float+0x98>
 800a330:	f108 0801 	add.w	r8, r8, #1
 800a334:	e7ec      	b.n	800a310 <_printf_float+0x318>
 800a336:	4642      	mov	r2, r8
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	d1c1      	bne.n	800a2c6 <_printf_float+0x2ce>
 800a342:	e6a5      	b.n	800a090 <_printf_float+0x98>
 800a344:	2301      	movs	r3, #1
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	9206      	str	r2, [sp, #24]
 800a34c:	47b8      	blx	r7
 800a34e:	3001      	adds	r0, #1
 800a350:	f43f ae9e 	beq.w	800a090 <_printf_float+0x98>
 800a354:	9b07      	ldr	r3, [sp, #28]
 800a356:	9a06      	ldr	r2, [sp, #24]
 800a358:	3301      	adds	r3, #1
 800a35a:	9307      	str	r3, [sp, #28]
 800a35c:	e7b9      	b.n	800a2d2 <_printf_float+0x2da>
 800a35e:	9b05      	ldr	r3, [sp, #20]
 800a360:	465a      	mov	r2, fp
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	d1bf      	bne.n	800a2ec <_printf_float+0x2f4>
 800a36c:	e690      	b.n	800a090 <_printf_float+0x98>
 800a36e:	9a06      	ldr	r2, [sp, #24]
 800a370:	464b      	mov	r3, r9
 800a372:	4442      	add	r2, r8
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	47b8      	blx	r7
 800a37a:	3001      	adds	r0, #1
 800a37c:	d1c2      	bne.n	800a304 <_printf_float+0x30c>
 800a37e:	e687      	b.n	800a090 <_printf_float+0x98>
 800a380:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a384:	f1b9 0f01 	cmp.w	r9, #1
 800a388:	dc01      	bgt.n	800a38e <_printf_float+0x396>
 800a38a:	07db      	lsls	r3, r3, #31
 800a38c:	d536      	bpl.n	800a3fc <_printf_float+0x404>
 800a38e:	2301      	movs	r3, #1
 800a390:	4642      	mov	r2, r8
 800a392:	4631      	mov	r1, r6
 800a394:	4628      	mov	r0, r5
 800a396:	47b8      	blx	r7
 800a398:	3001      	adds	r0, #1
 800a39a:	f43f ae79 	beq.w	800a090 <_printf_float+0x98>
 800a39e:	9b05      	ldr	r3, [sp, #20]
 800a3a0:	465a      	mov	r2, fp
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b8      	blx	r7
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f43f ae71 	beq.w	800a090 <_printf_float+0x98>
 800a3ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a3b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3be:	d018      	beq.n	800a3f2 <_printf_float+0x3fa>
 800a3c0:	464b      	mov	r3, r9
 800a3c2:	f108 0201 	add.w	r2, r8, #1
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b8      	blx	r7
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	d10c      	bne.n	800a3ea <_printf_float+0x3f2>
 800a3d0:	e65e      	b.n	800a090 <_printf_float+0x98>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	465a      	mov	r2, fp
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f43f ae57 	beq.w	800a090 <_printf_float+0x98>
 800a3e2:	f108 0801 	add.w	r8, r8, #1
 800a3e6:	45c8      	cmp	r8, r9
 800a3e8:	dbf3      	blt.n	800a3d2 <_printf_float+0x3da>
 800a3ea:	4653      	mov	r3, sl
 800a3ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3f0:	e6dc      	b.n	800a1ac <_printf_float+0x1b4>
 800a3f2:	f04f 0800 	mov.w	r8, #0
 800a3f6:	f104 0b1a 	add.w	fp, r4, #26
 800a3fa:	e7f4      	b.n	800a3e6 <_printf_float+0x3ee>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4642      	mov	r2, r8
 800a400:	e7e1      	b.n	800a3c6 <_printf_float+0x3ce>
 800a402:	2301      	movs	r3, #1
 800a404:	464a      	mov	r2, r9
 800a406:	4631      	mov	r1, r6
 800a408:	4628      	mov	r0, r5
 800a40a:	47b8      	blx	r7
 800a40c:	3001      	adds	r0, #1
 800a40e:	f43f ae3f 	beq.w	800a090 <_printf_float+0x98>
 800a412:	f108 0801 	add.w	r8, r8, #1
 800a416:	68e3      	ldr	r3, [r4, #12]
 800a418:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a41a:	1a5b      	subs	r3, r3, r1
 800a41c:	4543      	cmp	r3, r8
 800a41e:	dcf0      	bgt.n	800a402 <_printf_float+0x40a>
 800a420:	e6f8      	b.n	800a214 <_printf_float+0x21c>
 800a422:	f04f 0800 	mov.w	r8, #0
 800a426:	f104 0919 	add.w	r9, r4, #25
 800a42a:	e7f4      	b.n	800a416 <_printf_float+0x41e>

0800a42c <_printf_common>:
 800a42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	4616      	mov	r6, r2
 800a432:	4698      	mov	r8, r3
 800a434:	688a      	ldr	r2, [r1, #8]
 800a436:	690b      	ldr	r3, [r1, #16]
 800a438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a43c:	4293      	cmp	r3, r2
 800a43e:	bfb8      	it	lt
 800a440:	4613      	movlt	r3, r2
 800a442:	6033      	str	r3, [r6, #0]
 800a444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a448:	4607      	mov	r7, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	b10a      	cbz	r2, 800a452 <_printf_common+0x26>
 800a44e:	3301      	adds	r3, #1
 800a450:	6033      	str	r3, [r6, #0]
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	0699      	lsls	r1, r3, #26
 800a456:	bf42      	ittt	mi
 800a458:	6833      	ldrmi	r3, [r6, #0]
 800a45a:	3302      	addmi	r3, #2
 800a45c:	6033      	strmi	r3, [r6, #0]
 800a45e:	6825      	ldr	r5, [r4, #0]
 800a460:	f015 0506 	ands.w	r5, r5, #6
 800a464:	d106      	bne.n	800a474 <_printf_common+0x48>
 800a466:	f104 0a19 	add.w	sl, r4, #25
 800a46a:	68e3      	ldr	r3, [r4, #12]
 800a46c:	6832      	ldr	r2, [r6, #0]
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	42ab      	cmp	r3, r5
 800a472:	dc26      	bgt.n	800a4c2 <_printf_common+0x96>
 800a474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a478:	6822      	ldr	r2, [r4, #0]
 800a47a:	3b00      	subs	r3, #0
 800a47c:	bf18      	it	ne
 800a47e:	2301      	movne	r3, #1
 800a480:	0692      	lsls	r2, r2, #26
 800a482:	d42b      	bmi.n	800a4dc <_printf_common+0xb0>
 800a484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a488:	4641      	mov	r1, r8
 800a48a:	4638      	mov	r0, r7
 800a48c:	47c8      	blx	r9
 800a48e:	3001      	adds	r0, #1
 800a490:	d01e      	beq.n	800a4d0 <_printf_common+0xa4>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	6922      	ldr	r2, [r4, #16]
 800a496:	f003 0306 	and.w	r3, r3, #6
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	bf02      	ittt	eq
 800a49e:	68e5      	ldreq	r5, [r4, #12]
 800a4a0:	6833      	ldreq	r3, [r6, #0]
 800a4a2:	1aed      	subeq	r5, r5, r3
 800a4a4:	68a3      	ldr	r3, [r4, #8]
 800a4a6:	bf0c      	ite	eq
 800a4a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4ac:	2500      	movne	r5, #0
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	bfc4      	itt	gt
 800a4b2:	1a9b      	subgt	r3, r3, r2
 800a4b4:	18ed      	addgt	r5, r5, r3
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	341a      	adds	r4, #26
 800a4ba:	42b5      	cmp	r5, r6
 800a4bc:	d11a      	bne.n	800a4f4 <_printf_common+0xc8>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e008      	b.n	800a4d4 <_printf_common+0xa8>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	4641      	mov	r1, r8
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	47c8      	blx	r9
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d103      	bne.n	800a4d8 <_printf_common+0xac>
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d8:	3501      	adds	r5, #1
 800a4da:	e7c6      	b.n	800a46a <_printf_common+0x3e>
 800a4dc:	18e1      	adds	r1, r4, r3
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	2030      	movs	r0, #48	@ 0x30
 800a4e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4e6:	4422      	add	r2, r4
 800a4e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	e7c7      	b.n	800a484 <_printf_common+0x58>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	4641      	mov	r1, r8
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	47c8      	blx	r9
 800a4fe:	3001      	adds	r0, #1
 800a500:	d0e6      	beq.n	800a4d0 <_printf_common+0xa4>
 800a502:	3601      	adds	r6, #1
 800a504:	e7d9      	b.n	800a4ba <_printf_common+0x8e>
	...

0800a508 <_printf_i>:
 800a508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	7e0f      	ldrb	r7, [r1, #24]
 800a50e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a510:	2f78      	cmp	r7, #120	@ 0x78
 800a512:	4691      	mov	r9, r2
 800a514:	4680      	mov	r8, r0
 800a516:	460c      	mov	r4, r1
 800a518:	469a      	mov	sl, r3
 800a51a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a51e:	d807      	bhi.n	800a530 <_printf_i+0x28>
 800a520:	2f62      	cmp	r7, #98	@ 0x62
 800a522:	d80a      	bhi.n	800a53a <_printf_i+0x32>
 800a524:	2f00      	cmp	r7, #0
 800a526:	f000 80d1 	beq.w	800a6cc <_printf_i+0x1c4>
 800a52a:	2f58      	cmp	r7, #88	@ 0x58
 800a52c:	f000 80b8 	beq.w	800a6a0 <_printf_i+0x198>
 800a530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a538:	e03a      	b.n	800a5b0 <_printf_i+0xa8>
 800a53a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a53e:	2b15      	cmp	r3, #21
 800a540:	d8f6      	bhi.n	800a530 <_printf_i+0x28>
 800a542:	a101      	add	r1, pc, #4	@ (adr r1, 800a548 <_printf_i+0x40>)
 800a544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a548:	0800a5a1 	.word	0x0800a5a1
 800a54c:	0800a5b5 	.word	0x0800a5b5
 800a550:	0800a531 	.word	0x0800a531
 800a554:	0800a531 	.word	0x0800a531
 800a558:	0800a531 	.word	0x0800a531
 800a55c:	0800a531 	.word	0x0800a531
 800a560:	0800a5b5 	.word	0x0800a5b5
 800a564:	0800a531 	.word	0x0800a531
 800a568:	0800a531 	.word	0x0800a531
 800a56c:	0800a531 	.word	0x0800a531
 800a570:	0800a531 	.word	0x0800a531
 800a574:	0800a6b3 	.word	0x0800a6b3
 800a578:	0800a5df 	.word	0x0800a5df
 800a57c:	0800a66d 	.word	0x0800a66d
 800a580:	0800a531 	.word	0x0800a531
 800a584:	0800a531 	.word	0x0800a531
 800a588:	0800a6d5 	.word	0x0800a6d5
 800a58c:	0800a531 	.word	0x0800a531
 800a590:	0800a5df 	.word	0x0800a5df
 800a594:	0800a531 	.word	0x0800a531
 800a598:	0800a531 	.word	0x0800a531
 800a59c:	0800a675 	.word	0x0800a675
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	1d1a      	adds	r2, r3, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6032      	str	r2, [r6, #0]
 800a5a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e09c      	b.n	800a6ee <_printf_i+0x1e6>
 800a5b4:	6833      	ldr	r3, [r6, #0]
 800a5b6:	6820      	ldr	r0, [r4, #0]
 800a5b8:	1d19      	adds	r1, r3, #4
 800a5ba:	6031      	str	r1, [r6, #0]
 800a5bc:	0606      	lsls	r6, r0, #24
 800a5be:	d501      	bpl.n	800a5c4 <_printf_i+0xbc>
 800a5c0:	681d      	ldr	r5, [r3, #0]
 800a5c2:	e003      	b.n	800a5cc <_printf_i+0xc4>
 800a5c4:	0645      	lsls	r5, r0, #25
 800a5c6:	d5fb      	bpl.n	800a5c0 <_printf_i+0xb8>
 800a5c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5cc:	2d00      	cmp	r5, #0
 800a5ce:	da03      	bge.n	800a5d8 <_printf_i+0xd0>
 800a5d0:	232d      	movs	r3, #45	@ 0x2d
 800a5d2:	426d      	negs	r5, r5
 800a5d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5d8:	4858      	ldr	r0, [pc, #352]	@ (800a73c <_printf_i+0x234>)
 800a5da:	230a      	movs	r3, #10
 800a5dc:	e011      	b.n	800a602 <_printf_i+0xfa>
 800a5de:	6821      	ldr	r1, [r4, #0]
 800a5e0:	6833      	ldr	r3, [r6, #0]
 800a5e2:	0608      	lsls	r0, r1, #24
 800a5e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5e8:	d402      	bmi.n	800a5f0 <_printf_i+0xe8>
 800a5ea:	0649      	lsls	r1, r1, #25
 800a5ec:	bf48      	it	mi
 800a5ee:	b2ad      	uxthmi	r5, r5
 800a5f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5f2:	4852      	ldr	r0, [pc, #328]	@ (800a73c <_printf_i+0x234>)
 800a5f4:	6033      	str	r3, [r6, #0]
 800a5f6:	bf14      	ite	ne
 800a5f8:	230a      	movne	r3, #10
 800a5fa:	2308      	moveq	r3, #8
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a602:	6866      	ldr	r6, [r4, #4]
 800a604:	60a6      	str	r6, [r4, #8]
 800a606:	2e00      	cmp	r6, #0
 800a608:	db05      	blt.n	800a616 <_printf_i+0x10e>
 800a60a:	6821      	ldr	r1, [r4, #0]
 800a60c:	432e      	orrs	r6, r5
 800a60e:	f021 0104 	bic.w	r1, r1, #4
 800a612:	6021      	str	r1, [r4, #0]
 800a614:	d04b      	beq.n	800a6ae <_printf_i+0x1a6>
 800a616:	4616      	mov	r6, r2
 800a618:	fbb5 f1f3 	udiv	r1, r5, r3
 800a61c:	fb03 5711 	mls	r7, r3, r1, r5
 800a620:	5dc7      	ldrb	r7, [r0, r7]
 800a622:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a626:	462f      	mov	r7, r5
 800a628:	42bb      	cmp	r3, r7
 800a62a:	460d      	mov	r5, r1
 800a62c:	d9f4      	bls.n	800a618 <_printf_i+0x110>
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d10b      	bne.n	800a64a <_printf_i+0x142>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	07df      	lsls	r7, r3, #31
 800a636:	d508      	bpl.n	800a64a <_printf_i+0x142>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	6861      	ldr	r1, [r4, #4]
 800a63c:	4299      	cmp	r1, r3
 800a63e:	bfde      	ittt	le
 800a640:	2330      	movle	r3, #48	@ 0x30
 800a642:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a646:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a64a:	1b92      	subs	r2, r2, r6
 800a64c:	6122      	str	r2, [r4, #16]
 800a64e:	f8cd a000 	str.w	sl, [sp]
 800a652:	464b      	mov	r3, r9
 800a654:	aa03      	add	r2, sp, #12
 800a656:	4621      	mov	r1, r4
 800a658:	4640      	mov	r0, r8
 800a65a:	f7ff fee7 	bl	800a42c <_printf_common>
 800a65e:	3001      	adds	r0, #1
 800a660:	d14a      	bne.n	800a6f8 <_printf_i+0x1f0>
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	b004      	add	sp, #16
 800a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	f043 0320 	orr.w	r3, r3, #32
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	4832      	ldr	r0, [pc, #200]	@ (800a740 <_printf_i+0x238>)
 800a676:	2778      	movs	r7, #120	@ 0x78
 800a678:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	6831      	ldr	r1, [r6, #0]
 800a680:	061f      	lsls	r7, r3, #24
 800a682:	f851 5b04 	ldr.w	r5, [r1], #4
 800a686:	d402      	bmi.n	800a68e <_printf_i+0x186>
 800a688:	065f      	lsls	r7, r3, #25
 800a68a:	bf48      	it	mi
 800a68c:	b2ad      	uxthmi	r5, r5
 800a68e:	6031      	str	r1, [r6, #0]
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	bf44      	itt	mi
 800a694:	f043 0320 	orrmi.w	r3, r3, #32
 800a698:	6023      	strmi	r3, [r4, #0]
 800a69a:	b11d      	cbz	r5, 800a6a4 <_printf_i+0x19c>
 800a69c:	2310      	movs	r3, #16
 800a69e:	e7ad      	b.n	800a5fc <_printf_i+0xf4>
 800a6a0:	4826      	ldr	r0, [pc, #152]	@ (800a73c <_printf_i+0x234>)
 800a6a2:	e7e9      	b.n	800a678 <_printf_i+0x170>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	f023 0320 	bic.w	r3, r3, #32
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	e7f6      	b.n	800a69c <_printf_i+0x194>
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	e7bd      	b.n	800a62e <_printf_i+0x126>
 800a6b2:	6833      	ldr	r3, [r6, #0]
 800a6b4:	6825      	ldr	r5, [r4, #0]
 800a6b6:	6961      	ldr	r1, [r4, #20]
 800a6b8:	1d18      	adds	r0, r3, #4
 800a6ba:	6030      	str	r0, [r6, #0]
 800a6bc:	062e      	lsls	r6, r5, #24
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	d501      	bpl.n	800a6c6 <_printf_i+0x1be>
 800a6c2:	6019      	str	r1, [r3, #0]
 800a6c4:	e002      	b.n	800a6cc <_printf_i+0x1c4>
 800a6c6:	0668      	lsls	r0, r5, #25
 800a6c8:	d5fb      	bpl.n	800a6c2 <_printf_i+0x1ba>
 800a6ca:	8019      	strh	r1, [r3, #0]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	e7bc      	b.n	800a64e <_printf_i+0x146>
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	1d1a      	adds	r2, r3, #4
 800a6d8:	6032      	str	r2, [r6, #0]
 800a6da:	681e      	ldr	r6, [r3, #0]
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f7f5 fdfd 	bl	80002e0 <memchr>
 800a6e6:	b108      	cbz	r0, 800a6ec <_printf_i+0x1e4>
 800a6e8:	1b80      	subs	r0, r0, r6
 800a6ea:	6060      	str	r0, [r4, #4]
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	6123      	str	r3, [r4, #16]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6f6:	e7aa      	b.n	800a64e <_printf_i+0x146>
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	4640      	mov	r0, r8
 800a700:	47d0      	blx	sl
 800a702:	3001      	adds	r0, #1
 800a704:	d0ad      	beq.n	800a662 <_printf_i+0x15a>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	079b      	lsls	r3, r3, #30
 800a70a:	d413      	bmi.n	800a734 <_printf_i+0x22c>
 800a70c:	68e0      	ldr	r0, [r4, #12]
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	4298      	cmp	r0, r3
 800a712:	bfb8      	it	lt
 800a714:	4618      	movlt	r0, r3
 800a716:	e7a6      	b.n	800a666 <_printf_i+0x15e>
 800a718:	2301      	movs	r3, #1
 800a71a:	4632      	mov	r2, r6
 800a71c:	4649      	mov	r1, r9
 800a71e:	4640      	mov	r0, r8
 800a720:	47d0      	blx	sl
 800a722:	3001      	adds	r0, #1
 800a724:	d09d      	beq.n	800a662 <_printf_i+0x15a>
 800a726:	3501      	adds	r5, #1
 800a728:	68e3      	ldr	r3, [r4, #12]
 800a72a:	9903      	ldr	r1, [sp, #12]
 800a72c:	1a5b      	subs	r3, r3, r1
 800a72e:	42ab      	cmp	r3, r5
 800a730:	dcf2      	bgt.n	800a718 <_printf_i+0x210>
 800a732:	e7eb      	b.n	800a70c <_printf_i+0x204>
 800a734:	2500      	movs	r5, #0
 800a736:	f104 0619 	add.w	r6, r4, #25
 800a73a:	e7f5      	b.n	800a728 <_printf_i+0x220>
 800a73c:	0800e492 	.word	0x0800e492
 800a740:	0800e4a3 	.word	0x0800e4a3

0800a744 <_scanf_float>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	b087      	sub	sp, #28
 800a74a:	4691      	mov	r9, r2
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	688b      	ldr	r3, [r1, #8]
 800a750:	1e5a      	subs	r2, r3, #1
 800a752:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a756:	bf81      	itttt	hi
 800a758:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a75c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a760:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a764:	608b      	strhi	r3, [r1, #8]
 800a766:	680b      	ldr	r3, [r1, #0]
 800a768:	460a      	mov	r2, r1
 800a76a:	f04f 0500 	mov.w	r5, #0
 800a76e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a772:	f842 3b1c 	str.w	r3, [r2], #28
 800a776:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a77a:	4680      	mov	r8, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	bf98      	it	ls
 800a780:	f04f 0b00 	movls.w	fp, #0
 800a784:	9201      	str	r2, [sp, #4]
 800a786:	4616      	mov	r6, r2
 800a788:	46aa      	mov	sl, r5
 800a78a:	462f      	mov	r7, r5
 800a78c:	9502      	str	r5, [sp, #8]
 800a78e:	68a2      	ldr	r2, [r4, #8]
 800a790:	b15a      	cbz	r2, 800a7aa <_scanf_float+0x66>
 800a792:	f8d9 3000 	ldr.w	r3, [r9]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b4e      	cmp	r3, #78	@ 0x4e
 800a79a:	d863      	bhi.n	800a864 <_scanf_float+0x120>
 800a79c:	2b40      	cmp	r3, #64	@ 0x40
 800a79e:	d83b      	bhi.n	800a818 <_scanf_float+0xd4>
 800a7a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a7a4:	b2c8      	uxtb	r0, r1
 800a7a6:	280e      	cmp	r0, #14
 800a7a8:	d939      	bls.n	800a81e <_scanf_float+0xda>
 800a7aa:	b11f      	cbz	r7, 800a7b4 <_scanf_float+0x70>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7b8:	f1ba 0f01 	cmp.w	sl, #1
 800a7bc:	f200 8114 	bhi.w	800a9e8 <_scanf_float+0x2a4>
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	429e      	cmp	r6, r3
 800a7c4:	f200 8105 	bhi.w	800a9d2 <_scanf_float+0x28e>
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	b007      	add	sp, #28
 800a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a7d4:	2a0d      	cmp	r2, #13
 800a7d6:	d8e8      	bhi.n	800a7aa <_scanf_float+0x66>
 800a7d8:	a101      	add	r1, pc, #4	@ (adr r1, 800a7e0 <_scanf_float+0x9c>)
 800a7da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a929 	.word	0x0800a929
 800a7e4:	0800a7ab 	.word	0x0800a7ab
 800a7e8:	0800a7ab 	.word	0x0800a7ab
 800a7ec:	0800a7ab 	.word	0x0800a7ab
 800a7f0:	0800a985 	.word	0x0800a985
 800a7f4:	0800a95f 	.word	0x0800a95f
 800a7f8:	0800a7ab 	.word	0x0800a7ab
 800a7fc:	0800a7ab 	.word	0x0800a7ab
 800a800:	0800a937 	.word	0x0800a937
 800a804:	0800a7ab 	.word	0x0800a7ab
 800a808:	0800a7ab 	.word	0x0800a7ab
 800a80c:	0800a7ab 	.word	0x0800a7ab
 800a810:	0800a7ab 	.word	0x0800a7ab
 800a814:	0800a8f3 	.word	0x0800a8f3
 800a818:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a81c:	e7da      	b.n	800a7d4 <_scanf_float+0x90>
 800a81e:	290e      	cmp	r1, #14
 800a820:	d8c3      	bhi.n	800a7aa <_scanf_float+0x66>
 800a822:	a001      	add	r0, pc, #4	@ (adr r0, 800a828 <_scanf_float+0xe4>)
 800a824:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a828:	0800a8e3 	.word	0x0800a8e3
 800a82c:	0800a7ab 	.word	0x0800a7ab
 800a830:	0800a8e3 	.word	0x0800a8e3
 800a834:	0800a973 	.word	0x0800a973
 800a838:	0800a7ab 	.word	0x0800a7ab
 800a83c:	0800a885 	.word	0x0800a885
 800a840:	0800a8c9 	.word	0x0800a8c9
 800a844:	0800a8c9 	.word	0x0800a8c9
 800a848:	0800a8c9 	.word	0x0800a8c9
 800a84c:	0800a8c9 	.word	0x0800a8c9
 800a850:	0800a8c9 	.word	0x0800a8c9
 800a854:	0800a8c9 	.word	0x0800a8c9
 800a858:	0800a8c9 	.word	0x0800a8c9
 800a85c:	0800a8c9 	.word	0x0800a8c9
 800a860:	0800a8c9 	.word	0x0800a8c9
 800a864:	2b6e      	cmp	r3, #110	@ 0x6e
 800a866:	d809      	bhi.n	800a87c <_scanf_float+0x138>
 800a868:	2b60      	cmp	r3, #96	@ 0x60
 800a86a:	d8b1      	bhi.n	800a7d0 <_scanf_float+0x8c>
 800a86c:	2b54      	cmp	r3, #84	@ 0x54
 800a86e:	d07b      	beq.n	800a968 <_scanf_float+0x224>
 800a870:	2b59      	cmp	r3, #89	@ 0x59
 800a872:	d19a      	bne.n	800a7aa <_scanf_float+0x66>
 800a874:	2d07      	cmp	r5, #7
 800a876:	d198      	bne.n	800a7aa <_scanf_float+0x66>
 800a878:	2508      	movs	r5, #8
 800a87a:	e02f      	b.n	800a8dc <_scanf_float+0x198>
 800a87c:	2b74      	cmp	r3, #116	@ 0x74
 800a87e:	d073      	beq.n	800a968 <_scanf_float+0x224>
 800a880:	2b79      	cmp	r3, #121	@ 0x79
 800a882:	e7f6      	b.n	800a872 <_scanf_float+0x12e>
 800a884:	6821      	ldr	r1, [r4, #0]
 800a886:	05c8      	lsls	r0, r1, #23
 800a888:	d51e      	bpl.n	800a8c8 <_scanf_float+0x184>
 800a88a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a88e:	6021      	str	r1, [r4, #0]
 800a890:	3701      	adds	r7, #1
 800a892:	f1bb 0f00 	cmp.w	fp, #0
 800a896:	d003      	beq.n	800a8a0 <_scanf_float+0x15c>
 800a898:	3201      	adds	r2, #1
 800a89a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a89e:	60a2      	str	r2, [r4, #8]
 800a8a0:	68a3      	ldr	r3, [r4, #8]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	60a3      	str	r3, [r4, #8]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	6123      	str	r3, [r4, #16]
 800a8ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f8c9 3004 	str.w	r3, [r9, #4]
 800a8b8:	f340 8082 	ble.w	800a9c0 <_scanf_float+0x27c>
 800a8bc:	f8d9 3000 	ldr.w	r3, [r9]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	f8c9 3000 	str.w	r3, [r9]
 800a8c6:	e762      	b.n	800a78e <_scanf_float+0x4a>
 800a8c8:	eb1a 0105 	adds.w	r1, sl, r5
 800a8cc:	f47f af6d 	bne.w	800a7aa <_scanf_float+0x66>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	460d      	mov	r5, r1
 800a8da:	468a      	mov	sl, r1
 800a8dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a8e0:	e7de      	b.n	800a8a0 <_scanf_float+0x15c>
 800a8e2:	6822      	ldr	r2, [r4, #0]
 800a8e4:	0610      	lsls	r0, r2, #24
 800a8e6:	f57f af60 	bpl.w	800a7aa <_scanf_float+0x66>
 800a8ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8ee:	6022      	str	r2, [r4, #0]
 800a8f0:	e7f4      	b.n	800a8dc <_scanf_float+0x198>
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	d10c      	bne.n	800a912 <_scanf_float+0x1ce>
 800a8f8:	b977      	cbnz	r7, 800a918 <_scanf_float+0x1d4>
 800a8fa:	6822      	ldr	r2, [r4, #0]
 800a8fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a900:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a904:	d108      	bne.n	800a918 <_scanf_float+0x1d4>
 800a906:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a90a:	6022      	str	r2, [r4, #0]
 800a90c:	f04f 0a01 	mov.w	sl, #1
 800a910:	e7e4      	b.n	800a8dc <_scanf_float+0x198>
 800a912:	f1ba 0f02 	cmp.w	sl, #2
 800a916:	d050      	beq.n	800a9ba <_scanf_float+0x276>
 800a918:	2d01      	cmp	r5, #1
 800a91a:	d002      	beq.n	800a922 <_scanf_float+0x1de>
 800a91c:	2d04      	cmp	r5, #4
 800a91e:	f47f af44 	bne.w	800a7aa <_scanf_float+0x66>
 800a922:	3501      	adds	r5, #1
 800a924:	b2ed      	uxtb	r5, r5
 800a926:	e7d9      	b.n	800a8dc <_scanf_float+0x198>
 800a928:	f1ba 0f01 	cmp.w	sl, #1
 800a92c:	f47f af3d 	bne.w	800a7aa <_scanf_float+0x66>
 800a930:	f04f 0a02 	mov.w	sl, #2
 800a934:	e7d2      	b.n	800a8dc <_scanf_float+0x198>
 800a936:	b975      	cbnz	r5, 800a956 <_scanf_float+0x212>
 800a938:	2f00      	cmp	r7, #0
 800a93a:	f47f af37 	bne.w	800a7ac <_scanf_float+0x68>
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a944:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a948:	f040 80fc 	bne.w	800ab44 <_scanf_float+0x400>
 800a94c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a950:	6022      	str	r2, [r4, #0]
 800a952:	2501      	movs	r5, #1
 800a954:	e7c2      	b.n	800a8dc <_scanf_float+0x198>
 800a956:	2d03      	cmp	r5, #3
 800a958:	d0e3      	beq.n	800a922 <_scanf_float+0x1de>
 800a95a:	2d05      	cmp	r5, #5
 800a95c:	e7df      	b.n	800a91e <_scanf_float+0x1da>
 800a95e:	2d02      	cmp	r5, #2
 800a960:	f47f af23 	bne.w	800a7aa <_scanf_float+0x66>
 800a964:	2503      	movs	r5, #3
 800a966:	e7b9      	b.n	800a8dc <_scanf_float+0x198>
 800a968:	2d06      	cmp	r5, #6
 800a96a:	f47f af1e 	bne.w	800a7aa <_scanf_float+0x66>
 800a96e:	2507      	movs	r5, #7
 800a970:	e7b4      	b.n	800a8dc <_scanf_float+0x198>
 800a972:	6822      	ldr	r2, [r4, #0]
 800a974:	0591      	lsls	r1, r2, #22
 800a976:	f57f af18 	bpl.w	800a7aa <_scanf_float+0x66>
 800a97a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a97e:	6022      	str	r2, [r4, #0]
 800a980:	9702      	str	r7, [sp, #8]
 800a982:	e7ab      	b.n	800a8dc <_scanf_float+0x198>
 800a984:	6822      	ldr	r2, [r4, #0]
 800a986:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a98a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a98e:	d005      	beq.n	800a99c <_scanf_float+0x258>
 800a990:	0550      	lsls	r0, r2, #21
 800a992:	f57f af0a 	bpl.w	800a7aa <_scanf_float+0x66>
 800a996:	2f00      	cmp	r7, #0
 800a998:	f000 80d4 	beq.w	800ab44 <_scanf_float+0x400>
 800a99c:	0591      	lsls	r1, r2, #22
 800a99e:	bf58      	it	pl
 800a9a0:	9902      	ldrpl	r1, [sp, #8]
 800a9a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9a6:	bf58      	it	pl
 800a9a8:	1a79      	subpl	r1, r7, r1
 800a9aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a9ae:	bf58      	it	pl
 800a9b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a9b4:	6022      	str	r2, [r4, #0]
 800a9b6:	2700      	movs	r7, #0
 800a9b8:	e790      	b.n	800a8dc <_scanf_float+0x198>
 800a9ba:	f04f 0a03 	mov.w	sl, #3
 800a9be:	e78d      	b.n	800a8dc <_scanf_float+0x198>
 800a9c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	4798      	blx	r3
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f43f aedf 	beq.w	800a78e <_scanf_float+0x4a>
 800a9d0:	e6eb      	b.n	800a7aa <_scanf_float+0x66>
 800a9d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9da:	464a      	mov	r2, r9
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4798      	blx	r3
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	e6eb      	b.n	800a7c0 <_scanf_float+0x7c>
 800a9e8:	1e6b      	subs	r3, r5, #1
 800a9ea:	2b06      	cmp	r3, #6
 800a9ec:	d824      	bhi.n	800aa38 <_scanf_float+0x2f4>
 800a9ee:	2d02      	cmp	r5, #2
 800a9f0:	d836      	bhi.n	800aa60 <_scanf_float+0x31c>
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	429e      	cmp	r6, r3
 800a9f6:	f67f aee7 	bls.w	800a7c8 <_scanf_float+0x84>
 800a9fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa02:	464a      	mov	r2, r9
 800aa04:	4640      	mov	r0, r8
 800aa06:	4798      	blx	r3
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	e7f0      	b.n	800a9f2 <_scanf_float+0x2ae>
 800aa10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aa18:	464a      	mov	r2, r9
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	4798      	blx	r3
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa28:	fa5f fa8a 	uxtb.w	sl, sl
 800aa2c:	f1ba 0f02 	cmp.w	sl, #2
 800aa30:	d1ee      	bne.n	800aa10 <_scanf_float+0x2cc>
 800aa32:	3d03      	subs	r5, #3
 800aa34:	b2ed      	uxtb	r5, r5
 800aa36:	1b76      	subs	r6, r6, r5
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	05da      	lsls	r2, r3, #23
 800aa3c:	d530      	bpl.n	800aaa0 <_scanf_float+0x35c>
 800aa3e:	055b      	lsls	r3, r3, #21
 800aa40:	d511      	bpl.n	800aa66 <_scanf_float+0x322>
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	429e      	cmp	r6, r3
 800aa46:	f67f aebf 	bls.w	800a7c8 <_scanf_float+0x84>
 800aa4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa52:	464a      	mov	r2, r9
 800aa54:	4640      	mov	r0, r8
 800aa56:	4798      	blx	r3
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	e7f0      	b.n	800aa42 <_scanf_float+0x2fe>
 800aa60:	46aa      	mov	sl, r5
 800aa62:	46b3      	mov	fp, r6
 800aa64:	e7de      	b.n	800aa24 <_scanf_float+0x2e0>
 800aa66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	2965      	cmp	r1, #101	@ 0x65
 800aa6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa72:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa76:	6123      	str	r3, [r4, #16]
 800aa78:	d00c      	beq.n	800aa94 <_scanf_float+0x350>
 800aa7a:	2945      	cmp	r1, #69	@ 0x45
 800aa7c:	d00a      	beq.n	800aa94 <_scanf_float+0x350>
 800aa7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa82:	464a      	mov	r2, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	4798      	blx	r3
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	1eb5      	subs	r5, r6, #2
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa98:	464a      	mov	r2, r9
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	4798      	blx	r3
 800aa9e:	462e      	mov	r6, r5
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	f012 0210 	ands.w	r2, r2, #16
 800aaa6:	d001      	beq.n	800aaac <_scanf_float+0x368>
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e68e      	b.n	800a7ca <_scanf_float+0x86>
 800aaac:	7032      	strb	r2, [r6, #0]
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aab8:	d123      	bne.n	800ab02 <_scanf_float+0x3be>
 800aaba:	9b02      	ldr	r3, [sp, #8]
 800aabc:	429f      	cmp	r7, r3
 800aabe:	d00a      	beq.n	800aad6 <_scanf_float+0x392>
 800aac0:	1bda      	subs	r2, r3, r7
 800aac2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aac6:	429e      	cmp	r6, r3
 800aac8:	bf28      	it	cs
 800aaca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aace:	491e      	ldr	r1, [pc, #120]	@ (800ab48 <_scanf_float+0x404>)
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 f8ff 	bl	800acd4 <siprintf>
 800aad6:	9901      	ldr	r1, [sp, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	4640      	mov	r0, r8
 800aadc:	f002 fb2a 	bl	800d134 <_strtod_r>
 800aae0:	9b03      	ldr	r3, [sp, #12]
 800aae2:	6821      	ldr	r1, [r4, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f011 0f02 	tst.w	r1, #2
 800aaea:	f103 0204 	add.w	r2, r3, #4
 800aaee:	d015      	beq.n	800ab1c <_scanf_float+0x3d8>
 800aaf0:	9903      	ldr	r1, [sp, #12]
 800aaf2:	600a      	str	r2, [r1, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	ed83 0b00 	vstr	d0, [r3]
 800aafa:	68e3      	ldr	r3, [r4, #12]
 800aafc:	3301      	adds	r3, #1
 800aafe:	60e3      	str	r3, [r4, #12]
 800ab00:	e7d2      	b.n	800aaa8 <_scanf_float+0x364>
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0e6      	beq.n	800aad6 <_scanf_float+0x392>
 800ab08:	9905      	ldr	r1, [sp, #20]
 800ab0a:	230a      	movs	r3, #10
 800ab0c:	3101      	adds	r1, #1
 800ab0e:	4640      	mov	r0, r8
 800ab10:	f002 fb90 	bl	800d234 <_strtol_r>
 800ab14:	9b04      	ldr	r3, [sp, #16]
 800ab16:	9e05      	ldr	r6, [sp, #20]
 800ab18:	1ac2      	subs	r2, r0, r3
 800ab1a:	e7d2      	b.n	800aac2 <_scanf_float+0x37e>
 800ab1c:	f011 0f04 	tst.w	r1, #4
 800ab20:	9903      	ldr	r1, [sp, #12]
 800ab22:	600a      	str	r2, [r1, #0]
 800ab24:	d1e6      	bne.n	800aaf4 <_scanf_float+0x3b0>
 800ab26:	eeb4 0b40 	vcmp.f64	d0, d0
 800ab2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2e:	681d      	ldr	r5, [r3, #0]
 800ab30:	d705      	bvc.n	800ab3e <_scanf_float+0x3fa>
 800ab32:	4806      	ldr	r0, [pc, #24]	@ (800ab4c <_scanf_float+0x408>)
 800ab34:	f000 f9b4 	bl	800aea0 <nanf>
 800ab38:	ed85 0a00 	vstr	s0, [r5]
 800ab3c:	e7dd      	b.n	800aafa <_scanf_float+0x3b6>
 800ab3e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ab42:	e7f9      	b.n	800ab38 <_scanf_float+0x3f4>
 800ab44:	2700      	movs	r7, #0
 800ab46:	e635      	b.n	800a7b4 <_scanf_float+0x70>
 800ab48:	0800e4b4 	.word	0x0800e4b4
 800ab4c:	0800e5f5 	.word	0x0800e5f5

0800ab50 <std>:
 800ab50:	2300      	movs	r3, #0
 800ab52:	b510      	push	{r4, lr}
 800ab54:	4604      	mov	r4, r0
 800ab56:	e9c0 3300 	strd	r3, r3, [r0]
 800ab5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab5e:	6083      	str	r3, [r0, #8]
 800ab60:	8181      	strh	r1, [r0, #12]
 800ab62:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab64:	81c2      	strh	r2, [r0, #14]
 800ab66:	6183      	str	r3, [r0, #24]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	305c      	adds	r0, #92	@ 0x5c
 800ab6e:	f000 f916 	bl	800ad9e <memset>
 800ab72:	4b0d      	ldr	r3, [pc, #52]	@ (800aba8 <std+0x58>)
 800ab74:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab76:	4b0d      	ldr	r3, [pc, #52]	@ (800abac <std+0x5c>)
 800ab78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab7a:	4b0d      	ldr	r3, [pc, #52]	@ (800abb0 <std+0x60>)
 800ab7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	@ (800abb4 <std+0x64>)
 800ab80:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab82:	4b0d      	ldr	r3, [pc, #52]	@ (800abb8 <std+0x68>)
 800ab84:	6224      	str	r4, [r4, #32]
 800ab86:	429c      	cmp	r4, r3
 800ab88:	d006      	beq.n	800ab98 <std+0x48>
 800ab8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab8e:	4294      	cmp	r4, r2
 800ab90:	d002      	beq.n	800ab98 <std+0x48>
 800ab92:	33d0      	adds	r3, #208	@ 0xd0
 800ab94:	429c      	cmp	r4, r3
 800ab96:	d105      	bne.n	800aba4 <std+0x54>
 800ab98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba0:	f000 b97a 	b.w	800ae98 <__retarget_lock_init_recursive>
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	bf00      	nop
 800aba8:	0800ad19 	.word	0x0800ad19
 800abac:	0800ad3b 	.word	0x0800ad3b
 800abb0:	0800ad73 	.word	0x0800ad73
 800abb4:	0800ad97 	.word	0x0800ad97
 800abb8:	2400058c 	.word	0x2400058c

0800abbc <stdio_exit_handler>:
 800abbc:	4a02      	ldr	r2, [pc, #8]	@ (800abc8 <stdio_exit_handler+0xc>)
 800abbe:	4903      	ldr	r1, [pc, #12]	@ (800abcc <stdio_exit_handler+0x10>)
 800abc0:	4803      	ldr	r0, [pc, #12]	@ (800abd0 <stdio_exit_handler+0x14>)
 800abc2:	f000 b869 	b.w	800ac98 <_fwalk_sglue>
 800abc6:	bf00      	nop
 800abc8:	24000010 	.word	0x24000010
 800abcc:	0800d5f1 	.word	0x0800d5f1
 800abd0:	24000020 	.word	0x24000020

0800abd4 <cleanup_stdio>:
 800abd4:	6841      	ldr	r1, [r0, #4]
 800abd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <cleanup_stdio+0x34>)
 800abd8:	4299      	cmp	r1, r3
 800abda:	b510      	push	{r4, lr}
 800abdc:	4604      	mov	r4, r0
 800abde:	d001      	beq.n	800abe4 <cleanup_stdio+0x10>
 800abe0:	f002 fd06 	bl	800d5f0 <_fflush_r>
 800abe4:	68a1      	ldr	r1, [r4, #8]
 800abe6:	4b09      	ldr	r3, [pc, #36]	@ (800ac0c <cleanup_stdio+0x38>)
 800abe8:	4299      	cmp	r1, r3
 800abea:	d002      	beq.n	800abf2 <cleanup_stdio+0x1e>
 800abec:	4620      	mov	r0, r4
 800abee:	f002 fcff 	bl	800d5f0 <_fflush_r>
 800abf2:	68e1      	ldr	r1, [r4, #12]
 800abf4:	4b06      	ldr	r3, [pc, #24]	@ (800ac10 <cleanup_stdio+0x3c>)
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d004      	beq.n	800ac04 <cleanup_stdio+0x30>
 800abfa:	4620      	mov	r0, r4
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac00:	f002 bcf6 	b.w	800d5f0 <_fflush_r>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	bf00      	nop
 800ac08:	2400058c 	.word	0x2400058c
 800ac0c:	240005f4 	.word	0x240005f4
 800ac10:	2400065c 	.word	0x2400065c

0800ac14 <global_stdio_init.part.0>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <global_stdio_init.part.0+0x30>)
 800ac18:	4c0b      	ldr	r4, [pc, #44]	@ (800ac48 <global_stdio_init.part.0+0x34>)
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac4c <global_stdio_init.part.0+0x38>)
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	2200      	movs	r2, #0
 800ac22:	2104      	movs	r1, #4
 800ac24:	f7ff ff94 	bl	800ab50 <std>
 800ac28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	2109      	movs	r1, #9
 800ac30:	f7ff ff8e 	bl	800ab50 <std>
 800ac34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac38:	2202      	movs	r2, #2
 800ac3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac3e:	2112      	movs	r1, #18
 800ac40:	f7ff bf86 	b.w	800ab50 <std>
 800ac44:	240006c4 	.word	0x240006c4
 800ac48:	2400058c 	.word	0x2400058c
 800ac4c:	0800abbd 	.word	0x0800abbd

0800ac50 <__sfp_lock_acquire>:
 800ac50:	4801      	ldr	r0, [pc, #4]	@ (800ac58 <__sfp_lock_acquire+0x8>)
 800ac52:	f000 b922 	b.w	800ae9a <__retarget_lock_acquire_recursive>
 800ac56:	bf00      	nop
 800ac58:	240006cd 	.word	0x240006cd

0800ac5c <__sfp_lock_release>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	@ (800ac64 <__sfp_lock_release+0x8>)
 800ac5e:	f000 b91d 	b.w	800ae9c <__retarget_lock_release_recursive>
 800ac62:	bf00      	nop
 800ac64:	240006cd 	.word	0x240006cd

0800ac68 <__sinit>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	f7ff fff0 	bl	800ac50 <__sfp_lock_acquire>
 800ac70:	6a23      	ldr	r3, [r4, #32]
 800ac72:	b11b      	cbz	r3, 800ac7c <__sinit+0x14>
 800ac74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac78:	f7ff bff0 	b.w	800ac5c <__sfp_lock_release>
 800ac7c:	4b04      	ldr	r3, [pc, #16]	@ (800ac90 <__sinit+0x28>)
 800ac7e:	6223      	str	r3, [r4, #32]
 800ac80:	4b04      	ldr	r3, [pc, #16]	@ (800ac94 <__sinit+0x2c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1f5      	bne.n	800ac74 <__sinit+0xc>
 800ac88:	f7ff ffc4 	bl	800ac14 <global_stdio_init.part.0>
 800ac8c:	e7f2      	b.n	800ac74 <__sinit+0xc>
 800ac8e:	bf00      	nop
 800ac90:	0800abd5 	.word	0x0800abd5
 800ac94:	240006c4 	.word	0x240006c4

0800ac98 <_fwalk_sglue>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	4688      	mov	r8, r1
 800aca0:	4614      	mov	r4, r2
 800aca2:	2600      	movs	r6, #0
 800aca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aca8:	f1b9 0901 	subs.w	r9, r9, #1
 800acac:	d505      	bpl.n	800acba <_fwalk_sglue+0x22>
 800acae:	6824      	ldr	r4, [r4, #0]
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	d1f7      	bne.n	800aca4 <_fwalk_sglue+0xc>
 800acb4:	4630      	mov	r0, r6
 800acb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acba:	89ab      	ldrh	r3, [r5, #12]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d907      	bls.n	800acd0 <_fwalk_sglue+0x38>
 800acc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acc4:	3301      	adds	r3, #1
 800acc6:	d003      	beq.n	800acd0 <_fwalk_sglue+0x38>
 800acc8:	4629      	mov	r1, r5
 800acca:	4638      	mov	r0, r7
 800accc:	47c0      	blx	r8
 800acce:	4306      	orrs	r6, r0
 800acd0:	3568      	adds	r5, #104	@ 0x68
 800acd2:	e7e9      	b.n	800aca8 <_fwalk_sglue+0x10>

0800acd4 <siprintf>:
 800acd4:	b40e      	push	{r1, r2, r3}
 800acd6:	b510      	push	{r4, lr}
 800acd8:	b09d      	sub	sp, #116	@ 0x74
 800acda:	ab1f      	add	r3, sp, #124	@ 0x7c
 800acdc:	9002      	str	r0, [sp, #8]
 800acde:	9006      	str	r0, [sp, #24]
 800ace0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ace4:	480a      	ldr	r0, [pc, #40]	@ (800ad10 <siprintf+0x3c>)
 800ace6:	9107      	str	r1, [sp, #28]
 800ace8:	9104      	str	r1, [sp, #16]
 800acea:	490a      	ldr	r1, [pc, #40]	@ (800ad14 <siprintf+0x40>)
 800acec:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf0:	9105      	str	r1, [sp, #20]
 800acf2:	2400      	movs	r4, #0
 800acf4:	a902      	add	r1, sp, #8
 800acf6:	6800      	ldr	r0, [r0, #0]
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800acfc:	f002 faf8 	bl	800d2f0 <_svfiprintf_r>
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	701c      	strb	r4, [r3, #0]
 800ad04:	b01d      	add	sp, #116	@ 0x74
 800ad06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0a:	b003      	add	sp, #12
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	2400001c 	.word	0x2400001c
 800ad14:	ffff0208 	.word	0xffff0208

0800ad18 <__sread>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad20:	f000 f86c 	bl	800adfc <_read_r>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	bfab      	itete	ge
 800ad28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad2c:	181b      	addge	r3, r3, r0
 800ad2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad32:	bfac      	ite	ge
 800ad34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad36:	81a3      	strhlt	r3, [r4, #12]
 800ad38:	bd10      	pop	{r4, pc}

0800ad3a <__swrite>:
 800ad3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3e:	461f      	mov	r7, r3
 800ad40:	898b      	ldrh	r3, [r1, #12]
 800ad42:	05db      	lsls	r3, r3, #23
 800ad44:	4605      	mov	r5, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	4616      	mov	r6, r2
 800ad4a:	d505      	bpl.n	800ad58 <__swrite+0x1e>
 800ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad50:	2302      	movs	r3, #2
 800ad52:	2200      	movs	r2, #0
 800ad54:	f000 f840 	bl	800add8 <_lseek_r>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad62:	81a3      	strh	r3, [r4, #12]
 800ad64:	4632      	mov	r2, r6
 800ad66:	463b      	mov	r3, r7
 800ad68:	4628      	mov	r0, r5
 800ad6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6e:	f000 b857 	b.w	800ae20 <_write_r>

0800ad72 <__sseek>:
 800ad72:	b510      	push	{r4, lr}
 800ad74:	460c      	mov	r4, r1
 800ad76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7a:	f000 f82d 	bl	800add8 <_lseek_r>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	bf15      	itete	ne
 800ad84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad8e:	81a3      	strheq	r3, [r4, #12]
 800ad90:	bf18      	it	ne
 800ad92:	81a3      	strhne	r3, [r4, #12]
 800ad94:	bd10      	pop	{r4, pc}

0800ad96 <__sclose>:
 800ad96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9a:	f000 b80d 	b.w	800adb8 <_close_r>

0800ad9e <memset>:
 800ad9e:	4402      	add	r2, r0
 800ada0:	4603      	mov	r3, r0
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d100      	bne.n	800ada8 <memset+0xa>
 800ada6:	4770      	bx	lr
 800ada8:	f803 1b01 	strb.w	r1, [r3], #1
 800adac:	e7f9      	b.n	800ada2 <memset+0x4>
	...

0800adb0 <_localeconv_r>:
 800adb0:	4800      	ldr	r0, [pc, #0]	@ (800adb4 <_localeconv_r+0x4>)
 800adb2:	4770      	bx	lr
 800adb4:	2400015c 	.word	0x2400015c

0800adb8 <_close_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d06      	ldr	r5, [pc, #24]	@ (800add4 <_close_r+0x1c>)
 800adbc:	2300      	movs	r3, #0
 800adbe:	4604      	mov	r4, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	602b      	str	r3, [r5, #0]
 800adc4:	f7f6 fbd6 	bl	8001574 <_close>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_close_r+0x1a>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_close_r+0x1a>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	240006c8 	.word	0x240006c8

0800add8 <_lseek_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d07      	ldr	r5, [pc, #28]	@ (800adf8 <_lseek_r+0x20>)
 800addc:	4604      	mov	r4, r0
 800adde:	4608      	mov	r0, r1
 800ade0:	4611      	mov	r1, r2
 800ade2:	2200      	movs	r2, #0
 800ade4:	602a      	str	r2, [r5, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f7f6 fbeb 	bl	80015c2 <_lseek>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_lseek_r+0x1e>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_lseek_r+0x1e>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	240006c8 	.word	0x240006c8

0800adfc <_read_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	@ (800ae1c <_read_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7f6 fb95 	bl	800153a <_read>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_read_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_read_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	240006c8 	.word	0x240006c8

0800ae20 <_write_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d07      	ldr	r5, [pc, #28]	@ (800ae40 <_write_r+0x20>)
 800ae24:	4604      	mov	r4, r0
 800ae26:	4608      	mov	r0, r1
 800ae28:	4611      	mov	r1, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	602a      	str	r2, [r5, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f7f6 fde4 	bl	80019fc <_write>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d102      	bne.n	800ae3e <_write_r+0x1e>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	b103      	cbz	r3, 800ae3e <_write_r+0x1e>
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	240006c8 	.word	0x240006c8

0800ae44 <__errno>:
 800ae44:	4b01      	ldr	r3, [pc, #4]	@ (800ae4c <__errno+0x8>)
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	2400001c 	.word	0x2400001c

0800ae50 <__libc_init_array>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4d0d      	ldr	r5, [pc, #52]	@ (800ae88 <__libc_init_array+0x38>)
 800ae54:	4c0d      	ldr	r4, [pc, #52]	@ (800ae8c <__libc_init_array+0x3c>)
 800ae56:	1b64      	subs	r4, r4, r5
 800ae58:	10a4      	asrs	r4, r4, #2
 800ae5a:	2600      	movs	r6, #0
 800ae5c:	42a6      	cmp	r6, r4
 800ae5e:	d109      	bne.n	800ae74 <__libc_init_array+0x24>
 800ae60:	4d0b      	ldr	r5, [pc, #44]	@ (800ae90 <__libc_init_array+0x40>)
 800ae62:	4c0c      	ldr	r4, [pc, #48]	@ (800ae94 <__libc_init_array+0x44>)
 800ae64:	f003 fab6 	bl	800e3d4 <_init>
 800ae68:	1b64      	subs	r4, r4, r5
 800ae6a:	10a4      	asrs	r4, r4, #2
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	42a6      	cmp	r6, r4
 800ae70:	d105      	bne.n	800ae7e <__libc_init_array+0x2e>
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae78:	4798      	blx	r3
 800ae7a:	3601      	adds	r6, #1
 800ae7c:	e7ee      	b.n	800ae5c <__libc_init_array+0xc>
 800ae7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae82:	4798      	blx	r3
 800ae84:	3601      	adds	r6, #1
 800ae86:	e7f2      	b.n	800ae6e <__libc_init_array+0x1e>
 800ae88:	0800e8b4 	.word	0x0800e8b4
 800ae8c:	0800e8b4 	.word	0x0800e8b4
 800ae90:	0800e8b4 	.word	0x0800e8b4
 800ae94:	0800e8b8 	.word	0x0800e8b8

0800ae98 <__retarget_lock_init_recursive>:
 800ae98:	4770      	bx	lr

0800ae9a <__retarget_lock_acquire_recursive>:
 800ae9a:	4770      	bx	lr

0800ae9c <__retarget_lock_release_recursive>:
 800ae9c:	4770      	bx	lr
	...

0800aea0 <nanf>:
 800aea0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aea8 <nanf+0x8>
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	7fc00000 	.word	0x7fc00000

0800aeac <quorem>:
 800aeac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb0:	6903      	ldr	r3, [r0, #16]
 800aeb2:	690c      	ldr	r4, [r1, #16]
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	db7e      	blt.n	800afb8 <quorem+0x10c>
 800aeba:	3c01      	subs	r4, #1
 800aebc:	f101 0814 	add.w	r8, r1, #20
 800aec0:	00a3      	lsls	r3, r4, #2
 800aec2:	f100 0514 	add.w	r5, r0, #20
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed6:	3301      	adds	r3, #1
 800aed8:	429a      	cmp	r2, r3
 800aeda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aede:	fbb2 f6f3 	udiv	r6, r2, r3
 800aee2:	d32e      	bcc.n	800af42 <quorem+0x96>
 800aee4:	f04f 0a00 	mov.w	sl, #0
 800aee8:	46c4      	mov	ip, r8
 800aeea:	46ae      	mov	lr, r5
 800aeec:	46d3      	mov	fp, sl
 800aeee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aef2:	b298      	uxth	r0, r3
 800aef4:	fb06 a000 	mla	r0, r6, r0, sl
 800aef8:	0c02      	lsrs	r2, r0, #16
 800aefa:	0c1b      	lsrs	r3, r3, #16
 800aefc:	fb06 2303 	mla	r3, r6, r3, r2
 800af00:	f8de 2000 	ldr.w	r2, [lr]
 800af04:	b280      	uxth	r0, r0
 800af06:	b292      	uxth	r2, r2
 800af08:	1a12      	subs	r2, r2, r0
 800af0a:	445a      	add	r2, fp
 800af0c:	f8de 0000 	ldr.w	r0, [lr]
 800af10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af14:	b29b      	uxth	r3, r3
 800af16:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af1e:	b292      	uxth	r2, r2
 800af20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af24:	45e1      	cmp	r9, ip
 800af26:	f84e 2b04 	str.w	r2, [lr], #4
 800af2a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af2e:	d2de      	bcs.n	800aeee <quorem+0x42>
 800af30:	9b00      	ldr	r3, [sp, #0]
 800af32:	58eb      	ldr	r3, [r5, r3]
 800af34:	b92b      	cbnz	r3, 800af42 <quorem+0x96>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	3b04      	subs	r3, #4
 800af3a:	429d      	cmp	r5, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	d32f      	bcc.n	800afa0 <quorem+0xf4>
 800af40:	613c      	str	r4, [r7, #16]
 800af42:	4638      	mov	r0, r7
 800af44:	f001 f956 	bl	800c1f4 <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	db25      	blt.n	800af98 <quorem+0xec>
 800af4c:	4629      	mov	r1, r5
 800af4e:	2000      	movs	r0, #0
 800af50:	f858 2b04 	ldr.w	r2, [r8], #4
 800af54:	f8d1 c000 	ldr.w	ip, [r1]
 800af58:	fa1f fe82 	uxth.w	lr, r2
 800af5c:	fa1f f38c 	uxth.w	r3, ip
 800af60:	eba3 030e 	sub.w	r3, r3, lr
 800af64:	4403      	add	r3, r0
 800af66:	0c12      	lsrs	r2, r2, #16
 800af68:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af6c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af70:	b29b      	uxth	r3, r3
 800af72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af76:	45c1      	cmp	r9, r8
 800af78:	f841 3b04 	str.w	r3, [r1], #4
 800af7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af80:	d2e6      	bcs.n	800af50 <quorem+0xa4>
 800af82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8a:	b922      	cbnz	r2, 800af96 <quorem+0xea>
 800af8c:	3b04      	subs	r3, #4
 800af8e:	429d      	cmp	r5, r3
 800af90:	461a      	mov	r2, r3
 800af92:	d30b      	bcc.n	800afac <quorem+0x100>
 800af94:	613c      	str	r4, [r7, #16]
 800af96:	3601      	adds	r6, #1
 800af98:	4630      	mov	r0, r6
 800af9a:	b003      	add	sp, #12
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	6812      	ldr	r2, [r2, #0]
 800afa2:	3b04      	subs	r3, #4
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	d1cb      	bne.n	800af40 <quorem+0x94>
 800afa8:	3c01      	subs	r4, #1
 800afaa:	e7c6      	b.n	800af3a <quorem+0x8e>
 800afac:	6812      	ldr	r2, [r2, #0]
 800afae:	3b04      	subs	r3, #4
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	d1ef      	bne.n	800af94 <quorem+0xe8>
 800afb4:	3c01      	subs	r4, #1
 800afb6:	e7ea      	b.n	800af8e <quorem+0xe2>
 800afb8:	2000      	movs	r0, #0
 800afba:	e7ee      	b.n	800af9a <quorem+0xee>
 800afbc:	0000      	movs	r0, r0
	...

0800afc0 <_dtoa_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	ed2d 8b02 	vpush	{d8}
 800afc8:	69c7      	ldr	r7, [r0, #28]
 800afca:	b091      	sub	sp, #68	@ 0x44
 800afcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afd0:	ec55 4b10 	vmov	r4, r5, d0
 800afd4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800afd6:	9107      	str	r1, [sp, #28]
 800afd8:	4681      	mov	r9, r0
 800afda:	9209      	str	r2, [sp, #36]	@ 0x24
 800afdc:	930d      	str	r3, [sp, #52]	@ 0x34
 800afde:	b97f      	cbnz	r7, 800b000 <_dtoa_r+0x40>
 800afe0:	2010      	movs	r0, #16
 800afe2:	f000 fd95 	bl	800bb10 <malloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	f8c9 001c 	str.w	r0, [r9, #28]
 800afec:	b920      	cbnz	r0, 800aff8 <_dtoa_r+0x38>
 800afee:	4ba0      	ldr	r3, [pc, #640]	@ (800b270 <_dtoa_r+0x2b0>)
 800aff0:	21ef      	movs	r1, #239	@ 0xef
 800aff2:	48a0      	ldr	r0, [pc, #640]	@ (800b274 <_dtoa_r+0x2b4>)
 800aff4:	f002 fb78 	bl	800d6e8 <__assert_func>
 800aff8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800affc:	6007      	str	r7, [r0, #0]
 800affe:	60c7      	str	r7, [r0, #12]
 800b000:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b004:	6819      	ldr	r1, [r3, #0]
 800b006:	b159      	cbz	r1, 800b020 <_dtoa_r+0x60>
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	604a      	str	r2, [r1, #4]
 800b00c:	2301      	movs	r3, #1
 800b00e:	4093      	lsls	r3, r2
 800b010:	608b      	str	r3, [r1, #8]
 800b012:	4648      	mov	r0, r9
 800b014:	f000 fe72 	bl	800bcfc <_Bfree>
 800b018:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	1e2b      	subs	r3, r5, #0
 800b022:	bfbb      	ittet	lt
 800b024:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b028:	9303      	strlt	r3, [sp, #12]
 800b02a:	2300      	movge	r3, #0
 800b02c:	2201      	movlt	r2, #1
 800b02e:	bfac      	ite	ge
 800b030:	6033      	strge	r3, [r6, #0]
 800b032:	6032      	strlt	r2, [r6, #0]
 800b034:	4b90      	ldr	r3, [pc, #576]	@ (800b278 <_dtoa_r+0x2b8>)
 800b036:	9e03      	ldr	r6, [sp, #12]
 800b038:	43b3      	bics	r3, r6
 800b03a:	d110      	bne.n	800b05e <_dtoa_r+0x9e>
 800b03c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b03e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b048:	4323      	orrs	r3, r4
 800b04a:	f000 84e6 	beq.w	800ba1a <_dtoa_r+0xa5a>
 800b04e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b050:	4f8a      	ldr	r7, [pc, #552]	@ (800b27c <_dtoa_r+0x2bc>)
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 84e8 	beq.w	800ba28 <_dtoa_r+0xa68>
 800b058:	1cfb      	adds	r3, r7, #3
 800b05a:	f000 bce3 	b.w	800ba24 <_dtoa_r+0xa64>
 800b05e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b062:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06a:	d10a      	bne.n	800b082 <_dtoa_r+0xc2>
 800b06c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b06e:	2301      	movs	r3, #1
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b074:	b113      	cbz	r3, 800b07c <_dtoa_r+0xbc>
 800b076:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b078:	4b81      	ldr	r3, [pc, #516]	@ (800b280 <_dtoa_r+0x2c0>)
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	4f81      	ldr	r7, [pc, #516]	@ (800b284 <_dtoa_r+0x2c4>)
 800b07e:	f000 bcd3 	b.w	800ba28 <_dtoa_r+0xa68>
 800b082:	aa0e      	add	r2, sp, #56	@ 0x38
 800b084:	a90f      	add	r1, sp, #60	@ 0x3c
 800b086:	4648      	mov	r0, r9
 800b088:	eeb0 0b48 	vmov.f64	d0, d8
 800b08c:	f001 f9d2 	bl	800c434 <__d2b>
 800b090:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b096:	9001      	str	r0, [sp, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d045      	beq.n	800b128 <_dtoa_r+0x168>
 800b09c:	eeb0 7b48 	vmov.f64	d7, d8
 800b0a0:	ee18 1a90 	vmov	r1, s17
 800b0a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b0ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b0b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b0b4:	2500      	movs	r5, #0
 800b0b6:	ee07 1a90 	vmov	s15, r1
 800b0ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b0be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b258 <_dtoa_r+0x298>
 800b0c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b0c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b260 <_dtoa_r+0x2a0>
 800b0ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b0ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b268 <_dtoa_r+0x2a8>
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b0da:	eeb0 7b46 	vmov.f64	d7, d6
 800b0de:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b0e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b0e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ee:	ee16 8a90 	vmov	r8, s13
 800b0f2:	d508      	bpl.n	800b106 <_dtoa_r+0x146>
 800b0f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b0f8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b100:	bf18      	it	ne
 800b102:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b106:	f1b8 0f16 	cmp.w	r8, #22
 800b10a:	d82b      	bhi.n	800b164 <_dtoa_r+0x1a4>
 800b10c:	495e      	ldr	r1, [pc, #376]	@ (800b288 <_dtoa_r+0x2c8>)
 800b10e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b112:	ed91 7b00 	vldr	d7, [r1]
 800b116:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11e:	d501      	bpl.n	800b124 <_dtoa_r+0x164>
 800b120:	f108 38ff 	add.w	r8, r8, #4294967295
 800b124:	2100      	movs	r1, #0
 800b126:	e01e      	b.n	800b166 <_dtoa_r+0x1a6>
 800b128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b12a:	4413      	add	r3, r2
 800b12c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b130:	2920      	cmp	r1, #32
 800b132:	bfc1      	itttt	gt
 800b134:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b138:	408e      	lslgt	r6, r1
 800b13a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b13e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b142:	bfd6      	itet	le
 800b144:	f1c1 0120 	rsble	r1, r1, #32
 800b148:	4331      	orrgt	r1, r6
 800b14a:	fa04 f101 	lslle.w	r1, r4, r1
 800b14e:	ee07 1a90 	vmov	s15, r1
 800b152:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b156:	3b01      	subs	r3, #1
 800b158:	ee17 1a90 	vmov	r1, s15
 800b15c:	2501      	movs	r5, #1
 800b15e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b162:	e7a8      	b.n	800b0b6 <_dtoa_r+0xf6>
 800b164:	2101      	movs	r1, #1
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	1e53      	subs	r3, r2, #1
 800b16a:	9306      	str	r3, [sp, #24]
 800b16c:	bf45      	ittet	mi
 800b16e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b172:	9304      	strmi	r3, [sp, #16]
 800b174:	2300      	movpl	r3, #0
 800b176:	2300      	movmi	r3, #0
 800b178:	bf4c      	ite	mi
 800b17a:	9306      	strmi	r3, [sp, #24]
 800b17c:	9304      	strpl	r3, [sp, #16]
 800b17e:	f1b8 0f00 	cmp.w	r8, #0
 800b182:	910c      	str	r1, [sp, #48]	@ 0x30
 800b184:	db18      	blt.n	800b1b8 <_dtoa_r+0x1f8>
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b18c:	4443      	add	r3, r8
 800b18e:	9306      	str	r3, [sp, #24]
 800b190:	2300      	movs	r3, #0
 800b192:	9a07      	ldr	r2, [sp, #28]
 800b194:	2a09      	cmp	r2, #9
 800b196:	d845      	bhi.n	800b224 <_dtoa_r+0x264>
 800b198:	2a05      	cmp	r2, #5
 800b19a:	bfc4      	itt	gt
 800b19c:	3a04      	subgt	r2, #4
 800b19e:	9207      	strgt	r2, [sp, #28]
 800b1a0:	9a07      	ldr	r2, [sp, #28]
 800b1a2:	f1a2 0202 	sub.w	r2, r2, #2
 800b1a6:	bfcc      	ite	gt
 800b1a8:	2400      	movgt	r4, #0
 800b1aa:	2401      	movle	r4, #1
 800b1ac:	2a03      	cmp	r2, #3
 800b1ae:	d844      	bhi.n	800b23a <_dtoa_r+0x27a>
 800b1b0:	e8df f002 	tbb	[pc, r2]
 800b1b4:	0b173634 	.word	0x0b173634
 800b1b8:	9b04      	ldr	r3, [sp, #16]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	eba3 0308 	sub.w	r3, r3, r8
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b1c4:	f1c8 0300 	rsb	r3, r8, #0
 800b1c8:	e7e3      	b.n	800b192 <_dtoa_r+0x1d2>
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	9208      	str	r2, [sp, #32]
 800b1ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1d0:	eb08 0b02 	add.w	fp, r8, r2
 800b1d4:	f10b 0a01 	add.w	sl, fp, #1
 800b1d8:	4652      	mov	r2, sl
 800b1da:	2a01      	cmp	r2, #1
 800b1dc:	bfb8      	it	lt
 800b1de:	2201      	movlt	r2, #1
 800b1e0:	e006      	b.n	800b1f0 <_dtoa_r+0x230>
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	9208      	str	r2, [sp, #32]
 800b1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	dd29      	ble.n	800b240 <_dtoa_r+0x280>
 800b1ec:	4693      	mov	fp, r2
 800b1ee:	4692      	mov	sl, r2
 800b1f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	2004      	movs	r0, #4
 800b1f8:	f100 0614 	add.w	r6, r0, #20
 800b1fc:	4296      	cmp	r6, r2
 800b1fe:	d926      	bls.n	800b24e <_dtoa_r+0x28e>
 800b200:	6079      	str	r1, [r7, #4]
 800b202:	4648      	mov	r0, r9
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	f000 fd39 	bl	800bc7c <_Balloc>
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	4607      	mov	r7, r0
 800b20e:	2800      	cmp	r0, #0
 800b210:	d13e      	bne.n	800b290 <_dtoa_r+0x2d0>
 800b212:	4b1e      	ldr	r3, [pc, #120]	@ (800b28c <_dtoa_r+0x2cc>)
 800b214:	4602      	mov	r2, r0
 800b216:	f240 11af 	movw	r1, #431	@ 0x1af
 800b21a:	e6ea      	b.n	800aff2 <_dtoa_r+0x32>
 800b21c:	2200      	movs	r2, #0
 800b21e:	e7e1      	b.n	800b1e4 <_dtoa_r+0x224>
 800b220:	2200      	movs	r2, #0
 800b222:	e7d3      	b.n	800b1cc <_dtoa_r+0x20c>
 800b224:	2401      	movs	r4, #1
 800b226:	2200      	movs	r2, #0
 800b228:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b22c:	f04f 3bff 	mov.w	fp, #4294967295
 800b230:	2100      	movs	r1, #0
 800b232:	46da      	mov	sl, fp
 800b234:	2212      	movs	r2, #18
 800b236:	9109      	str	r1, [sp, #36]	@ 0x24
 800b238:	e7da      	b.n	800b1f0 <_dtoa_r+0x230>
 800b23a:	2201      	movs	r2, #1
 800b23c:	9208      	str	r2, [sp, #32]
 800b23e:	e7f5      	b.n	800b22c <_dtoa_r+0x26c>
 800b240:	f04f 0b01 	mov.w	fp, #1
 800b244:	46da      	mov	sl, fp
 800b246:	465a      	mov	r2, fp
 800b248:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b24c:	e7d0      	b.n	800b1f0 <_dtoa_r+0x230>
 800b24e:	3101      	adds	r1, #1
 800b250:	0040      	lsls	r0, r0, #1
 800b252:	e7d1      	b.n	800b1f8 <_dtoa_r+0x238>
 800b254:	f3af 8000 	nop.w
 800b258:	636f4361 	.word	0x636f4361
 800b25c:	3fd287a7 	.word	0x3fd287a7
 800b260:	8b60c8b3 	.word	0x8b60c8b3
 800b264:	3fc68a28 	.word	0x3fc68a28
 800b268:	509f79fb 	.word	0x509f79fb
 800b26c:	3fd34413 	.word	0x3fd34413
 800b270:	0800e4c6 	.word	0x0800e4c6
 800b274:	0800e4dd 	.word	0x0800e4dd
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	0800e4c2 	.word	0x0800e4c2
 800b280:	0800e491 	.word	0x0800e491
 800b284:	0800e490 	.word	0x0800e490
 800b288:	0800e690 	.word	0x0800e690
 800b28c:	0800e535 	.word	0x0800e535
 800b290:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b294:	f1ba 0f0e 	cmp.w	sl, #14
 800b298:	6010      	str	r0, [r2, #0]
 800b29a:	d86e      	bhi.n	800b37a <_dtoa_r+0x3ba>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d06c      	beq.n	800b37a <_dtoa_r+0x3ba>
 800b2a0:	f1b8 0f00 	cmp.w	r8, #0
 800b2a4:	f340 80b4 	ble.w	800b410 <_dtoa_r+0x450>
 800b2a8:	4ac8      	ldr	r2, [pc, #800]	@ (800b5cc <_dtoa_r+0x60c>)
 800b2aa:	f008 010f 	and.w	r1, r8, #15
 800b2ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b2b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b2b6:	ed92 7b00 	vldr	d7, [r2]
 800b2ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b2be:	f000 809b 	beq.w	800b3f8 <_dtoa_r+0x438>
 800b2c2:	4ac3      	ldr	r2, [pc, #780]	@ (800b5d0 <_dtoa_r+0x610>)
 800b2c4:	ed92 6b08 	vldr	d6, [r2, #32]
 800b2c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b2cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b2d0:	f001 010f 	and.w	r1, r1, #15
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	48be      	ldr	r0, [pc, #760]	@ (800b5d0 <_dtoa_r+0x610>)
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	f040 808f 	bne.w	800b3fc <_dtoa_r+0x43c>
 800b2de:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b2e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b2e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b2ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2f0:	2900      	cmp	r1, #0
 800b2f2:	f000 80b3 	beq.w	800b45c <_dtoa_r+0x49c>
 800b2f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b2fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b302:	f140 80ab 	bpl.w	800b45c <_dtoa_r+0x49c>
 800b306:	f1ba 0f00 	cmp.w	sl, #0
 800b30a:	f000 80a7 	beq.w	800b45c <_dtoa_r+0x49c>
 800b30e:	f1bb 0f00 	cmp.w	fp, #0
 800b312:	dd30      	ble.n	800b376 <_dtoa_r+0x3b6>
 800b314:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b318:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b31c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b320:	f108 31ff 	add.w	r1, r8, #4294967295
 800b324:	9105      	str	r1, [sp, #20]
 800b326:	3201      	adds	r2, #1
 800b328:	465c      	mov	r4, fp
 800b32a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b32e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b332:	ee07 2a90 	vmov	s15, r2
 800b336:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b33a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b33e:	ee15 2a90 	vmov	r2, s11
 800b342:	ec51 0b15 	vmov	r0, r1, d5
 800b346:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b34a:	2c00      	cmp	r4, #0
 800b34c:	f040 808a 	bne.w	800b464 <_dtoa_r+0x4a4>
 800b350:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b354:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b358:	ec41 0b17 	vmov	d7, r0, r1
 800b35c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b364:	f300 826a 	bgt.w	800b83c <_dtoa_r+0x87c>
 800b368:	eeb1 7b47 	vneg.f64	d7, d7
 800b36c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b374:	d423      	bmi.n	800b3be <_dtoa_r+0x3fe>
 800b376:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b37a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	f2c0 8129 	blt.w	800b5d4 <_dtoa_r+0x614>
 800b382:	f1b8 0f0e 	cmp.w	r8, #14
 800b386:	f300 8125 	bgt.w	800b5d4 <_dtoa_r+0x614>
 800b38a:	4b90      	ldr	r3, [pc, #576]	@ (800b5cc <_dtoa_r+0x60c>)
 800b38c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b390:	ed93 6b00 	vldr	d6, [r3]
 800b394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	f280 80c8 	bge.w	800b52c <_dtoa_r+0x56c>
 800b39c:	f1ba 0f00 	cmp.w	sl, #0
 800b3a0:	f300 80c4 	bgt.w	800b52c <_dtoa_r+0x56c>
 800b3a4:	d10b      	bne.n	800b3be <_dtoa_r+0x3fe>
 800b3a6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b3aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b3ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ba:	f2c0 823c 	blt.w	800b836 <_dtoa_r+0x876>
 800b3be:	2400      	movs	r4, #0
 800b3c0:	4625      	mov	r5, r4
 800b3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c4:	43db      	mvns	r3, r3
 800b3c6:	9305      	str	r3, [sp, #20]
 800b3c8:	463e      	mov	r6, r7
 800b3ca:	f04f 0800 	mov.w	r8, #0
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f000 fc93 	bl	800bcfc <_Bfree>
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	f000 80a2 	beq.w	800b520 <_dtoa_r+0x560>
 800b3dc:	f1b8 0f00 	cmp.w	r8, #0
 800b3e0:	d005      	beq.n	800b3ee <_dtoa_r+0x42e>
 800b3e2:	45a8      	cmp	r8, r5
 800b3e4:	d003      	beq.n	800b3ee <_dtoa_r+0x42e>
 800b3e6:	4641      	mov	r1, r8
 800b3e8:	4648      	mov	r0, r9
 800b3ea:	f000 fc87 	bl	800bcfc <_Bfree>
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4648      	mov	r0, r9
 800b3f2:	f000 fc83 	bl	800bcfc <_Bfree>
 800b3f6:	e093      	b.n	800b520 <_dtoa_r+0x560>
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	e76c      	b.n	800b2d6 <_dtoa_r+0x316>
 800b3fc:	07cc      	lsls	r4, r1, #31
 800b3fe:	d504      	bpl.n	800b40a <_dtoa_r+0x44a>
 800b400:	ed90 6b00 	vldr	d6, [r0]
 800b404:	3201      	adds	r2, #1
 800b406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b40a:	1049      	asrs	r1, r1, #1
 800b40c:	3008      	adds	r0, #8
 800b40e:	e763      	b.n	800b2d8 <_dtoa_r+0x318>
 800b410:	d022      	beq.n	800b458 <_dtoa_r+0x498>
 800b412:	f1c8 0100 	rsb	r1, r8, #0
 800b416:	4a6d      	ldr	r2, [pc, #436]	@ (800b5cc <_dtoa_r+0x60c>)
 800b418:	f001 000f 	and.w	r0, r1, #15
 800b41c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b420:	ed92 7b00 	vldr	d7, [r2]
 800b424:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b42c:	4868      	ldr	r0, [pc, #416]	@ (800b5d0 <_dtoa_r+0x610>)
 800b42e:	1109      	asrs	r1, r1, #4
 800b430:	2400      	movs	r4, #0
 800b432:	2202      	movs	r2, #2
 800b434:	b929      	cbnz	r1, 800b442 <_dtoa_r+0x482>
 800b436:	2c00      	cmp	r4, #0
 800b438:	f43f af57 	beq.w	800b2ea <_dtoa_r+0x32a>
 800b43c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b440:	e753      	b.n	800b2ea <_dtoa_r+0x32a>
 800b442:	07ce      	lsls	r6, r1, #31
 800b444:	d505      	bpl.n	800b452 <_dtoa_r+0x492>
 800b446:	ed90 6b00 	vldr	d6, [r0]
 800b44a:	3201      	adds	r2, #1
 800b44c:	2401      	movs	r4, #1
 800b44e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b452:	1049      	asrs	r1, r1, #1
 800b454:	3008      	adds	r0, #8
 800b456:	e7ed      	b.n	800b434 <_dtoa_r+0x474>
 800b458:	2202      	movs	r2, #2
 800b45a:	e746      	b.n	800b2ea <_dtoa_r+0x32a>
 800b45c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b460:	4654      	mov	r4, sl
 800b462:	e762      	b.n	800b32a <_dtoa_r+0x36a>
 800b464:	4a59      	ldr	r2, [pc, #356]	@ (800b5cc <_dtoa_r+0x60c>)
 800b466:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b46a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b46e:	9a08      	ldr	r2, [sp, #32]
 800b470:	ec41 0b17 	vmov	d7, r0, r1
 800b474:	443c      	add	r4, r7
 800b476:	b34a      	cbz	r2, 800b4cc <_dtoa_r+0x50c>
 800b478:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b47c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b480:	463e      	mov	r6, r7
 800b482:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b486:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b48a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b48e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b492:	ee14 2a90 	vmov	r2, s9
 800b496:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b49a:	3230      	adds	r2, #48	@ 0x30
 800b49c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b4a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a8:	f806 2b01 	strb.w	r2, [r6], #1
 800b4ac:	d438      	bmi.n	800b520 <_dtoa_r+0x560>
 800b4ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b4b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ba:	d46e      	bmi.n	800b59a <_dtoa_r+0x5da>
 800b4bc:	42a6      	cmp	r6, r4
 800b4be:	f43f af5a 	beq.w	800b376 <_dtoa_r+0x3b6>
 800b4c2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b4c6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b4ca:	e7e0      	b.n	800b48e <_dtoa_r+0x4ce>
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	463e      	mov	r6, r7
 800b4d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b4d4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b4d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b4dc:	ee14 2a90 	vmov	r2, s9
 800b4e0:	3230      	adds	r2, #48	@ 0x30
 800b4e2:	f806 2b01 	strb.w	r2, [r6], #1
 800b4e6:	42a6      	cmp	r6, r4
 800b4e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b4ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b4f0:	d119      	bne.n	800b526 <_dtoa_r+0x566>
 800b4f2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b4f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b4fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b502:	dc4a      	bgt.n	800b59a <_dtoa_r+0x5da>
 800b504:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b508:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b510:	f57f af31 	bpl.w	800b376 <_dtoa_r+0x3b6>
 800b514:	460e      	mov	r6, r1
 800b516:	3901      	subs	r1, #1
 800b518:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b51c:	2b30      	cmp	r3, #48	@ 0x30
 800b51e:	d0f9      	beq.n	800b514 <_dtoa_r+0x554>
 800b520:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b524:	e027      	b.n	800b576 <_dtoa_r+0x5b6>
 800b526:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b52a:	e7d5      	b.n	800b4d8 <_dtoa_r+0x518>
 800b52c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b530:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b534:	463e      	mov	r6, r7
 800b536:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b53a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b53e:	ee15 3a10 	vmov	r3, s10
 800b542:	3330      	adds	r3, #48	@ 0x30
 800b544:	f806 3b01 	strb.w	r3, [r6], #1
 800b548:	1bf3      	subs	r3, r6, r7
 800b54a:	459a      	cmp	sl, r3
 800b54c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b550:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b554:	d132      	bne.n	800b5bc <_dtoa_r+0x5fc>
 800b556:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b55a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b562:	dc18      	bgt.n	800b596 <_dtoa_r+0x5d6>
 800b564:	eeb4 7b46 	vcmp.f64	d7, d6
 800b568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b56c:	d103      	bne.n	800b576 <_dtoa_r+0x5b6>
 800b56e:	ee15 3a10 	vmov	r3, s10
 800b572:	07db      	lsls	r3, r3, #31
 800b574:	d40f      	bmi.n	800b596 <_dtoa_r+0x5d6>
 800b576:	9901      	ldr	r1, [sp, #4]
 800b578:	4648      	mov	r0, r9
 800b57a:	f000 fbbf 	bl	800bcfc <_Bfree>
 800b57e:	2300      	movs	r3, #0
 800b580:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b582:	7033      	strb	r3, [r6, #0]
 800b584:	f108 0301 	add.w	r3, r8, #1
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 824b 	beq.w	800ba28 <_dtoa_r+0xa68>
 800b592:	601e      	str	r6, [r3, #0]
 800b594:	e248      	b.n	800ba28 <_dtoa_r+0xa68>
 800b596:	f8cd 8014 	str.w	r8, [sp, #20]
 800b59a:	4633      	mov	r3, r6
 800b59c:	461e      	mov	r6, r3
 800b59e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5a2:	2a39      	cmp	r2, #57	@ 0x39
 800b5a4:	d106      	bne.n	800b5b4 <_dtoa_r+0x5f4>
 800b5a6:	429f      	cmp	r7, r3
 800b5a8:	d1f8      	bne.n	800b59c <_dtoa_r+0x5dc>
 800b5aa:	9a05      	ldr	r2, [sp, #20]
 800b5ac:	3201      	adds	r2, #1
 800b5ae:	9205      	str	r2, [sp, #20]
 800b5b0:	2230      	movs	r2, #48	@ 0x30
 800b5b2:	703a      	strb	r2, [r7, #0]
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
 800b5ba:	e7b1      	b.n	800b520 <_dtoa_r+0x560>
 800b5bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b5c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c8:	d1b5      	bne.n	800b536 <_dtoa_r+0x576>
 800b5ca:	e7d4      	b.n	800b576 <_dtoa_r+0x5b6>
 800b5cc:	0800e690 	.word	0x0800e690
 800b5d0:	0800e668 	.word	0x0800e668
 800b5d4:	9908      	ldr	r1, [sp, #32]
 800b5d6:	2900      	cmp	r1, #0
 800b5d8:	f000 80e9 	beq.w	800b7ae <_dtoa_r+0x7ee>
 800b5dc:	9907      	ldr	r1, [sp, #28]
 800b5de:	2901      	cmp	r1, #1
 800b5e0:	f300 80cb 	bgt.w	800b77a <_dtoa_r+0x7ba>
 800b5e4:	2d00      	cmp	r5, #0
 800b5e6:	f000 80c4 	beq.w	800b772 <_dtoa_r+0x7b2>
 800b5ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b5ee:	9e04      	ldr	r6, [sp, #16]
 800b5f0:	461c      	mov	r4, r3
 800b5f2:	9305      	str	r3, [sp, #20]
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	9b06      	ldr	r3, [sp, #24]
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	4413      	add	r3, r2
 800b600:	4648      	mov	r0, r9
 800b602:	9306      	str	r3, [sp, #24]
 800b604:	f000 fc78 	bl	800bef8 <__i2b>
 800b608:	9b05      	ldr	r3, [sp, #20]
 800b60a:	4605      	mov	r5, r0
 800b60c:	b166      	cbz	r6, 800b628 <_dtoa_r+0x668>
 800b60e:	9a06      	ldr	r2, [sp, #24]
 800b610:	2a00      	cmp	r2, #0
 800b612:	dd09      	ble.n	800b628 <_dtoa_r+0x668>
 800b614:	42b2      	cmp	r2, r6
 800b616:	9904      	ldr	r1, [sp, #16]
 800b618:	bfa8      	it	ge
 800b61a:	4632      	movge	r2, r6
 800b61c:	1a89      	subs	r1, r1, r2
 800b61e:	9104      	str	r1, [sp, #16]
 800b620:	9906      	ldr	r1, [sp, #24]
 800b622:	1ab6      	subs	r6, r6, r2
 800b624:	1a8a      	subs	r2, r1, r2
 800b626:	9206      	str	r2, [sp, #24]
 800b628:	b30b      	cbz	r3, 800b66e <_dtoa_r+0x6ae>
 800b62a:	9a08      	ldr	r2, [sp, #32]
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	f000 80c5 	beq.w	800b7bc <_dtoa_r+0x7fc>
 800b632:	2c00      	cmp	r4, #0
 800b634:	f000 80bf 	beq.w	800b7b6 <_dtoa_r+0x7f6>
 800b638:	4629      	mov	r1, r5
 800b63a:	4622      	mov	r2, r4
 800b63c:	4648      	mov	r0, r9
 800b63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b640:	f000 fd12 	bl	800c068 <__pow5mult>
 800b644:	9a01      	ldr	r2, [sp, #4]
 800b646:	4601      	mov	r1, r0
 800b648:	4605      	mov	r5, r0
 800b64a:	4648      	mov	r0, r9
 800b64c:	f000 fc6a 	bl	800bf24 <__multiply>
 800b650:	9901      	ldr	r1, [sp, #4]
 800b652:	9005      	str	r0, [sp, #20]
 800b654:	4648      	mov	r0, r9
 800b656:	f000 fb51 	bl	800bcfc <_Bfree>
 800b65a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b65c:	1b1b      	subs	r3, r3, r4
 800b65e:	f000 80b0 	beq.w	800b7c2 <_dtoa_r+0x802>
 800b662:	9905      	ldr	r1, [sp, #20]
 800b664:	461a      	mov	r2, r3
 800b666:	4648      	mov	r0, r9
 800b668:	f000 fcfe 	bl	800c068 <__pow5mult>
 800b66c:	9001      	str	r0, [sp, #4]
 800b66e:	2101      	movs	r1, #1
 800b670:	4648      	mov	r0, r9
 800b672:	f000 fc41 	bl	800bef8 <__i2b>
 800b676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b678:	4604      	mov	r4, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 81da 	beq.w	800ba34 <_dtoa_r+0xa74>
 800b680:	461a      	mov	r2, r3
 800b682:	4601      	mov	r1, r0
 800b684:	4648      	mov	r0, r9
 800b686:	f000 fcef 	bl	800c068 <__pow5mult>
 800b68a:	9b07      	ldr	r3, [sp, #28]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	4604      	mov	r4, r0
 800b690:	f300 80a0 	bgt.w	800b7d4 <_dtoa_r+0x814>
 800b694:	9b02      	ldr	r3, [sp, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 8096 	bne.w	800b7c8 <_dtoa_r+0x808>
 800b69c:	9b03      	ldr	r3, [sp, #12]
 800b69e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	f040 8092 	bne.w	800b7cc <_dtoa_r+0x80c>
 800b6a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b6ac:	0d12      	lsrs	r2, r2, #20
 800b6ae:	0512      	lsls	r2, r2, #20
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	f000 808d 	beq.w	800b7d0 <_dtoa_r+0x810>
 800b6b6:	9b04      	ldr	r3, [sp, #16]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	9b06      	ldr	r3, [sp, #24]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	9306      	str	r3, [sp, #24]
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 81b9 	beq.w	800ba40 <_dtoa_r+0xa80>
 800b6ce:	6922      	ldr	r2, [r4, #16]
 800b6d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b6d4:	6910      	ldr	r0, [r2, #16]
 800b6d6:	f000 fbc3 	bl	800be60 <__hi0bits>
 800b6da:	f1c0 0020 	rsb	r0, r0, #32
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	4418      	add	r0, r3
 800b6e2:	f010 001f 	ands.w	r0, r0, #31
 800b6e6:	f000 8081 	beq.w	800b7ec <_dtoa_r+0x82c>
 800b6ea:	f1c0 0220 	rsb	r2, r0, #32
 800b6ee:	2a04      	cmp	r2, #4
 800b6f0:	dd73      	ble.n	800b7da <_dtoa_r+0x81a>
 800b6f2:	9b04      	ldr	r3, [sp, #16]
 800b6f4:	f1c0 001c 	rsb	r0, r0, #28
 800b6f8:	4403      	add	r3, r0
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	9b06      	ldr	r3, [sp, #24]
 800b6fe:	4406      	add	r6, r0
 800b700:	4403      	add	r3, r0
 800b702:	9306      	str	r3, [sp, #24]
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	dd05      	ble.n	800b716 <_dtoa_r+0x756>
 800b70a:	9901      	ldr	r1, [sp, #4]
 800b70c:	461a      	mov	r2, r3
 800b70e:	4648      	mov	r0, r9
 800b710:	f000 fd04 	bl	800c11c <__lshift>
 800b714:	9001      	str	r0, [sp, #4]
 800b716:	9b06      	ldr	r3, [sp, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dd05      	ble.n	800b728 <_dtoa_r+0x768>
 800b71c:	4621      	mov	r1, r4
 800b71e:	461a      	mov	r2, r3
 800b720:	4648      	mov	r0, r9
 800b722:	f000 fcfb 	bl	800c11c <__lshift>
 800b726:	4604      	mov	r4, r0
 800b728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d060      	beq.n	800b7f0 <_dtoa_r+0x830>
 800b72e:	9801      	ldr	r0, [sp, #4]
 800b730:	4621      	mov	r1, r4
 800b732:	f000 fd5f 	bl	800c1f4 <__mcmp>
 800b736:	2800      	cmp	r0, #0
 800b738:	da5a      	bge.n	800b7f0 <_dtoa_r+0x830>
 800b73a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b73e:	9305      	str	r3, [sp, #20]
 800b740:	9901      	ldr	r1, [sp, #4]
 800b742:	2300      	movs	r3, #0
 800b744:	220a      	movs	r2, #10
 800b746:	4648      	mov	r0, r9
 800b748:	f000 fafa 	bl	800bd40 <__multadd>
 800b74c:	9b08      	ldr	r3, [sp, #32]
 800b74e:	9001      	str	r0, [sp, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 8177 	beq.w	800ba44 <_dtoa_r+0xa84>
 800b756:	4629      	mov	r1, r5
 800b758:	2300      	movs	r3, #0
 800b75a:	220a      	movs	r2, #10
 800b75c:	4648      	mov	r0, r9
 800b75e:	f000 faef 	bl	800bd40 <__multadd>
 800b762:	f1bb 0f00 	cmp.w	fp, #0
 800b766:	4605      	mov	r5, r0
 800b768:	dc6e      	bgt.n	800b848 <_dtoa_r+0x888>
 800b76a:	9b07      	ldr	r3, [sp, #28]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	dc48      	bgt.n	800b802 <_dtoa_r+0x842>
 800b770:	e06a      	b.n	800b848 <_dtoa_r+0x888>
 800b772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b774:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b778:	e739      	b.n	800b5ee <_dtoa_r+0x62e>
 800b77a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b77e:	42a3      	cmp	r3, r4
 800b780:	db07      	blt.n	800b792 <_dtoa_r+0x7d2>
 800b782:	f1ba 0f00 	cmp.w	sl, #0
 800b786:	eba3 0404 	sub.w	r4, r3, r4
 800b78a:	db0b      	blt.n	800b7a4 <_dtoa_r+0x7e4>
 800b78c:	9e04      	ldr	r6, [sp, #16]
 800b78e:	4652      	mov	r2, sl
 800b790:	e72f      	b.n	800b5f2 <_dtoa_r+0x632>
 800b792:	1ae2      	subs	r2, r4, r3
 800b794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b796:	9e04      	ldr	r6, [sp, #16]
 800b798:	4413      	add	r3, r2
 800b79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b79c:	4652      	mov	r2, sl
 800b79e:	4623      	mov	r3, r4
 800b7a0:	2400      	movs	r4, #0
 800b7a2:	e726      	b.n	800b5f2 <_dtoa_r+0x632>
 800b7a4:	9a04      	ldr	r2, [sp, #16]
 800b7a6:	eba2 060a 	sub.w	r6, r2, sl
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	e721      	b.n	800b5f2 <_dtoa_r+0x632>
 800b7ae:	9e04      	ldr	r6, [sp, #16]
 800b7b0:	9d08      	ldr	r5, [sp, #32]
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	e72a      	b.n	800b60c <_dtoa_r+0x64c>
 800b7b6:	9a01      	ldr	r2, [sp, #4]
 800b7b8:	9205      	str	r2, [sp, #20]
 800b7ba:	e752      	b.n	800b662 <_dtoa_r+0x6a2>
 800b7bc:	9901      	ldr	r1, [sp, #4]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	e751      	b.n	800b666 <_dtoa_r+0x6a6>
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	e752      	b.n	800b66e <_dtoa_r+0x6ae>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	e77b      	b.n	800b6c4 <_dtoa_r+0x704>
 800b7cc:	9b02      	ldr	r3, [sp, #8]
 800b7ce:	e779      	b.n	800b6c4 <_dtoa_r+0x704>
 800b7d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b7d2:	e778      	b.n	800b6c6 <_dtoa_r+0x706>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7d8:	e779      	b.n	800b6ce <_dtoa_r+0x70e>
 800b7da:	d093      	beq.n	800b704 <_dtoa_r+0x744>
 800b7dc:	9b04      	ldr	r3, [sp, #16]
 800b7de:	321c      	adds	r2, #28
 800b7e0:	4413      	add	r3, r2
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	9b06      	ldr	r3, [sp, #24]
 800b7e6:	4416      	add	r6, r2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	e78a      	b.n	800b702 <_dtoa_r+0x742>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	e7f5      	b.n	800b7dc <_dtoa_r+0x81c>
 800b7f0:	f1ba 0f00 	cmp.w	sl, #0
 800b7f4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b7f8:	46d3      	mov	fp, sl
 800b7fa:	dc21      	bgt.n	800b840 <_dtoa_r+0x880>
 800b7fc:	9b07      	ldr	r3, [sp, #28]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	dd1e      	ble.n	800b840 <_dtoa_r+0x880>
 800b802:	f1bb 0f00 	cmp.w	fp, #0
 800b806:	f47f addc 	bne.w	800b3c2 <_dtoa_r+0x402>
 800b80a:	4621      	mov	r1, r4
 800b80c:	465b      	mov	r3, fp
 800b80e:	2205      	movs	r2, #5
 800b810:	4648      	mov	r0, r9
 800b812:	f000 fa95 	bl	800bd40 <__multadd>
 800b816:	4601      	mov	r1, r0
 800b818:	4604      	mov	r4, r0
 800b81a:	9801      	ldr	r0, [sp, #4]
 800b81c:	f000 fcea 	bl	800c1f4 <__mcmp>
 800b820:	2800      	cmp	r0, #0
 800b822:	f77f adce 	ble.w	800b3c2 <_dtoa_r+0x402>
 800b826:	463e      	mov	r6, r7
 800b828:	2331      	movs	r3, #49	@ 0x31
 800b82a:	f806 3b01 	strb.w	r3, [r6], #1
 800b82e:	9b05      	ldr	r3, [sp, #20]
 800b830:	3301      	adds	r3, #1
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	e5c9      	b.n	800b3ca <_dtoa_r+0x40a>
 800b836:	f8cd 8014 	str.w	r8, [sp, #20]
 800b83a:	4654      	mov	r4, sl
 800b83c:	4625      	mov	r5, r4
 800b83e:	e7f2      	b.n	800b826 <_dtoa_r+0x866>
 800b840:	9b08      	ldr	r3, [sp, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 8102 	beq.w	800ba4c <_dtoa_r+0xa8c>
 800b848:	2e00      	cmp	r6, #0
 800b84a:	dd05      	ble.n	800b858 <_dtoa_r+0x898>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4632      	mov	r2, r6
 800b850:	4648      	mov	r0, r9
 800b852:	f000 fc63 	bl	800c11c <__lshift>
 800b856:	4605      	mov	r5, r0
 800b858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d058      	beq.n	800b910 <_dtoa_r+0x950>
 800b85e:	6869      	ldr	r1, [r5, #4]
 800b860:	4648      	mov	r0, r9
 800b862:	f000 fa0b 	bl	800bc7c <_Balloc>
 800b866:	4606      	mov	r6, r0
 800b868:	b928      	cbnz	r0, 800b876 <_dtoa_r+0x8b6>
 800b86a:	4b82      	ldr	r3, [pc, #520]	@ (800ba74 <_dtoa_r+0xab4>)
 800b86c:	4602      	mov	r2, r0
 800b86e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b872:	f7ff bbbe 	b.w	800aff2 <_dtoa_r+0x32>
 800b876:	692a      	ldr	r2, [r5, #16]
 800b878:	3202      	adds	r2, #2
 800b87a:	0092      	lsls	r2, r2, #2
 800b87c:	f105 010c 	add.w	r1, r5, #12
 800b880:	300c      	adds	r0, #12
 800b882:	f001 ff19 	bl	800d6b8 <memcpy>
 800b886:	2201      	movs	r2, #1
 800b888:	4631      	mov	r1, r6
 800b88a:	4648      	mov	r0, r9
 800b88c:	f000 fc46 	bl	800c11c <__lshift>
 800b890:	1c7b      	adds	r3, r7, #1
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	eb07 030b 	add.w	r3, r7, fp
 800b898:	9309      	str	r3, [sp, #36]	@ 0x24
 800b89a:	9b02      	ldr	r3, [sp, #8]
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	46a8      	mov	r8, r5
 800b8a2:	9308      	str	r3, [sp, #32]
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	9b04      	ldr	r3, [sp, #16]
 800b8a8:	9801      	ldr	r0, [sp, #4]
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	f103 3bff 	add.w	fp, r3, #4294967295
 800b8b0:	f7ff fafc 	bl	800aeac <quorem>
 800b8b4:	4641      	mov	r1, r8
 800b8b6:	9002      	str	r0, [sp, #8]
 800b8b8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b8bc:	9801      	ldr	r0, [sp, #4]
 800b8be:	f000 fc99 	bl	800c1f4 <__mcmp>
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	9006      	str	r0, [sp, #24]
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	4648      	mov	r0, r9
 800b8ca:	f000 fcaf 	bl	800c22c <__mdiff>
 800b8ce:	68c2      	ldr	r2, [r0, #12]
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	b9fa      	cbnz	r2, 800b914 <_dtoa_r+0x954>
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	9801      	ldr	r0, [sp, #4]
 800b8d8:	f000 fc8c 	bl	800c1f4 <__mcmp>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4648      	mov	r0, r9
 800b8e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b8e4:	f000 fa0a 	bl	800bcfc <_Bfree>
 800b8e8:	9b07      	ldr	r3, [sp, #28]
 800b8ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8ec:	9e04      	ldr	r6, [sp, #16]
 800b8ee:	ea42 0103 	orr.w	r1, r2, r3
 800b8f2:	9b08      	ldr	r3, [sp, #32]
 800b8f4:	4319      	orrs	r1, r3
 800b8f6:	d10f      	bne.n	800b918 <_dtoa_r+0x958>
 800b8f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b8fc:	d028      	beq.n	800b950 <_dtoa_r+0x990>
 800b8fe:	9b06      	ldr	r3, [sp, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dd02      	ble.n	800b90a <_dtoa_r+0x94a>
 800b904:	9b02      	ldr	r3, [sp, #8]
 800b906:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b90a:	f88b a000 	strb.w	sl, [fp]
 800b90e:	e55e      	b.n	800b3ce <_dtoa_r+0x40e>
 800b910:	4628      	mov	r0, r5
 800b912:	e7bd      	b.n	800b890 <_dtoa_r+0x8d0>
 800b914:	2201      	movs	r2, #1
 800b916:	e7e2      	b.n	800b8de <_dtoa_r+0x91e>
 800b918:	9b06      	ldr	r3, [sp, #24]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	db04      	blt.n	800b928 <_dtoa_r+0x968>
 800b91e:	9907      	ldr	r1, [sp, #28]
 800b920:	430b      	orrs	r3, r1
 800b922:	9908      	ldr	r1, [sp, #32]
 800b924:	430b      	orrs	r3, r1
 800b926:	d120      	bne.n	800b96a <_dtoa_r+0x9aa>
 800b928:	2a00      	cmp	r2, #0
 800b92a:	ddee      	ble.n	800b90a <_dtoa_r+0x94a>
 800b92c:	9901      	ldr	r1, [sp, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	4648      	mov	r0, r9
 800b932:	f000 fbf3 	bl	800c11c <__lshift>
 800b936:	4621      	mov	r1, r4
 800b938:	9001      	str	r0, [sp, #4]
 800b93a:	f000 fc5b 	bl	800c1f4 <__mcmp>
 800b93e:	2800      	cmp	r0, #0
 800b940:	dc03      	bgt.n	800b94a <_dtoa_r+0x98a>
 800b942:	d1e2      	bne.n	800b90a <_dtoa_r+0x94a>
 800b944:	f01a 0f01 	tst.w	sl, #1
 800b948:	d0df      	beq.n	800b90a <_dtoa_r+0x94a>
 800b94a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b94e:	d1d9      	bne.n	800b904 <_dtoa_r+0x944>
 800b950:	2339      	movs	r3, #57	@ 0x39
 800b952:	f88b 3000 	strb.w	r3, [fp]
 800b956:	4633      	mov	r3, r6
 800b958:	461e      	mov	r6, r3
 800b95a:	3b01      	subs	r3, #1
 800b95c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b960:	2a39      	cmp	r2, #57	@ 0x39
 800b962:	d052      	beq.n	800ba0a <_dtoa_r+0xa4a>
 800b964:	3201      	adds	r2, #1
 800b966:	701a      	strb	r2, [r3, #0]
 800b968:	e531      	b.n	800b3ce <_dtoa_r+0x40e>
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	dd07      	ble.n	800b97e <_dtoa_r+0x9be>
 800b96e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b972:	d0ed      	beq.n	800b950 <_dtoa_r+0x990>
 800b974:	f10a 0301 	add.w	r3, sl, #1
 800b978:	f88b 3000 	strb.w	r3, [fp]
 800b97c:	e527      	b.n	800b3ce <_dtoa_r+0x40e>
 800b97e:	9b04      	ldr	r3, [sp, #16]
 800b980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b982:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b986:	4293      	cmp	r3, r2
 800b988:	d029      	beq.n	800b9de <_dtoa_r+0xa1e>
 800b98a:	9901      	ldr	r1, [sp, #4]
 800b98c:	2300      	movs	r3, #0
 800b98e:	220a      	movs	r2, #10
 800b990:	4648      	mov	r0, r9
 800b992:	f000 f9d5 	bl	800bd40 <__multadd>
 800b996:	45a8      	cmp	r8, r5
 800b998:	9001      	str	r0, [sp, #4]
 800b99a:	f04f 0300 	mov.w	r3, #0
 800b99e:	f04f 020a 	mov.w	r2, #10
 800b9a2:	4641      	mov	r1, r8
 800b9a4:	4648      	mov	r0, r9
 800b9a6:	d107      	bne.n	800b9b8 <_dtoa_r+0x9f8>
 800b9a8:	f000 f9ca 	bl	800bd40 <__multadd>
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	e776      	b.n	800b8a6 <_dtoa_r+0x8e6>
 800b9b8:	f000 f9c2 	bl	800bd40 <__multadd>
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4680      	mov	r8, r0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	220a      	movs	r2, #10
 800b9c4:	4648      	mov	r0, r9
 800b9c6:	f000 f9bb 	bl	800bd40 <__multadd>
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	e7f0      	b.n	800b9b0 <_dtoa_r+0x9f0>
 800b9ce:	f1bb 0f00 	cmp.w	fp, #0
 800b9d2:	bfcc      	ite	gt
 800b9d4:	465e      	movgt	r6, fp
 800b9d6:	2601      	movle	r6, #1
 800b9d8:	443e      	add	r6, r7
 800b9da:	f04f 0800 	mov.w	r8, #0
 800b9de:	9901      	ldr	r1, [sp, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	4648      	mov	r0, r9
 800b9e4:	f000 fb9a 	bl	800c11c <__lshift>
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	9001      	str	r0, [sp, #4]
 800b9ec:	f000 fc02 	bl	800c1f4 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	dcb0      	bgt.n	800b956 <_dtoa_r+0x996>
 800b9f4:	d102      	bne.n	800b9fc <_dtoa_r+0xa3c>
 800b9f6:	f01a 0f01 	tst.w	sl, #1
 800b9fa:	d1ac      	bne.n	800b956 <_dtoa_r+0x996>
 800b9fc:	4633      	mov	r3, r6
 800b9fe:	461e      	mov	r6, r3
 800ba00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba04:	2a30      	cmp	r2, #48	@ 0x30
 800ba06:	d0fa      	beq.n	800b9fe <_dtoa_r+0xa3e>
 800ba08:	e4e1      	b.n	800b3ce <_dtoa_r+0x40e>
 800ba0a:	429f      	cmp	r7, r3
 800ba0c:	d1a4      	bne.n	800b958 <_dtoa_r+0x998>
 800ba0e:	9b05      	ldr	r3, [sp, #20]
 800ba10:	3301      	adds	r3, #1
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	2331      	movs	r3, #49	@ 0x31
 800ba16:	703b      	strb	r3, [r7, #0]
 800ba18:	e4d9      	b.n	800b3ce <_dtoa_r+0x40e>
 800ba1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba1c:	4f16      	ldr	r7, [pc, #88]	@ (800ba78 <_dtoa_r+0xab8>)
 800ba1e:	b11b      	cbz	r3, 800ba28 <_dtoa_r+0xa68>
 800ba20:	f107 0308 	add.w	r3, r7, #8
 800ba24:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	4638      	mov	r0, r7
 800ba2a:	b011      	add	sp, #68	@ 0x44
 800ba2c:	ecbd 8b02 	vpop	{d8}
 800ba30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	f77f ae2c 	ble.w	800b694 <_dtoa_r+0x6d4>
 800ba3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba40:	2001      	movs	r0, #1
 800ba42:	e64c      	b.n	800b6de <_dtoa_r+0x71e>
 800ba44:	f1bb 0f00 	cmp.w	fp, #0
 800ba48:	f77f aed8 	ble.w	800b7fc <_dtoa_r+0x83c>
 800ba4c:	463e      	mov	r6, r7
 800ba4e:	9801      	ldr	r0, [sp, #4]
 800ba50:	4621      	mov	r1, r4
 800ba52:	f7ff fa2b 	bl	800aeac <quorem>
 800ba56:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ba5a:	f806 ab01 	strb.w	sl, [r6], #1
 800ba5e:	1bf2      	subs	r2, r6, r7
 800ba60:	4593      	cmp	fp, r2
 800ba62:	ddb4      	ble.n	800b9ce <_dtoa_r+0xa0e>
 800ba64:	9901      	ldr	r1, [sp, #4]
 800ba66:	2300      	movs	r3, #0
 800ba68:	220a      	movs	r2, #10
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f000 f968 	bl	800bd40 <__multadd>
 800ba70:	9001      	str	r0, [sp, #4]
 800ba72:	e7ec      	b.n	800ba4e <_dtoa_r+0xa8e>
 800ba74:	0800e535 	.word	0x0800e535
 800ba78:	0800e4b9 	.word	0x0800e4b9

0800ba7c <_free_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4605      	mov	r5, r0
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d041      	beq.n	800bb08 <_free_r+0x8c>
 800ba84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba88:	1f0c      	subs	r4, r1, #4
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	bfb8      	it	lt
 800ba8e:	18e4      	addlt	r4, r4, r3
 800ba90:	f000 f8e8 	bl	800bc64 <__malloc_lock>
 800ba94:	4a1d      	ldr	r2, [pc, #116]	@ (800bb0c <_free_r+0x90>)
 800ba96:	6813      	ldr	r3, [r2, #0]
 800ba98:	b933      	cbnz	r3, 800baa8 <_free_r+0x2c>
 800ba9a:	6063      	str	r3, [r4, #4]
 800ba9c:	6014      	str	r4, [r2, #0]
 800ba9e:	4628      	mov	r0, r5
 800baa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa4:	f000 b8e4 	b.w	800bc70 <__malloc_unlock>
 800baa8:	42a3      	cmp	r3, r4
 800baaa:	d908      	bls.n	800babe <_free_r+0x42>
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	1821      	adds	r1, r4, r0
 800bab0:	428b      	cmp	r3, r1
 800bab2:	bf01      	itttt	eq
 800bab4:	6819      	ldreq	r1, [r3, #0]
 800bab6:	685b      	ldreq	r3, [r3, #4]
 800bab8:	1809      	addeq	r1, r1, r0
 800baba:	6021      	streq	r1, [r4, #0]
 800babc:	e7ed      	b.n	800ba9a <_free_r+0x1e>
 800babe:	461a      	mov	r2, r3
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	b10b      	cbz	r3, 800bac8 <_free_r+0x4c>
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d9fa      	bls.n	800babe <_free_r+0x42>
 800bac8:	6811      	ldr	r1, [r2, #0]
 800baca:	1850      	adds	r0, r2, r1
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d10b      	bne.n	800bae8 <_free_r+0x6c>
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	4401      	add	r1, r0
 800bad4:	1850      	adds	r0, r2, r1
 800bad6:	4283      	cmp	r3, r0
 800bad8:	6011      	str	r1, [r2, #0]
 800bada:	d1e0      	bne.n	800ba9e <_free_r+0x22>
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	6053      	str	r3, [r2, #4]
 800bae2:	4408      	add	r0, r1
 800bae4:	6010      	str	r0, [r2, #0]
 800bae6:	e7da      	b.n	800ba9e <_free_r+0x22>
 800bae8:	d902      	bls.n	800baf0 <_free_r+0x74>
 800baea:	230c      	movs	r3, #12
 800baec:	602b      	str	r3, [r5, #0]
 800baee:	e7d6      	b.n	800ba9e <_free_r+0x22>
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	1821      	adds	r1, r4, r0
 800baf4:	428b      	cmp	r3, r1
 800baf6:	bf04      	itt	eq
 800baf8:	6819      	ldreq	r1, [r3, #0]
 800bafa:	685b      	ldreq	r3, [r3, #4]
 800bafc:	6063      	str	r3, [r4, #4]
 800bafe:	bf04      	itt	eq
 800bb00:	1809      	addeq	r1, r1, r0
 800bb02:	6021      	streq	r1, [r4, #0]
 800bb04:	6054      	str	r4, [r2, #4]
 800bb06:	e7ca      	b.n	800ba9e <_free_r+0x22>
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	bf00      	nop
 800bb0c:	240006d4 	.word	0x240006d4

0800bb10 <malloc>:
 800bb10:	4b02      	ldr	r3, [pc, #8]	@ (800bb1c <malloc+0xc>)
 800bb12:	4601      	mov	r1, r0
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	f000 b825 	b.w	800bb64 <_malloc_r>
 800bb1a:	bf00      	nop
 800bb1c:	2400001c 	.word	0x2400001c

0800bb20 <sbrk_aligned>:
 800bb20:	b570      	push	{r4, r5, r6, lr}
 800bb22:	4e0f      	ldr	r6, [pc, #60]	@ (800bb60 <sbrk_aligned+0x40>)
 800bb24:	460c      	mov	r4, r1
 800bb26:	6831      	ldr	r1, [r6, #0]
 800bb28:	4605      	mov	r5, r0
 800bb2a:	b911      	cbnz	r1, 800bb32 <sbrk_aligned+0x12>
 800bb2c:	f001 fdb4 	bl	800d698 <_sbrk_r>
 800bb30:	6030      	str	r0, [r6, #0]
 800bb32:	4621      	mov	r1, r4
 800bb34:	4628      	mov	r0, r5
 800bb36:	f001 fdaf 	bl	800d698 <_sbrk_r>
 800bb3a:	1c43      	adds	r3, r0, #1
 800bb3c:	d103      	bne.n	800bb46 <sbrk_aligned+0x26>
 800bb3e:	f04f 34ff 	mov.w	r4, #4294967295
 800bb42:	4620      	mov	r0, r4
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	1cc4      	adds	r4, r0, #3
 800bb48:	f024 0403 	bic.w	r4, r4, #3
 800bb4c:	42a0      	cmp	r0, r4
 800bb4e:	d0f8      	beq.n	800bb42 <sbrk_aligned+0x22>
 800bb50:	1a21      	subs	r1, r4, r0
 800bb52:	4628      	mov	r0, r5
 800bb54:	f001 fda0 	bl	800d698 <_sbrk_r>
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d1f2      	bne.n	800bb42 <sbrk_aligned+0x22>
 800bb5c:	e7ef      	b.n	800bb3e <sbrk_aligned+0x1e>
 800bb5e:	bf00      	nop
 800bb60:	240006d0 	.word	0x240006d0

0800bb64 <_malloc_r>:
 800bb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb68:	1ccd      	adds	r5, r1, #3
 800bb6a:	f025 0503 	bic.w	r5, r5, #3
 800bb6e:	3508      	adds	r5, #8
 800bb70:	2d0c      	cmp	r5, #12
 800bb72:	bf38      	it	cc
 800bb74:	250c      	movcc	r5, #12
 800bb76:	2d00      	cmp	r5, #0
 800bb78:	4606      	mov	r6, r0
 800bb7a:	db01      	blt.n	800bb80 <_malloc_r+0x1c>
 800bb7c:	42a9      	cmp	r1, r5
 800bb7e:	d904      	bls.n	800bb8a <_malloc_r+0x26>
 800bb80:	230c      	movs	r3, #12
 800bb82:	6033      	str	r3, [r6, #0]
 800bb84:	2000      	movs	r0, #0
 800bb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc60 <_malloc_r+0xfc>
 800bb8e:	f000 f869 	bl	800bc64 <__malloc_lock>
 800bb92:	f8d8 3000 	ldr.w	r3, [r8]
 800bb96:	461c      	mov	r4, r3
 800bb98:	bb44      	cbnz	r4, 800bbec <_malloc_r+0x88>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff ffbf 	bl	800bb20 <sbrk_aligned>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	4604      	mov	r4, r0
 800bba6:	d158      	bne.n	800bc5a <_malloc_r+0xf6>
 800bba8:	f8d8 4000 	ldr.w	r4, [r8]
 800bbac:	4627      	mov	r7, r4
 800bbae:	2f00      	cmp	r7, #0
 800bbb0:	d143      	bne.n	800bc3a <_malloc_r+0xd6>
 800bbb2:	2c00      	cmp	r4, #0
 800bbb4:	d04b      	beq.n	800bc4e <_malloc_r+0xea>
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	4639      	mov	r1, r7
 800bbba:	4630      	mov	r0, r6
 800bbbc:	eb04 0903 	add.w	r9, r4, r3
 800bbc0:	f001 fd6a 	bl	800d698 <_sbrk_r>
 800bbc4:	4581      	cmp	r9, r0
 800bbc6:	d142      	bne.n	800bc4e <_malloc_r+0xea>
 800bbc8:	6821      	ldr	r1, [r4, #0]
 800bbca:	1a6d      	subs	r5, r5, r1
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f7ff ffa6 	bl	800bb20 <sbrk_aligned>
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d03a      	beq.n	800bc4e <_malloc_r+0xea>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	442b      	add	r3, r5
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	f8d8 3000 	ldr.w	r3, [r8]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	bb62      	cbnz	r2, 800bc40 <_malloc_r+0xdc>
 800bbe6:	f8c8 7000 	str.w	r7, [r8]
 800bbea:	e00f      	b.n	800bc0c <_malloc_r+0xa8>
 800bbec:	6822      	ldr	r2, [r4, #0]
 800bbee:	1b52      	subs	r2, r2, r5
 800bbf0:	d420      	bmi.n	800bc34 <_malloc_r+0xd0>
 800bbf2:	2a0b      	cmp	r2, #11
 800bbf4:	d917      	bls.n	800bc26 <_malloc_r+0xc2>
 800bbf6:	1961      	adds	r1, r4, r5
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	6025      	str	r5, [r4, #0]
 800bbfc:	bf18      	it	ne
 800bbfe:	6059      	strne	r1, [r3, #4]
 800bc00:	6863      	ldr	r3, [r4, #4]
 800bc02:	bf08      	it	eq
 800bc04:	f8c8 1000 	streq.w	r1, [r8]
 800bc08:	5162      	str	r2, [r4, r5]
 800bc0a:	604b      	str	r3, [r1, #4]
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f000 f82f 	bl	800bc70 <__malloc_unlock>
 800bc12:	f104 000b 	add.w	r0, r4, #11
 800bc16:	1d23      	adds	r3, r4, #4
 800bc18:	f020 0007 	bic.w	r0, r0, #7
 800bc1c:	1ac2      	subs	r2, r0, r3
 800bc1e:	bf1c      	itt	ne
 800bc20:	1a1b      	subne	r3, r3, r0
 800bc22:	50a3      	strne	r3, [r4, r2]
 800bc24:	e7af      	b.n	800bb86 <_malloc_r+0x22>
 800bc26:	6862      	ldr	r2, [r4, #4]
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	bf0c      	ite	eq
 800bc2c:	f8c8 2000 	streq.w	r2, [r8]
 800bc30:	605a      	strne	r2, [r3, #4]
 800bc32:	e7eb      	b.n	800bc0c <_malloc_r+0xa8>
 800bc34:	4623      	mov	r3, r4
 800bc36:	6864      	ldr	r4, [r4, #4]
 800bc38:	e7ae      	b.n	800bb98 <_malloc_r+0x34>
 800bc3a:	463c      	mov	r4, r7
 800bc3c:	687f      	ldr	r7, [r7, #4]
 800bc3e:	e7b6      	b.n	800bbae <_malloc_r+0x4a>
 800bc40:	461a      	mov	r2, r3
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	42a3      	cmp	r3, r4
 800bc46:	d1fb      	bne.n	800bc40 <_malloc_r+0xdc>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	6053      	str	r3, [r2, #4]
 800bc4c:	e7de      	b.n	800bc0c <_malloc_r+0xa8>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	6033      	str	r3, [r6, #0]
 800bc52:	4630      	mov	r0, r6
 800bc54:	f000 f80c 	bl	800bc70 <__malloc_unlock>
 800bc58:	e794      	b.n	800bb84 <_malloc_r+0x20>
 800bc5a:	6005      	str	r5, [r0, #0]
 800bc5c:	e7d6      	b.n	800bc0c <_malloc_r+0xa8>
 800bc5e:	bf00      	nop
 800bc60:	240006d4 	.word	0x240006d4

0800bc64 <__malloc_lock>:
 800bc64:	4801      	ldr	r0, [pc, #4]	@ (800bc6c <__malloc_lock+0x8>)
 800bc66:	f7ff b918 	b.w	800ae9a <__retarget_lock_acquire_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	240006cc 	.word	0x240006cc

0800bc70 <__malloc_unlock>:
 800bc70:	4801      	ldr	r0, [pc, #4]	@ (800bc78 <__malloc_unlock+0x8>)
 800bc72:	f7ff b913 	b.w	800ae9c <__retarget_lock_release_recursive>
 800bc76:	bf00      	nop
 800bc78:	240006cc 	.word	0x240006cc

0800bc7c <_Balloc>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	69c6      	ldr	r6, [r0, #28]
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	b976      	cbnz	r6, 800bca4 <_Balloc+0x28>
 800bc86:	2010      	movs	r0, #16
 800bc88:	f7ff ff42 	bl	800bb10 <malloc>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	61e0      	str	r0, [r4, #28]
 800bc90:	b920      	cbnz	r0, 800bc9c <_Balloc+0x20>
 800bc92:	4b18      	ldr	r3, [pc, #96]	@ (800bcf4 <_Balloc+0x78>)
 800bc94:	4818      	ldr	r0, [pc, #96]	@ (800bcf8 <_Balloc+0x7c>)
 800bc96:	216b      	movs	r1, #107	@ 0x6b
 800bc98:	f001 fd26 	bl	800d6e8 <__assert_func>
 800bc9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bca0:	6006      	str	r6, [r0, #0]
 800bca2:	60c6      	str	r6, [r0, #12]
 800bca4:	69e6      	ldr	r6, [r4, #28]
 800bca6:	68f3      	ldr	r3, [r6, #12]
 800bca8:	b183      	cbz	r3, 800bccc <_Balloc+0x50>
 800bcaa:	69e3      	ldr	r3, [r4, #28]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcb2:	b9b8      	cbnz	r0, 800bce4 <_Balloc+0x68>
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	fa01 f605 	lsl.w	r6, r1, r5
 800bcba:	1d72      	adds	r2, r6, #5
 800bcbc:	0092      	lsls	r2, r2, #2
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f001 fd30 	bl	800d724 <_calloc_r>
 800bcc4:	b160      	cbz	r0, 800bce0 <_Balloc+0x64>
 800bcc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcca:	e00e      	b.n	800bcea <_Balloc+0x6e>
 800bccc:	2221      	movs	r2, #33	@ 0x21
 800bcce:	2104      	movs	r1, #4
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f001 fd27 	bl	800d724 <_calloc_r>
 800bcd6:	69e3      	ldr	r3, [r4, #28]
 800bcd8:	60f0      	str	r0, [r6, #12]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e4      	bne.n	800bcaa <_Balloc+0x2e>
 800bce0:	2000      	movs	r0, #0
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
 800bce4:	6802      	ldr	r2, [r0, #0]
 800bce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcea:	2300      	movs	r3, #0
 800bcec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcf0:	e7f7      	b.n	800bce2 <_Balloc+0x66>
 800bcf2:	bf00      	nop
 800bcf4:	0800e4c6 	.word	0x0800e4c6
 800bcf8:	0800e546 	.word	0x0800e546

0800bcfc <_Bfree>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	69c6      	ldr	r6, [r0, #28]
 800bd00:	4605      	mov	r5, r0
 800bd02:	460c      	mov	r4, r1
 800bd04:	b976      	cbnz	r6, 800bd24 <_Bfree+0x28>
 800bd06:	2010      	movs	r0, #16
 800bd08:	f7ff ff02 	bl	800bb10 <malloc>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	61e8      	str	r0, [r5, #28]
 800bd10:	b920      	cbnz	r0, 800bd1c <_Bfree+0x20>
 800bd12:	4b09      	ldr	r3, [pc, #36]	@ (800bd38 <_Bfree+0x3c>)
 800bd14:	4809      	ldr	r0, [pc, #36]	@ (800bd3c <_Bfree+0x40>)
 800bd16:	218f      	movs	r1, #143	@ 0x8f
 800bd18:	f001 fce6 	bl	800d6e8 <__assert_func>
 800bd1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd20:	6006      	str	r6, [r0, #0]
 800bd22:	60c6      	str	r6, [r0, #12]
 800bd24:	b13c      	cbz	r4, 800bd36 <_Bfree+0x3a>
 800bd26:	69eb      	ldr	r3, [r5, #28]
 800bd28:	6862      	ldr	r2, [r4, #4]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd30:	6021      	str	r1, [r4, #0]
 800bd32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd36:	bd70      	pop	{r4, r5, r6, pc}
 800bd38:	0800e4c6 	.word	0x0800e4c6
 800bd3c:	0800e546 	.word	0x0800e546

0800bd40 <__multadd>:
 800bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd44:	690d      	ldr	r5, [r1, #16]
 800bd46:	4607      	mov	r7, r0
 800bd48:	460c      	mov	r4, r1
 800bd4a:	461e      	mov	r6, r3
 800bd4c:	f101 0c14 	add.w	ip, r1, #20
 800bd50:	2000      	movs	r0, #0
 800bd52:	f8dc 3000 	ldr.w	r3, [ip]
 800bd56:	b299      	uxth	r1, r3
 800bd58:	fb02 6101 	mla	r1, r2, r1, r6
 800bd5c:	0c1e      	lsrs	r6, r3, #16
 800bd5e:	0c0b      	lsrs	r3, r1, #16
 800bd60:	fb02 3306 	mla	r3, r2, r6, r3
 800bd64:	b289      	uxth	r1, r1
 800bd66:	3001      	adds	r0, #1
 800bd68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd6c:	4285      	cmp	r5, r0
 800bd6e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd76:	dcec      	bgt.n	800bd52 <__multadd+0x12>
 800bd78:	b30e      	cbz	r6, 800bdbe <__multadd+0x7e>
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	dc19      	bgt.n	800bdb4 <__multadd+0x74>
 800bd80:	6861      	ldr	r1, [r4, #4]
 800bd82:	4638      	mov	r0, r7
 800bd84:	3101      	adds	r1, #1
 800bd86:	f7ff ff79 	bl	800bc7c <_Balloc>
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	b928      	cbnz	r0, 800bd9a <__multadd+0x5a>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc4 <__multadd+0x84>)
 800bd92:	480d      	ldr	r0, [pc, #52]	@ (800bdc8 <__multadd+0x88>)
 800bd94:	21ba      	movs	r1, #186	@ 0xba
 800bd96:	f001 fca7 	bl	800d6e8 <__assert_func>
 800bd9a:	6922      	ldr	r2, [r4, #16]
 800bd9c:	3202      	adds	r2, #2
 800bd9e:	f104 010c 	add.w	r1, r4, #12
 800bda2:	0092      	lsls	r2, r2, #2
 800bda4:	300c      	adds	r0, #12
 800bda6:	f001 fc87 	bl	800d6b8 <memcpy>
 800bdaa:	4621      	mov	r1, r4
 800bdac:	4638      	mov	r0, r7
 800bdae:	f7ff ffa5 	bl	800bcfc <_Bfree>
 800bdb2:	4644      	mov	r4, r8
 800bdb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdb8:	3501      	adds	r5, #1
 800bdba:	615e      	str	r6, [r3, #20]
 800bdbc:	6125      	str	r5, [r4, #16]
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc4:	0800e535 	.word	0x0800e535
 800bdc8:	0800e546 	.word	0x0800e546

0800bdcc <__s2b>:
 800bdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	4615      	mov	r5, r2
 800bdd4:	461f      	mov	r7, r3
 800bdd6:	2209      	movs	r2, #9
 800bdd8:	3308      	adds	r3, #8
 800bdda:	4606      	mov	r6, r0
 800bddc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bde0:	2100      	movs	r1, #0
 800bde2:	2201      	movs	r2, #1
 800bde4:	429a      	cmp	r2, r3
 800bde6:	db09      	blt.n	800bdfc <__s2b+0x30>
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7ff ff47 	bl	800bc7c <_Balloc>
 800bdee:	b940      	cbnz	r0, 800be02 <__s2b+0x36>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	4b19      	ldr	r3, [pc, #100]	@ (800be58 <__s2b+0x8c>)
 800bdf4:	4819      	ldr	r0, [pc, #100]	@ (800be5c <__s2b+0x90>)
 800bdf6:	21d3      	movs	r1, #211	@ 0xd3
 800bdf8:	f001 fc76 	bl	800d6e8 <__assert_func>
 800bdfc:	0052      	lsls	r2, r2, #1
 800bdfe:	3101      	adds	r1, #1
 800be00:	e7f0      	b.n	800bde4 <__s2b+0x18>
 800be02:	9b08      	ldr	r3, [sp, #32]
 800be04:	6143      	str	r3, [r0, #20]
 800be06:	2d09      	cmp	r5, #9
 800be08:	f04f 0301 	mov.w	r3, #1
 800be0c:	6103      	str	r3, [r0, #16]
 800be0e:	dd16      	ble.n	800be3e <__s2b+0x72>
 800be10:	f104 0909 	add.w	r9, r4, #9
 800be14:	46c8      	mov	r8, r9
 800be16:	442c      	add	r4, r5
 800be18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be1c:	4601      	mov	r1, r0
 800be1e:	3b30      	subs	r3, #48	@ 0x30
 800be20:	220a      	movs	r2, #10
 800be22:	4630      	mov	r0, r6
 800be24:	f7ff ff8c 	bl	800bd40 <__multadd>
 800be28:	45a0      	cmp	r8, r4
 800be2a:	d1f5      	bne.n	800be18 <__s2b+0x4c>
 800be2c:	f1a5 0408 	sub.w	r4, r5, #8
 800be30:	444c      	add	r4, r9
 800be32:	1b2d      	subs	r5, r5, r4
 800be34:	1963      	adds	r3, r4, r5
 800be36:	42bb      	cmp	r3, r7
 800be38:	db04      	blt.n	800be44 <__s2b+0x78>
 800be3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be3e:	340a      	adds	r4, #10
 800be40:	2509      	movs	r5, #9
 800be42:	e7f6      	b.n	800be32 <__s2b+0x66>
 800be44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be48:	4601      	mov	r1, r0
 800be4a:	3b30      	subs	r3, #48	@ 0x30
 800be4c:	220a      	movs	r2, #10
 800be4e:	4630      	mov	r0, r6
 800be50:	f7ff ff76 	bl	800bd40 <__multadd>
 800be54:	e7ee      	b.n	800be34 <__s2b+0x68>
 800be56:	bf00      	nop
 800be58:	0800e535 	.word	0x0800e535
 800be5c:	0800e546 	.word	0x0800e546

0800be60 <__hi0bits>:
 800be60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be64:	4603      	mov	r3, r0
 800be66:	bf36      	itet	cc
 800be68:	0403      	lslcc	r3, r0, #16
 800be6a:	2000      	movcs	r0, #0
 800be6c:	2010      	movcc	r0, #16
 800be6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be72:	bf3c      	itt	cc
 800be74:	021b      	lslcc	r3, r3, #8
 800be76:	3008      	addcc	r0, #8
 800be78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be7c:	bf3c      	itt	cc
 800be7e:	011b      	lslcc	r3, r3, #4
 800be80:	3004      	addcc	r0, #4
 800be82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be86:	bf3c      	itt	cc
 800be88:	009b      	lslcc	r3, r3, #2
 800be8a:	3002      	addcc	r0, #2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	db05      	blt.n	800be9c <__hi0bits+0x3c>
 800be90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be94:	f100 0001 	add.w	r0, r0, #1
 800be98:	bf08      	it	eq
 800be9a:	2020      	moveq	r0, #32
 800be9c:	4770      	bx	lr

0800be9e <__lo0bits>:
 800be9e:	6803      	ldr	r3, [r0, #0]
 800bea0:	4602      	mov	r2, r0
 800bea2:	f013 0007 	ands.w	r0, r3, #7
 800bea6:	d00b      	beq.n	800bec0 <__lo0bits+0x22>
 800bea8:	07d9      	lsls	r1, r3, #31
 800beaa:	d421      	bmi.n	800bef0 <__lo0bits+0x52>
 800beac:	0798      	lsls	r0, r3, #30
 800beae:	bf49      	itett	mi
 800beb0:	085b      	lsrmi	r3, r3, #1
 800beb2:	089b      	lsrpl	r3, r3, #2
 800beb4:	2001      	movmi	r0, #1
 800beb6:	6013      	strmi	r3, [r2, #0]
 800beb8:	bf5c      	itt	pl
 800beba:	6013      	strpl	r3, [r2, #0]
 800bebc:	2002      	movpl	r0, #2
 800bebe:	4770      	bx	lr
 800bec0:	b299      	uxth	r1, r3
 800bec2:	b909      	cbnz	r1, 800bec8 <__lo0bits+0x2a>
 800bec4:	0c1b      	lsrs	r3, r3, #16
 800bec6:	2010      	movs	r0, #16
 800bec8:	b2d9      	uxtb	r1, r3
 800beca:	b909      	cbnz	r1, 800bed0 <__lo0bits+0x32>
 800becc:	3008      	adds	r0, #8
 800bece:	0a1b      	lsrs	r3, r3, #8
 800bed0:	0719      	lsls	r1, r3, #28
 800bed2:	bf04      	itt	eq
 800bed4:	091b      	lsreq	r3, r3, #4
 800bed6:	3004      	addeq	r0, #4
 800bed8:	0799      	lsls	r1, r3, #30
 800beda:	bf04      	itt	eq
 800bedc:	089b      	lsreq	r3, r3, #2
 800bede:	3002      	addeq	r0, #2
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	d403      	bmi.n	800beec <__lo0bits+0x4e>
 800bee4:	085b      	lsrs	r3, r3, #1
 800bee6:	f100 0001 	add.w	r0, r0, #1
 800beea:	d003      	beq.n	800bef4 <__lo0bits+0x56>
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	4770      	bx	lr
 800bef0:	2000      	movs	r0, #0
 800bef2:	4770      	bx	lr
 800bef4:	2020      	movs	r0, #32
 800bef6:	4770      	bx	lr

0800bef8 <__i2b>:
 800bef8:	b510      	push	{r4, lr}
 800befa:	460c      	mov	r4, r1
 800befc:	2101      	movs	r1, #1
 800befe:	f7ff febd 	bl	800bc7c <_Balloc>
 800bf02:	4602      	mov	r2, r0
 800bf04:	b928      	cbnz	r0, 800bf12 <__i2b+0x1a>
 800bf06:	4b05      	ldr	r3, [pc, #20]	@ (800bf1c <__i2b+0x24>)
 800bf08:	4805      	ldr	r0, [pc, #20]	@ (800bf20 <__i2b+0x28>)
 800bf0a:	f240 1145 	movw	r1, #325	@ 0x145
 800bf0e:	f001 fbeb 	bl	800d6e8 <__assert_func>
 800bf12:	2301      	movs	r3, #1
 800bf14:	6144      	str	r4, [r0, #20]
 800bf16:	6103      	str	r3, [r0, #16]
 800bf18:	bd10      	pop	{r4, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0800e535 	.word	0x0800e535
 800bf20:	0800e546 	.word	0x0800e546

0800bf24 <__multiply>:
 800bf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf28:	4617      	mov	r7, r2
 800bf2a:	690a      	ldr	r2, [r1, #16]
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	bfa8      	it	ge
 800bf32:	463b      	movge	r3, r7
 800bf34:	4689      	mov	r9, r1
 800bf36:	bfa4      	itt	ge
 800bf38:	460f      	movge	r7, r1
 800bf3a:	4699      	movge	r9, r3
 800bf3c:	693d      	ldr	r5, [r7, #16]
 800bf3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	eb05 060a 	add.w	r6, r5, sl
 800bf4a:	42b3      	cmp	r3, r6
 800bf4c:	b085      	sub	sp, #20
 800bf4e:	bfb8      	it	lt
 800bf50:	3101      	addlt	r1, #1
 800bf52:	f7ff fe93 	bl	800bc7c <_Balloc>
 800bf56:	b930      	cbnz	r0, 800bf66 <__multiply+0x42>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	4b41      	ldr	r3, [pc, #260]	@ (800c060 <__multiply+0x13c>)
 800bf5c:	4841      	ldr	r0, [pc, #260]	@ (800c064 <__multiply+0x140>)
 800bf5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf62:	f001 fbc1 	bl	800d6e8 <__assert_func>
 800bf66:	f100 0414 	add.w	r4, r0, #20
 800bf6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bf6e:	4623      	mov	r3, r4
 800bf70:	2200      	movs	r2, #0
 800bf72:	4573      	cmp	r3, lr
 800bf74:	d320      	bcc.n	800bfb8 <__multiply+0x94>
 800bf76:	f107 0814 	add.w	r8, r7, #20
 800bf7a:	f109 0114 	add.w	r1, r9, #20
 800bf7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bf82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bf86:	9302      	str	r3, [sp, #8]
 800bf88:	1beb      	subs	r3, r5, r7
 800bf8a:	3b15      	subs	r3, #21
 800bf8c:	f023 0303 	bic.w	r3, r3, #3
 800bf90:	3304      	adds	r3, #4
 800bf92:	3715      	adds	r7, #21
 800bf94:	42bd      	cmp	r5, r7
 800bf96:	bf38      	it	cc
 800bf98:	2304      	movcc	r3, #4
 800bf9a:	9301      	str	r3, [sp, #4]
 800bf9c:	9b02      	ldr	r3, [sp, #8]
 800bf9e:	9103      	str	r1, [sp, #12]
 800bfa0:	428b      	cmp	r3, r1
 800bfa2:	d80c      	bhi.n	800bfbe <__multiply+0x9a>
 800bfa4:	2e00      	cmp	r6, #0
 800bfa6:	dd03      	ble.n	800bfb0 <__multiply+0x8c>
 800bfa8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d055      	beq.n	800c05c <__multiply+0x138>
 800bfb0:	6106      	str	r6, [r0, #16]
 800bfb2:	b005      	add	sp, #20
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	f843 2b04 	str.w	r2, [r3], #4
 800bfbc:	e7d9      	b.n	800bf72 <__multiply+0x4e>
 800bfbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfc2:	f1ba 0f00 	cmp.w	sl, #0
 800bfc6:	d01f      	beq.n	800c008 <__multiply+0xe4>
 800bfc8:	46c4      	mov	ip, r8
 800bfca:	46a1      	mov	r9, r4
 800bfcc:	2700      	movs	r7, #0
 800bfce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfd2:	f8d9 3000 	ldr.w	r3, [r9]
 800bfd6:	fa1f fb82 	uxth.w	fp, r2
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfe0:	443b      	add	r3, r7
 800bfe2:	f8d9 7000 	ldr.w	r7, [r9]
 800bfe6:	0c12      	lsrs	r2, r2, #16
 800bfe8:	0c3f      	lsrs	r7, r7, #16
 800bfea:	fb0a 7202 	mla	r2, sl, r2, r7
 800bfee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bff8:	4565      	cmp	r5, ip
 800bffa:	f849 3b04 	str.w	r3, [r9], #4
 800bffe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c002:	d8e4      	bhi.n	800bfce <__multiply+0xaa>
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	50e7      	str	r7, [r4, r3]
 800c008:	9b03      	ldr	r3, [sp, #12]
 800c00a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c00e:	3104      	adds	r1, #4
 800c010:	f1b9 0f00 	cmp.w	r9, #0
 800c014:	d020      	beq.n	800c058 <__multiply+0x134>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	4647      	mov	r7, r8
 800c01a:	46a4      	mov	ip, r4
 800c01c:	f04f 0a00 	mov.w	sl, #0
 800c020:	f8b7 b000 	ldrh.w	fp, [r7]
 800c024:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c028:	fb09 220b 	mla	r2, r9, fp, r2
 800c02c:	4452      	add	r2, sl
 800c02e:	b29b      	uxth	r3, r3
 800c030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c034:	f84c 3b04 	str.w	r3, [ip], #4
 800c038:	f857 3b04 	ldr.w	r3, [r7], #4
 800c03c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c040:	f8bc 3000 	ldrh.w	r3, [ip]
 800c044:	fb09 330a 	mla	r3, r9, sl, r3
 800c048:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c04c:	42bd      	cmp	r5, r7
 800c04e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c052:	d8e5      	bhi.n	800c020 <__multiply+0xfc>
 800c054:	9a01      	ldr	r2, [sp, #4]
 800c056:	50a3      	str	r3, [r4, r2]
 800c058:	3404      	adds	r4, #4
 800c05a:	e79f      	b.n	800bf9c <__multiply+0x78>
 800c05c:	3e01      	subs	r6, #1
 800c05e:	e7a1      	b.n	800bfa4 <__multiply+0x80>
 800c060:	0800e535 	.word	0x0800e535
 800c064:	0800e546 	.word	0x0800e546

0800c068 <__pow5mult>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	4615      	mov	r5, r2
 800c06e:	f012 0203 	ands.w	r2, r2, #3
 800c072:	4607      	mov	r7, r0
 800c074:	460e      	mov	r6, r1
 800c076:	d007      	beq.n	800c088 <__pow5mult+0x20>
 800c078:	4c25      	ldr	r4, [pc, #148]	@ (800c110 <__pow5mult+0xa8>)
 800c07a:	3a01      	subs	r2, #1
 800c07c:	2300      	movs	r3, #0
 800c07e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c082:	f7ff fe5d 	bl	800bd40 <__multadd>
 800c086:	4606      	mov	r6, r0
 800c088:	10ad      	asrs	r5, r5, #2
 800c08a:	d03d      	beq.n	800c108 <__pow5mult+0xa0>
 800c08c:	69fc      	ldr	r4, [r7, #28]
 800c08e:	b97c      	cbnz	r4, 800c0b0 <__pow5mult+0x48>
 800c090:	2010      	movs	r0, #16
 800c092:	f7ff fd3d 	bl	800bb10 <malloc>
 800c096:	4602      	mov	r2, r0
 800c098:	61f8      	str	r0, [r7, #28]
 800c09a:	b928      	cbnz	r0, 800c0a8 <__pow5mult+0x40>
 800c09c:	4b1d      	ldr	r3, [pc, #116]	@ (800c114 <__pow5mult+0xac>)
 800c09e:	481e      	ldr	r0, [pc, #120]	@ (800c118 <__pow5mult+0xb0>)
 800c0a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0a4:	f001 fb20 	bl	800d6e8 <__assert_func>
 800c0a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0ac:	6004      	str	r4, [r0, #0]
 800c0ae:	60c4      	str	r4, [r0, #12]
 800c0b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0b8:	b94c      	cbnz	r4, 800c0ce <__pow5mult+0x66>
 800c0ba:	f240 2171 	movw	r1, #625	@ 0x271
 800c0be:	4638      	mov	r0, r7
 800c0c0:	f7ff ff1a 	bl	800bef8 <__i2b>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	6003      	str	r3, [r0, #0]
 800c0ce:	f04f 0900 	mov.w	r9, #0
 800c0d2:	07eb      	lsls	r3, r5, #31
 800c0d4:	d50a      	bpl.n	800c0ec <__pow5mult+0x84>
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4638      	mov	r0, r7
 800c0dc:	f7ff ff22 	bl	800bf24 <__multiply>
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff fe09 	bl	800bcfc <_Bfree>
 800c0ea:	4646      	mov	r6, r8
 800c0ec:	106d      	asrs	r5, r5, #1
 800c0ee:	d00b      	beq.n	800c108 <__pow5mult+0xa0>
 800c0f0:	6820      	ldr	r0, [r4, #0]
 800c0f2:	b938      	cbnz	r0, 800c104 <__pow5mult+0x9c>
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	f7ff ff13 	bl	800bf24 <__multiply>
 800c0fe:	6020      	str	r0, [r4, #0]
 800c100:	f8c0 9000 	str.w	r9, [r0]
 800c104:	4604      	mov	r4, r0
 800c106:	e7e4      	b.n	800c0d2 <__pow5mult+0x6a>
 800c108:	4630      	mov	r0, r6
 800c10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10e:	bf00      	nop
 800c110:	0800e658 	.word	0x0800e658
 800c114:	0800e4c6 	.word	0x0800e4c6
 800c118:	0800e546 	.word	0x0800e546

0800c11c <__lshift>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	6849      	ldr	r1, [r1, #4]
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	4607      	mov	r7, r0
 800c12e:	4691      	mov	r9, r2
 800c130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c134:	f108 0601 	add.w	r6, r8, #1
 800c138:	42b3      	cmp	r3, r6
 800c13a:	db0b      	blt.n	800c154 <__lshift+0x38>
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff fd9d 	bl	800bc7c <_Balloc>
 800c142:	4605      	mov	r5, r0
 800c144:	b948      	cbnz	r0, 800c15a <__lshift+0x3e>
 800c146:	4602      	mov	r2, r0
 800c148:	4b28      	ldr	r3, [pc, #160]	@ (800c1ec <__lshift+0xd0>)
 800c14a:	4829      	ldr	r0, [pc, #164]	@ (800c1f0 <__lshift+0xd4>)
 800c14c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c150:	f001 faca 	bl	800d6e8 <__assert_func>
 800c154:	3101      	adds	r1, #1
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	e7ee      	b.n	800c138 <__lshift+0x1c>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f100 0114 	add.w	r1, r0, #20
 800c160:	f100 0210 	add.w	r2, r0, #16
 800c164:	4618      	mov	r0, r3
 800c166:	4553      	cmp	r3, sl
 800c168:	db33      	blt.n	800c1d2 <__lshift+0xb6>
 800c16a:	6920      	ldr	r0, [r4, #16]
 800c16c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c170:	f104 0314 	add.w	r3, r4, #20
 800c174:	f019 091f 	ands.w	r9, r9, #31
 800c178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c17c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c180:	d02b      	beq.n	800c1da <__lshift+0xbe>
 800c182:	f1c9 0e20 	rsb	lr, r9, #32
 800c186:	468a      	mov	sl, r1
 800c188:	2200      	movs	r2, #0
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	fa00 f009 	lsl.w	r0, r0, r9
 800c190:	4310      	orrs	r0, r2
 800c192:	f84a 0b04 	str.w	r0, [sl], #4
 800c196:	f853 2b04 	ldr.w	r2, [r3], #4
 800c19a:	459c      	cmp	ip, r3
 800c19c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1a0:	d8f3      	bhi.n	800c18a <__lshift+0x6e>
 800c1a2:	ebac 0304 	sub.w	r3, ip, r4
 800c1a6:	3b15      	subs	r3, #21
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	f104 0015 	add.w	r0, r4, #21
 800c1b2:	4560      	cmp	r0, ip
 800c1b4:	bf88      	it	hi
 800c1b6:	2304      	movhi	r3, #4
 800c1b8:	50ca      	str	r2, [r1, r3]
 800c1ba:	b10a      	cbz	r2, 800c1c0 <__lshift+0xa4>
 800c1bc:	f108 0602 	add.w	r6, r8, #2
 800c1c0:	3e01      	subs	r6, #1
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	612e      	str	r6, [r5, #16]
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	f7ff fd98 	bl	800bcfc <_Bfree>
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	e7c5      	b.n	800c166 <__lshift+0x4a>
 800c1da:	3904      	subs	r1, #4
 800c1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1e4:	459c      	cmp	ip, r3
 800c1e6:	d8f9      	bhi.n	800c1dc <__lshift+0xc0>
 800c1e8:	e7ea      	b.n	800c1c0 <__lshift+0xa4>
 800c1ea:	bf00      	nop
 800c1ec:	0800e535 	.word	0x0800e535
 800c1f0:	0800e546 	.word	0x0800e546

0800c1f4 <__mcmp>:
 800c1f4:	690a      	ldr	r2, [r1, #16]
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	6900      	ldr	r0, [r0, #16]
 800c1fa:	1a80      	subs	r0, r0, r2
 800c1fc:	b530      	push	{r4, r5, lr}
 800c1fe:	d10e      	bne.n	800c21e <__mcmp+0x2a>
 800c200:	3314      	adds	r3, #20
 800c202:	3114      	adds	r1, #20
 800c204:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c20c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c214:	4295      	cmp	r5, r2
 800c216:	d003      	beq.n	800c220 <__mcmp+0x2c>
 800c218:	d205      	bcs.n	800c226 <__mcmp+0x32>
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	bd30      	pop	{r4, r5, pc}
 800c220:	42a3      	cmp	r3, r4
 800c222:	d3f3      	bcc.n	800c20c <__mcmp+0x18>
 800c224:	e7fb      	b.n	800c21e <__mcmp+0x2a>
 800c226:	2001      	movs	r0, #1
 800c228:	e7f9      	b.n	800c21e <__mcmp+0x2a>
	...

0800c22c <__mdiff>:
 800c22c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	4689      	mov	r9, r1
 800c232:	4606      	mov	r6, r0
 800c234:	4611      	mov	r1, r2
 800c236:	4648      	mov	r0, r9
 800c238:	4614      	mov	r4, r2
 800c23a:	f7ff ffdb 	bl	800c1f4 <__mcmp>
 800c23e:	1e05      	subs	r5, r0, #0
 800c240:	d112      	bne.n	800c268 <__mdiff+0x3c>
 800c242:	4629      	mov	r1, r5
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff fd19 	bl	800bc7c <_Balloc>
 800c24a:	4602      	mov	r2, r0
 800c24c:	b928      	cbnz	r0, 800c25a <__mdiff+0x2e>
 800c24e:	4b3f      	ldr	r3, [pc, #252]	@ (800c34c <__mdiff+0x120>)
 800c250:	f240 2137 	movw	r1, #567	@ 0x237
 800c254:	483e      	ldr	r0, [pc, #248]	@ (800c350 <__mdiff+0x124>)
 800c256:	f001 fa47 	bl	800d6e8 <__assert_func>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c260:	4610      	mov	r0, r2
 800c262:	b003      	add	sp, #12
 800c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c268:	bfbc      	itt	lt
 800c26a:	464b      	movlt	r3, r9
 800c26c:	46a1      	movlt	r9, r4
 800c26e:	4630      	mov	r0, r6
 800c270:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c274:	bfba      	itte	lt
 800c276:	461c      	movlt	r4, r3
 800c278:	2501      	movlt	r5, #1
 800c27a:	2500      	movge	r5, #0
 800c27c:	f7ff fcfe 	bl	800bc7c <_Balloc>
 800c280:	4602      	mov	r2, r0
 800c282:	b918      	cbnz	r0, 800c28c <__mdiff+0x60>
 800c284:	4b31      	ldr	r3, [pc, #196]	@ (800c34c <__mdiff+0x120>)
 800c286:	f240 2145 	movw	r1, #581	@ 0x245
 800c28a:	e7e3      	b.n	800c254 <__mdiff+0x28>
 800c28c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c290:	6926      	ldr	r6, [r4, #16]
 800c292:	60c5      	str	r5, [r0, #12]
 800c294:	f109 0310 	add.w	r3, r9, #16
 800c298:	f109 0514 	add.w	r5, r9, #20
 800c29c:	f104 0e14 	add.w	lr, r4, #20
 800c2a0:	f100 0b14 	add.w	fp, r0, #20
 800c2a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	46d9      	mov	r9, fp
 800c2b0:	f04f 0c00 	mov.w	ip, #0
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	fa1f f38a 	uxth.w	r3, sl
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	b283      	uxth	r3, r0
 800c2c8:	1acb      	subs	r3, r1, r3
 800c2ca:	0c00      	lsrs	r0, r0, #16
 800c2cc:	4463      	add	r3, ip
 800c2ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2dc:	4576      	cmp	r6, lr
 800c2de:	f849 3b04 	str.w	r3, [r9], #4
 800c2e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2e6:	d8e5      	bhi.n	800c2b4 <__mdiff+0x88>
 800c2e8:	1b33      	subs	r3, r6, r4
 800c2ea:	3b15      	subs	r3, #21
 800c2ec:	f023 0303 	bic.w	r3, r3, #3
 800c2f0:	3415      	adds	r4, #21
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	42a6      	cmp	r6, r4
 800c2f6:	bf38      	it	cc
 800c2f8:	2304      	movcc	r3, #4
 800c2fa:	441d      	add	r5, r3
 800c2fc:	445b      	add	r3, fp
 800c2fe:	461e      	mov	r6, r3
 800c300:	462c      	mov	r4, r5
 800c302:	4544      	cmp	r4, r8
 800c304:	d30e      	bcc.n	800c324 <__mdiff+0xf8>
 800c306:	f108 0103 	add.w	r1, r8, #3
 800c30a:	1b49      	subs	r1, r1, r5
 800c30c:	f021 0103 	bic.w	r1, r1, #3
 800c310:	3d03      	subs	r5, #3
 800c312:	45a8      	cmp	r8, r5
 800c314:	bf38      	it	cc
 800c316:	2100      	movcc	r1, #0
 800c318:	440b      	add	r3, r1
 800c31a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c31e:	b191      	cbz	r1, 800c346 <__mdiff+0x11a>
 800c320:	6117      	str	r7, [r2, #16]
 800c322:	e79d      	b.n	800c260 <__mdiff+0x34>
 800c324:	f854 1b04 	ldr.w	r1, [r4], #4
 800c328:	46e6      	mov	lr, ip
 800c32a:	0c08      	lsrs	r0, r1, #16
 800c32c:	fa1c fc81 	uxtah	ip, ip, r1
 800c330:	4471      	add	r1, lr
 800c332:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c336:	b289      	uxth	r1, r1
 800c338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c33c:	f846 1b04 	str.w	r1, [r6], #4
 800c340:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c344:	e7dd      	b.n	800c302 <__mdiff+0xd6>
 800c346:	3f01      	subs	r7, #1
 800c348:	e7e7      	b.n	800c31a <__mdiff+0xee>
 800c34a:	bf00      	nop
 800c34c:	0800e535 	.word	0x0800e535
 800c350:	0800e546 	.word	0x0800e546

0800c354 <__ulp>:
 800c354:	b082      	sub	sp, #8
 800c356:	ed8d 0b00 	vstr	d0, [sp]
 800c35a:	9a01      	ldr	r2, [sp, #4]
 800c35c:	4b0f      	ldr	r3, [pc, #60]	@ (800c39c <__ulp+0x48>)
 800c35e:	4013      	ands	r3, r2
 800c360:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c364:	2b00      	cmp	r3, #0
 800c366:	dc08      	bgt.n	800c37a <__ulp+0x26>
 800c368:	425b      	negs	r3, r3
 800c36a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c36e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c372:	da04      	bge.n	800c37e <__ulp+0x2a>
 800c374:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c378:	4113      	asrs	r3, r2
 800c37a:	2200      	movs	r2, #0
 800c37c:	e008      	b.n	800c390 <__ulp+0x3c>
 800c37e:	f1a2 0314 	sub.w	r3, r2, #20
 800c382:	2b1e      	cmp	r3, #30
 800c384:	bfda      	itte	le
 800c386:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c38a:	40da      	lsrle	r2, r3
 800c38c:	2201      	movgt	r2, #1
 800c38e:	2300      	movs	r3, #0
 800c390:	4619      	mov	r1, r3
 800c392:	4610      	mov	r0, r2
 800c394:	ec41 0b10 	vmov	d0, r0, r1
 800c398:	b002      	add	sp, #8
 800c39a:	4770      	bx	lr
 800c39c:	7ff00000 	.word	0x7ff00000

0800c3a0 <__b2d>:
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	6906      	ldr	r6, [r0, #16]
 800c3a6:	f100 0814 	add.w	r8, r0, #20
 800c3aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c3ae:	1f37      	subs	r7, r6, #4
 800c3b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	f7ff fd53 	bl	800be60 <__hi0bits>
 800c3ba:	f1c0 0320 	rsb	r3, r0, #32
 800c3be:	280a      	cmp	r0, #10
 800c3c0:	600b      	str	r3, [r1, #0]
 800c3c2:	491b      	ldr	r1, [pc, #108]	@ (800c430 <__b2d+0x90>)
 800c3c4:	dc15      	bgt.n	800c3f2 <__b2d+0x52>
 800c3c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c3ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800c3ce:	45b8      	cmp	r8, r7
 800c3d0:	ea43 0501 	orr.w	r5, r3, r1
 800c3d4:	bf34      	ite	cc
 800c3d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c3da:	2300      	movcs	r3, #0
 800c3dc:	3015      	adds	r0, #21
 800c3de:	fa02 f000 	lsl.w	r0, r2, r0
 800c3e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800c3e6:	4303      	orrs	r3, r0
 800c3e8:	461c      	mov	r4, r3
 800c3ea:	ec45 4b10 	vmov	d0, r4, r5
 800c3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f2:	45b8      	cmp	r8, r7
 800c3f4:	bf3a      	itte	cc
 800c3f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c3fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800c3fe:	2300      	movcs	r3, #0
 800c400:	380b      	subs	r0, #11
 800c402:	d012      	beq.n	800c42a <__b2d+0x8a>
 800c404:	f1c0 0120 	rsb	r1, r0, #32
 800c408:	fa23 f401 	lsr.w	r4, r3, r1
 800c40c:	4082      	lsls	r2, r0
 800c40e:	4322      	orrs	r2, r4
 800c410:	4547      	cmp	r7, r8
 800c412:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c416:	bf8c      	ite	hi
 800c418:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c41c:	2200      	movls	r2, #0
 800c41e:	4083      	lsls	r3, r0
 800c420:	40ca      	lsrs	r2, r1
 800c422:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c426:	4313      	orrs	r3, r2
 800c428:	e7de      	b.n	800c3e8 <__b2d+0x48>
 800c42a:	ea42 0501 	orr.w	r5, r2, r1
 800c42e:	e7db      	b.n	800c3e8 <__b2d+0x48>
 800c430:	3ff00000 	.word	0x3ff00000

0800c434 <__d2b>:
 800c434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c438:	460f      	mov	r7, r1
 800c43a:	2101      	movs	r1, #1
 800c43c:	ec59 8b10 	vmov	r8, r9, d0
 800c440:	4616      	mov	r6, r2
 800c442:	f7ff fc1b 	bl	800bc7c <_Balloc>
 800c446:	4604      	mov	r4, r0
 800c448:	b930      	cbnz	r0, 800c458 <__d2b+0x24>
 800c44a:	4602      	mov	r2, r0
 800c44c:	4b23      	ldr	r3, [pc, #140]	@ (800c4dc <__d2b+0xa8>)
 800c44e:	4824      	ldr	r0, [pc, #144]	@ (800c4e0 <__d2b+0xac>)
 800c450:	f240 310f 	movw	r1, #783	@ 0x30f
 800c454:	f001 f948 	bl	800d6e8 <__assert_func>
 800c458:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c45c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c460:	b10d      	cbz	r5, 800c466 <__d2b+0x32>
 800c462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	f1b8 0300 	subs.w	r3, r8, #0
 800c46c:	d023      	beq.n	800c4b6 <__d2b+0x82>
 800c46e:	4668      	mov	r0, sp
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	f7ff fd14 	bl	800be9e <__lo0bits>
 800c476:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c47a:	b1d0      	cbz	r0, 800c4b2 <__d2b+0x7e>
 800c47c:	f1c0 0320 	rsb	r3, r0, #32
 800c480:	fa02 f303 	lsl.w	r3, r2, r3
 800c484:	430b      	orrs	r3, r1
 800c486:	40c2      	lsrs	r2, r0
 800c488:	6163      	str	r3, [r4, #20]
 800c48a:	9201      	str	r2, [sp, #4]
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	61a3      	str	r3, [r4, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	bf0c      	ite	eq
 800c494:	2201      	moveq	r2, #1
 800c496:	2202      	movne	r2, #2
 800c498:	6122      	str	r2, [r4, #16]
 800c49a:	b1a5      	cbz	r5, 800c4c6 <__d2b+0x92>
 800c49c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c4a0:	4405      	add	r5, r0
 800c4a2:	603d      	str	r5, [r7, #0]
 800c4a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c4a8:	6030      	str	r0, [r6, #0]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	b003      	add	sp, #12
 800c4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b2:	6161      	str	r1, [r4, #20]
 800c4b4:	e7ea      	b.n	800c48c <__d2b+0x58>
 800c4b6:	a801      	add	r0, sp, #4
 800c4b8:	f7ff fcf1 	bl	800be9e <__lo0bits>
 800c4bc:	9b01      	ldr	r3, [sp, #4]
 800c4be:	6163      	str	r3, [r4, #20]
 800c4c0:	3020      	adds	r0, #32
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	e7e8      	b.n	800c498 <__d2b+0x64>
 800c4c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c4ce:	6038      	str	r0, [r7, #0]
 800c4d0:	6918      	ldr	r0, [r3, #16]
 800c4d2:	f7ff fcc5 	bl	800be60 <__hi0bits>
 800c4d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4da:	e7e5      	b.n	800c4a8 <__d2b+0x74>
 800c4dc:	0800e535 	.word	0x0800e535
 800c4e0:	0800e546 	.word	0x0800e546

0800c4e4 <__ratio>:
 800c4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	4688      	mov	r8, r1
 800c4ea:	4669      	mov	r1, sp
 800c4ec:	4681      	mov	r9, r0
 800c4ee:	f7ff ff57 	bl	800c3a0 <__b2d>
 800c4f2:	a901      	add	r1, sp, #4
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	ec55 4b10 	vmov	r4, r5, d0
 800c4fa:	f7ff ff51 	bl	800c3a0 <__b2d>
 800c4fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c502:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c506:	1ad2      	subs	r2, r2, r3
 800c508:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c50c:	1a5b      	subs	r3, r3, r1
 800c50e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c512:	ec57 6b10 	vmov	r6, r7, d0
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfd6      	itet	le
 800c51a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c51e:	462a      	movgt	r2, r5
 800c520:	463a      	movle	r2, r7
 800c522:	46ab      	mov	fp, r5
 800c524:	46a2      	mov	sl, r4
 800c526:	bfce      	itee	gt
 800c528:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c52c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c530:	ee00 3a90 	vmovle	s1, r3
 800c534:	ec4b ab17 	vmov	d7, sl, fp
 800c538:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c53c:	b003      	add	sp, #12
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c542 <__copybits>:
 800c542:	3901      	subs	r1, #1
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	1149      	asrs	r1, r1, #5
 800c548:	6914      	ldr	r4, [r2, #16]
 800c54a:	3101      	adds	r1, #1
 800c54c:	f102 0314 	add.w	r3, r2, #20
 800c550:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c554:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c558:	1f05      	subs	r5, r0, #4
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	d30c      	bcc.n	800c578 <__copybits+0x36>
 800c55e:	1aa3      	subs	r3, r4, r2
 800c560:	3b11      	subs	r3, #17
 800c562:	f023 0303 	bic.w	r3, r3, #3
 800c566:	3211      	adds	r2, #17
 800c568:	42a2      	cmp	r2, r4
 800c56a:	bf88      	it	hi
 800c56c:	2300      	movhi	r3, #0
 800c56e:	4418      	add	r0, r3
 800c570:	2300      	movs	r3, #0
 800c572:	4288      	cmp	r0, r1
 800c574:	d305      	bcc.n	800c582 <__copybits+0x40>
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	f853 6b04 	ldr.w	r6, [r3], #4
 800c57c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c580:	e7eb      	b.n	800c55a <__copybits+0x18>
 800c582:	f840 3b04 	str.w	r3, [r0], #4
 800c586:	e7f4      	b.n	800c572 <__copybits+0x30>

0800c588 <__any_on>:
 800c588:	f100 0214 	add.w	r2, r0, #20
 800c58c:	6900      	ldr	r0, [r0, #16]
 800c58e:	114b      	asrs	r3, r1, #5
 800c590:	4298      	cmp	r0, r3
 800c592:	b510      	push	{r4, lr}
 800c594:	db11      	blt.n	800c5ba <__any_on+0x32>
 800c596:	dd0a      	ble.n	800c5ae <__any_on+0x26>
 800c598:	f011 011f 	ands.w	r1, r1, #31
 800c59c:	d007      	beq.n	800c5ae <__any_on+0x26>
 800c59e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c5a2:	fa24 f001 	lsr.w	r0, r4, r1
 800c5a6:	fa00 f101 	lsl.w	r1, r0, r1
 800c5aa:	428c      	cmp	r4, r1
 800c5ac:	d10b      	bne.n	800c5c6 <__any_on+0x3e>
 800c5ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d803      	bhi.n	800c5be <__any_on+0x36>
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	bd10      	pop	{r4, pc}
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	e7f7      	b.n	800c5ae <__any_on+0x26>
 800c5be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5c2:	2900      	cmp	r1, #0
 800c5c4:	d0f5      	beq.n	800c5b2 <__any_on+0x2a>
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	e7f6      	b.n	800c5b8 <__any_on+0x30>

0800c5ca <sulp>:
 800c5ca:	b570      	push	{r4, r5, r6, lr}
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	4616      	mov	r6, r2
 800c5d2:	ec45 4b10 	vmov	d0, r4, r5
 800c5d6:	f7ff febd 	bl	800c354 <__ulp>
 800c5da:	b17e      	cbz	r6, 800c5fc <sulp+0x32>
 800c5dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c5e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd09      	ble.n	800c5fc <sulp+0x32>
 800c5e8:	051b      	lsls	r3, r3, #20
 800c5ea:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800c5f4:	ec41 0b17 	vmov	d7, r0, r1
 800c5f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c5fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c600 <_strtod_l>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	ed2d 8b0a 	vpush	{d8-d12}
 800c608:	b097      	sub	sp, #92	@ 0x5c
 800c60a:	4688      	mov	r8, r1
 800c60c:	920e      	str	r2, [sp, #56]	@ 0x38
 800c60e:	2200      	movs	r2, #0
 800c610:	9212      	str	r2, [sp, #72]	@ 0x48
 800c612:	9005      	str	r0, [sp, #20]
 800c614:	f04f 0a00 	mov.w	sl, #0
 800c618:	f04f 0b00 	mov.w	fp, #0
 800c61c:	460a      	mov	r2, r1
 800c61e:	9211      	str	r2, [sp, #68]	@ 0x44
 800c620:	7811      	ldrb	r1, [r2, #0]
 800c622:	292b      	cmp	r1, #43	@ 0x2b
 800c624:	d04c      	beq.n	800c6c0 <_strtod_l+0xc0>
 800c626:	d839      	bhi.n	800c69c <_strtod_l+0x9c>
 800c628:	290d      	cmp	r1, #13
 800c62a:	d833      	bhi.n	800c694 <_strtod_l+0x94>
 800c62c:	2908      	cmp	r1, #8
 800c62e:	d833      	bhi.n	800c698 <_strtod_l+0x98>
 800c630:	2900      	cmp	r1, #0
 800c632:	d03c      	beq.n	800c6ae <_strtod_l+0xae>
 800c634:	2200      	movs	r2, #0
 800c636:	9208      	str	r2, [sp, #32]
 800c638:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800c63a:	782a      	ldrb	r2, [r5, #0]
 800c63c:	2a30      	cmp	r2, #48	@ 0x30
 800c63e:	f040 80b7 	bne.w	800c7b0 <_strtod_l+0x1b0>
 800c642:	786a      	ldrb	r2, [r5, #1]
 800c644:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c648:	2a58      	cmp	r2, #88	@ 0x58
 800c64a:	d170      	bne.n	800c72e <_strtod_l+0x12e>
 800c64c:	9302      	str	r3, [sp, #8]
 800c64e:	9b08      	ldr	r3, [sp, #32]
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	ab12      	add	r3, sp, #72	@ 0x48
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	4a90      	ldr	r2, [pc, #576]	@ (800c898 <_strtod_l+0x298>)
 800c658:	9805      	ldr	r0, [sp, #20]
 800c65a:	ab13      	add	r3, sp, #76	@ 0x4c
 800c65c:	a911      	add	r1, sp, #68	@ 0x44
 800c65e:	f001 f8dd 	bl	800d81c <__gethex>
 800c662:	f010 060f 	ands.w	r6, r0, #15
 800c666:	4604      	mov	r4, r0
 800c668:	d005      	beq.n	800c676 <_strtod_l+0x76>
 800c66a:	2e06      	cmp	r6, #6
 800c66c:	d12a      	bne.n	800c6c4 <_strtod_l+0xc4>
 800c66e:	3501      	adds	r5, #1
 800c670:	2300      	movs	r3, #0
 800c672:	9511      	str	r5, [sp, #68]	@ 0x44
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f040 8537 	bne.w	800d0ec <_strtod_l+0xaec>
 800c67e:	9b08      	ldr	r3, [sp, #32]
 800c680:	ec4b ab10 	vmov	d0, sl, fp
 800c684:	b1cb      	cbz	r3, 800c6ba <_strtod_l+0xba>
 800c686:	eeb1 0b40 	vneg.f64	d0, d0
 800c68a:	b017      	add	sp, #92	@ 0x5c
 800c68c:	ecbd 8b0a 	vpop	{d8-d12}
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c694:	2920      	cmp	r1, #32
 800c696:	d1cd      	bne.n	800c634 <_strtod_l+0x34>
 800c698:	3201      	adds	r2, #1
 800c69a:	e7c0      	b.n	800c61e <_strtod_l+0x1e>
 800c69c:	292d      	cmp	r1, #45	@ 0x2d
 800c69e:	d1c9      	bne.n	800c634 <_strtod_l+0x34>
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	9108      	str	r1, [sp, #32]
 800c6a4:	1c51      	adds	r1, r2, #1
 800c6a6:	9111      	str	r1, [sp, #68]	@ 0x44
 800c6a8:	7852      	ldrb	r2, [r2, #1]
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	d1c4      	bne.n	800c638 <_strtod_l+0x38>
 800c6ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f040 8517 	bne.w	800d0e8 <_strtod_l+0xae8>
 800c6ba:	ec4b ab10 	vmov	d0, sl, fp
 800c6be:	e7e4      	b.n	800c68a <_strtod_l+0x8a>
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	e7ee      	b.n	800c6a2 <_strtod_l+0xa2>
 800c6c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c6c6:	b13a      	cbz	r2, 800c6d8 <_strtod_l+0xd8>
 800c6c8:	2135      	movs	r1, #53	@ 0x35
 800c6ca:	a814      	add	r0, sp, #80	@ 0x50
 800c6cc:	f7ff ff39 	bl	800c542 <__copybits>
 800c6d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c6d2:	9805      	ldr	r0, [sp, #20]
 800c6d4:	f7ff fb12 	bl	800bcfc <_Bfree>
 800c6d8:	1e73      	subs	r3, r6, #1
 800c6da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c6dc:	2b04      	cmp	r3, #4
 800c6de:	d806      	bhi.n	800c6ee <_strtod_l+0xee>
 800c6e0:	e8df f003 	tbb	[pc, r3]
 800c6e4:	201d0314 	.word	0x201d0314
 800c6e8:	14          	.byte	0x14
 800c6e9:	00          	.byte	0x00
 800c6ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800c6ee:	05e3      	lsls	r3, r4, #23
 800c6f0:	bf48      	it	mi
 800c6f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c6fa:	0d1b      	lsrs	r3, r3, #20
 800c6fc:	051b      	lsls	r3, r3, #20
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1b9      	bne.n	800c676 <_strtod_l+0x76>
 800c702:	f7fe fb9f 	bl	800ae44 <__errno>
 800c706:	2322      	movs	r3, #34	@ 0x22
 800c708:	6003      	str	r3, [r0, #0]
 800c70a:	e7b4      	b.n	800c676 <_strtod_l+0x76>
 800c70c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800c710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c71c:	e7e7      	b.n	800c6ee <_strtod_l+0xee>
 800c71e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c8a0 <_strtod_l+0x2a0>
 800c722:	e7e4      	b.n	800c6ee <_strtod_l+0xee>
 800c724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c728:	f04f 3aff 	mov.w	sl, #4294967295
 800c72c:	e7df      	b.n	800c6ee <_strtod_l+0xee>
 800c72e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c730:	1c5a      	adds	r2, r3, #1
 800c732:	9211      	str	r2, [sp, #68]	@ 0x44
 800c734:	785b      	ldrb	r3, [r3, #1]
 800c736:	2b30      	cmp	r3, #48	@ 0x30
 800c738:	d0f9      	beq.n	800c72e <_strtod_l+0x12e>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d09b      	beq.n	800c676 <_strtod_l+0x76>
 800c73e:	2301      	movs	r3, #1
 800c740:	9307      	str	r3, [sp, #28]
 800c742:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c744:	930a      	str	r3, [sp, #40]	@ 0x28
 800c746:	2300      	movs	r3, #0
 800c748:	9306      	str	r3, [sp, #24]
 800c74a:	4699      	mov	r9, r3
 800c74c:	461d      	mov	r5, r3
 800c74e:	220a      	movs	r2, #10
 800c750:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800c752:	7804      	ldrb	r4, [r0, #0]
 800c754:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800c758:	b2d9      	uxtb	r1, r3
 800c75a:	2909      	cmp	r1, #9
 800c75c:	d92a      	bls.n	800c7b4 <_strtod_l+0x1b4>
 800c75e:	494f      	ldr	r1, [pc, #316]	@ (800c89c <_strtod_l+0x29c>)
 800c760:	2201      	movs	r2, #1
 800c762:	f000 ff87 	bl	800d674 <strncmp>
 800c766:	b398      	cbz	r0, 800c7d0 <_strtod_l+0x1d0>
 800c768:	2000      	movs	r0, #0
 800c76a:	4622      	mov	r2, r4
 800c76c:	462b      	mov	r3, r5
 800c76e:	4607      	mov	r7, r0
 800c770:	4601      	mov	r1, r0
 800c772:	2a65      	cmp	r2, #101	@ 0x65
 800c774:	d001      	beq.n	800c77a <_strtod_l+0x17a>
 800c776:	2a45      	cmp	r2, #69	@ 0x45
 800c778:	d118      	bne.n	800c7ac <_strtod_l+0x1ac>
 800c77a:	b91b      	cbnz	r3, 800c784 <_strtod_l+0x184>
 800c77c:	9b07      	ldr	r3, [sp, #28]
 800c77e:	4303      	orrs	r3, r0
 800c780:	d095      	beq.n	800c6ae <_strtod_l+0xae>
 800c782:	2300      	movs	r3, #0
 800c784:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800c788:	f108 0201 	add.w	r2, r8, #1
 800c78c:	9211      	str	r2, [sp, #68]	@ 0x44
 800c78e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c792:	2a2b      	cmp	r2, #43	@ 0x2b
 800c794:	d074      	beq.n	800c880 <_strtod_l+0x280>
 800c796:	2a2d      	cmp	r2, #45	@ 0x2d
 800c798:	d07a      	beq.n	800c890 <_strtod_l+0x290>
 800c79a:	f04f 0e00 	mov.w	lr, #0
 800c79e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800c7a2:	2c09      	cmp	r4, #9
 800c7a4:	f240 8082 	bls.w	800c8ac <_strtod_l+0x2ac>
 800c7a8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800c7ac:	2400      	movs	r4, #0
 800c7ae:	e09d      	b.n	800c8ec <_strtod_l+0x2ec>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	e7c5      	b.n	800c740 <_strtod_l+0x140>
 800c7b4:	2d08      	cmp	r5, #8
 800c7b6:	bfc8      	it	gt
 800c7b8:	9906      	ldrgt	r1, [sp, #24]
 800c7ba:	f100 0001 	add.w	r0, r0, #1
 800c7be:	bfca      	itet	gt
 800c7c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c7c4:	fb02 3909 	mlale	r9, r2, r9, r3
 800c7c8:	9306      	strgt	r3, [sp, #24]
 800c7ca:	3501      	adds	r5, #1
 800c7cc:	9011      	str	r0, [sp, #68]	@ 0x44
 800c7ce:	e7bf      	b.n	800c750 <_strtod_l+0x150>
 800c7d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	9211      	str	r2, [sp, #68]	@ 0x44
 800c7d6:	785a      	ldrb	r2, [r3, #1]
 800c7d8:	b3bd      	cbz	r5, 800c84a <_strtod_l+0x24a>
 800c7da:	4607      	mov	r7, r0
 800c7dc:	462b      	mov	r3, r5
 800c7de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c7e2:	2909      	cmp	r1, #9
 800c7e4:	d912      	bls.n	800c80c <_strtod_l+0x20c>
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	e7c3      	b.n	800c772 <_strtod_l+0x172>
 800c7ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	9211      	str	r2, [sp, #68]	@ 0x44
 800c7f0:	785a      	ldrb	r2, [r3, #1]
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	2a30      	cmp	r2, #48	@ 0x30
 800c7f6:	d0f8      	beq.n	800c7ea <_strtod_l+0x1ea>
 800c7f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	f200 847a 	bhi.w	800d0f6 <_strtod_l+0xaf6>
 800c802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c804:	930a      	str	r3, [sp, #40]	@ 0x28
 800c806:	4607      	mov	r7, r0
 800c808:	2000      	movs	r0, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	3a30      	subs	r2, #48	@ 0x30
 800c80e:	f100 0101 	add.w	r1, r0, #1
 800c812:	d014      	beq.n	800c83e <_strtod_l+0x23e>
 800c814:	440f      	add	r7, r1
 800c816:	469c      	mov	ip, r3
 800c818:	f04f 0e0a 	mov.w	lr, #10
 800c81c:	f10c 0401 	add.w	r4, ip, #1
 800c820:	1ae6      	subs	r6, r4, r3
 800c822:	42b1      	cmp	r1, r6
 800c824:	dc13      	bgt.n	800c84e <_strtod_l+0x24e>
 800c826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c82a:	1819      	adds	r1, r3, r0
 800c82c:	2908      	cmp	r1, #8
 800c82e:	f103 0301 	add.w	r3, r3, #1
 800c832:	4403      	add	r3, r0
 800c834:	dc19      	bgt.n	800c86a <_strtod_l+0x26a>
 800c836:	210a      	movs	r1, #10
 800c838:	fb01 2909 	mla	r9, r1, r9, r2
 800c83c:	2100      	movs	r1, #0
 800c83e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c840:	1c50      	adds	r0, r2, #1
 800c842:	9011      	str	r0, [sp, #68]	@ 0x44
 800c844:	7852      	ldrb	r2, [r2, #1]
 800c846:	4608      	mov	r0, r1
 800c848:	e7c9      	b.n	800c7de <_strtod_l+0x1de>
 800c84a:	4628      	mov	r0, r5
 800c84c:	e7d2      	b.n	800c7f4 <_strtod_l+0x1f4>
 800c84e:	f1bc 0f08 	cmp.w	ip, #8
 800c852:	dc03      	bgt.n	800c85c <_strtod_l+0x25c>
 800c854:	fb0e f909 	mul.w	r9, lr, r9
 800c858:	46a4      	mov	ip, r4
 800c85a:	e7df      	b.n	800c81c <_strtod_l+0x21c>
 800c85c:	2c10      	cmp	r4, #16
 800c85e:	bfde      	ittt	le
 800c860:	9e06      	ldrle	r6, [sp, #24]
 800c862:	fb0e f606 	mulle.w	r6, lr, r6
 800c866:	9606      	strle	r6, [sp, #24]
 800c868:	e7f6      	b.n	800c858 <_strtod_l+0x258>
 800c86a:	290f      	cmp	r1, #15
 800c86c:	bfdf      	itttt	le
 800c86e:	9806      	ldrle	r0, [sp, #24]
 800c870:	210a      	movle	r1, #10
 800c872:	fb01 2200 	mlale	r2, r1, r0, r2
 800c876:	9206      	strle	r2, [sp, #24]
 800c878:	e7e0      	b.n	800c83c <_strtod_l+0x23c>
 800c87a:	2700      	movs	r7, #0
 800c87c:	2101      	movs	r1, #1
 800c87e:	e77d      	b.n	800c77c <_strtod_l+0x17c>
 800c880:	f04f 0e00 	mov.w	lr, #0
 800c884:	f108 0202 	add.w	r2, r8, #2
 800c888:	9211      	str	r2, [sp, #68]	@ 0x44
 800c88a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c88e:	e786      	b.n	800c79e <_strtod_l+0x19e>
 800c890:	f04f 0e01 	mov.w	lr, #1
 800c894:	e7f6      	b.n	800c884 <_strtod_l+0x284>
 800c896:	bf00      	nop
 800c898:	0800e76c 	.word	0x0800e76c
 800c89c:	0800e59f 	.word	0x0800e59f
 800c8a0:	7ff00000 	.word	0x7ff00000
 800c8a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c8a6:	1c54      	adds	r4, r2, #1
 800c8a8:	9411      	str	r4, [sp, #68]	@ 0x44
 800c8aa:	7852      	ldrb	r2, [r2, #1]
 800c8ac:	2a30      	cmp	r2, #48	@ 0x30
 800c8ae:	d0f9      	beq.n	800c8a4 <_strtod_l+0x2a4>
 800c8b0:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800c8b4:	2c08      	cmp	r4, #8
 800c8b6:	f63f af79 	bhi.w	800c7ac <_strtod_l+0x1ac>
 800c8ba:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800c8be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c8c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c8c4:	1c54      	adds	r4, r2, #1
 800c8c6:	9411      	str	r4, [sp, #68]	@ 0x44
 800c8c8:	7852      	ldrb	r2, [r2, #1]
 800c8ca:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800c8ce:	2e09      	cmp	r6, #9
 800c8d0:	d937      	bls.n	800c942 <_strtod_l+0x342>
 800c8d2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c8d4:	1ba4      	subs	r4, r4, r6
 800c8d6:	2c08      	cmp	r4, #8
 800c8d8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800c8dc:	dc02      	bgt.n	800c8e4 <_strtod_l+0x2e4>
 800c8de:	4564      	cmp	r4, ip
 800c8e0:	bfa8      	it	ge
 800c8e2:	4664      	movge	r4, ip
 800c8e4:	f1be 0f00 	cmp.w	lr, #0
 800c8e8:	d000      	beq.n	800c8ec <_strtod_l+0x2ec>
 800c8ea:	4264      	negs	r4, r4
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d14d      	bne.n	800c98c <_strtod_l+0x38c>
 800c8f0:	9b07      	ldr	r3, [sp, #28]
 800c8f2:	4318      	orrs	r0, r3
 800c8f4:	f47f aebf 	bne.w	800c676 <_strtod_l+0x76>
 800c8f8:	2900      	cmp	r1, #0
 800c8fa:	f47f aed8 	bne.w	800c6ae <_strtod_l+0xae>
 800c8fe:	2a69      	cmp	r2, #105	@ 0x69
 800c900:	d027      	beq.n	800c952 <_strtod_l+0x352>
 800c902:	dc24      	bgt.n	800c94e <_strtod_l+0x34e>
 800c904:	2a49      	cmp	r2, #73	@ 0x49
 800c906:	d024      	beq.n	800c952 <_strtod_l+0x352>
 800c908:	2a4e      	cmp	r2, #78	@ 0x4e
 800c90a:	f47f aed0 	bne.w	800c6ae <_strtod_l+0xae>
 800c90e:	4997      	ldr	r1, [pc, #604]	@ (800cb6c <_strtod_l+0x56c>)
 800c910:	a811      	add	r0, sp, #68	@ 0x44
 800c912:	f001 f9a5 	bl	800dc60 <__match>
 800c916:	2800      	cmp	r0, #0
 800c918:	f43f aec9 	beq.w	800c6ae <_strtod_l+0xae>
 800c91c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b28      	cmp	r3, #40	@ 0x28
 800c922:	d12d      	bne.n	800c980 <_strtod_l+0x380>
 800c924:	4992      	ldr	r1, [pc, #584]	@ (800cb70 <_strtod_l+0x570>)
 800c926:	aa14      	add	r2, sp, #80	@ 0x50
 800c928:	a811      	add	r0, sp, #68	@ 0x44
 800c92a:	f001 f9ad 	bl	800dc88 <__hexnan>
 800c92e:	2805      	cmp	r0, #5
 800c930:	d126      	bne.n	800c980 <_strtod_l+0x380>
 800c932:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c934:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800c938:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c93c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c940:	e699      	b.n	800c676 <_strtod_l+0x76>
 800c942:	240a      	movs	r4, #10
 800c944:	fb04 2c0c 	mla	ip, r4, ip, r2
 800c948:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800c94c:	e7b9      	b.n	800c8c2 <_strtod_l+0x2c2>
 800c94e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c950:	e7db      	b.n	800c90a <_strtod_l+0x30a>
 800c952:	4988      	ldr	r1, [pc, #544]	@ (800cb74 <_strtod_l+0x574>)
 800c954:	a811      	add	r0, sp, #68	@ 0x44
 800c956:	f001 f983 	bl	800dc60 <__match>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f43f aea7 	beq.w	800c6ae <_strtod_l+0xae>
 800c960:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c962:	4985      	ldr	r1, [pc, #532]	@ (800cb78 <_strtod_l+0x578>)
 800c964:	3b01      	subs	r3, #1
 800c966:	a811      	add	r0, sp, #68	@ 0x44
 800c968:	9311      	str	r3, [sp, #68]	@ 0x44
 800c96a:	f001 f979 	bl	800dc60 <__match>
 800c96e:	b910      	cbnz	r0, 800c976 <_strtod_l+0x376>
 800c970:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c972:	3301      	adds	r3, #1
 800c974:	9311      	str	r3, [sp, #68]	@ 0x44
 800c976:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800cb8c <_strtod_l+0x58c>
 800c97a:	f04f 0a00 	mov.w	sl, #0
 800c97e:	e67a      	b.n	800c676 <_strtod_l+0x76>
 800c980:	487e      	ldr	r0, [pc, #504]	@ (800cb7c <_strtod_l+0x57c>)
 800c982:	f000 fea9 	bl	800d6d8 <nan>
 800c986:	ec5b ab10 	vmov	sl, fp, d0
 800c98a:	e674      	b.n	800c676 <_strtod_l+0x76>
 800c98c:	ee07 9a90 	vmov	s15, r9
 800c990:	1be2      	subs	r2, r4, r7
 800c992:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c996:	2d00      	cmp	r5, #0
 800c998:	bf08      	it	eq
 800c99a:	461d      	moveq	r5, r3
 800c99c:	2b10      	cmp	r3, #16
 800c99e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	bfa8      	it	ge
 800c9a4:	2210      	movge	r2, #16
 800c9a6:	2b09      	cmp	r3, #9
 800c9a8:	ec5b ab17 	vmov	sl, fp, d7
 800c9ac:	dc15      	bgt.n	800c9da <_strtod_l+0x3da>
 800c9ae:	1be1      	subs	r1, r4, r7
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	f43f ae60 	beq.w	800c676 <_strtod_l+0x76>
 800c9b6:	eba4 0107 	sub.w	r1, r4, r7
 800c9ba:	dd72      	ble.n	800caa2 <_strtod_l+0x4a2>
 800c9bc:	2916      	cmp	r1, #22
 800c9be:	dc59      	bgt.n	800ca74 <_strtod_l+0x474>
 800c9c0:	4b6f      	ldr	r3, [pc, #444]	@ (800cb80 <_strtod_l+0x580>)
 800c9c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9c8:	ed93 7b00 	vldr	d7, [r3]
 800c9cc:	ec4b ab16 	vmov	d6, sl, fp
 800c9d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9d4:	ec5b ab17 	vmov	sl, fp, d7
 800c9d8:	e64d      	b.n	800c676 <_strtod_l+0x76>
 800c9da:	4969      	ldr	r1, [pc, #420]	@ (800cb80 <_strtod_l+0x580>)
 800c9dc:	eddd 6a06 	vldr	s13, [sp, #24]
 800c9e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c9e4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c9e8:	2b0f      	cmp	r3, #15
 800c9ea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c9ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c9f2:	ec5b ab16 	vmov	sl, fp, d6
 800c9f6:	ddda      	ble.n	800c9ae <_strtod_l+0x3ae>
 800c9f8:	1a9a      	subs	r2, r3, r2
 800c9fa:	1be1      	subs	r1, r4, r7
 800c9fc:	440a      	add	r2, r1
 800c9fe:	2a00      	cmp	r2, #0
 800ca00:	f340 8094 	ble.w	800cb2c <_strtod_l+0x52c>
 800ca04:	f012 000f 	ands.w	r0, r2, #15
 800ca08:	d00a      	beq.n	800ca20 <_strtod_l+0x420>
 800ca0a:	495d      	ldr	r1, [pc, #372]	@ (800cb80 <_strtod_l+0x580>)
 800ca0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ca10:	ed91 7b00 	vldr	d7, [r1]
 800ca14:	ec4b ab16 	vmov	d6, sl, fp
 800ca18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca1c:	ec5b ab17 	vmov	sl, fp, d7
 800ca20:	f032 020f 	bics.w	r2, r2, #15
 800ca24:	d073      	beq.n	800cb0e <_strtod_l+0x50e>
 800ca26:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ca2a:	dd47      	ble.n	800cabc <_strtod_l+0x4bc>
 800ca2c:	2400      	movs	r4, #0
 800ca2e:	4625      	mov	r5, r4
 800ca30:	9407      	str	r4, [sp, #28]
 800ca32:	4626      	mov	r6, r4
 800ca34:	9a05      	ldr	r2, [sp, #20]
 800ca36:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cb8c <_strtod_l+0x58c>
 800ca3a:	2322      	movs	r3, #34	@ 0x22
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	f04f 0a00 	mov.w	sl, #0
 800ca42:	9b07      	ldr	r3, [sp, #28]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f43f ae16 	beq.w	800c676 <_strtod_l+0x76>
 800ca4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ca4c:	9805      	ldr	r0, [sp, #20]
 800ca4e:	f7ff f955 	bl	800bcfc <_Bfree>
 800ca52:	9805      	ldr	r0, [sp, #20]
 800ca54:	4631      	mov	r1, r6
 800ca56:	f7ff f951 	bl	800bcfc <_Bfree>
 800ca5a:	9805      	ldr	r0, [sp, #20]
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	f7ff f94d 	bl	800bcfc <_Bfree>
 800ca62:	9907      	ldr	r1, [sp, #28]
 800ca64:	9805      	ldr	r0, [sp, #20]
 800ca66:	f7ff f949 	bl	800bcfc <_Bfree>
 800ca6a:	9805      	ldr	r0, [sp, #20]
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	f7ff f945 	bl	800bcfc <_Bfree>
 800ca72:	e600      	b.n	800c676 <_strtod_l+0x76>
 800ca74:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ca78:	1be0      	subs	r0, r4, r7
 800ca7a:	4281      	cmp	r1, r0
 800ca7c:	dbbc      	blt.n	800c9f8 <_strtod_l+0x3f8>
 800ca7e:	4a40      	ldr	r2, [pc, #256]	@ (800cb80 <_strtod_l+0x580>)
 800ca80:	f1c3 030f 	rsb	r3, r3, #15
 800ca84:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ca88:	ed91 7b00 	vldr	d7, [r1]
 800ca8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca8e:	ec4b ab16 	vmov	d6, sl, fp
 800ca92:	1acb      	subs	r3, r1, r3
 800ca94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ca98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca9c:	ed92 6b00 	vldr	d6, [r2]
 800caa0:	e796      	b.n	800c9d0 <_strtod_l+0x3d0>
 800caa2:	3116      	adds	r1, #22
 800caa4:	dba8      	blt.n	800c9f8 <_strtod_l+0x3f8>
 800caa6:	4b36      	ldr	r3, [pc, #216]	@ (800cb80 <_strtod_l+0x580>)
 800caa8:	1b3c      	subs	r4, r7, r4
 800caaa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800caae:	ed94 7b00 	vldr	d7, [r4]
 800cab2:	ec4b ab16 	vmov	d6, sl, fp
 800cab6:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800caba:	e78b      	b.n	800c9d4 <_strtod_l+0x3d4>
 800cabc:	2000      	movs	r0, #0
 800cabe:	ec4b ab17 	vmov	d7, sl, fp
 800cac2:	4e30      	ldr	r6, [pc, #192]	@ (800cb84 <_strtod_l+0x584>)
 800cac4:	1112      	asrs	r2, r2, #4
 800cac6:	4601      	mov	r1, r0
 800cac8:	2a01      	cmp	r2, #1
 800caca:	dc23      	bgt.n	800cb14 <_strtod_l+0x514>
 800cacc:	b108      	cbz	r0, 800cad2 <_strtod_l+0x4d2>
 800cace:	ec5b ab17 	vmov	sl, fp, d7
 800cad2:	4a2c      	ldr	r2, [pc, #176]	@ (800cb84 <_strtod_l+0x584>)
 800cad4:	482c      	ldr	r0, [pc, #176]	@ (800cb88 <_strtod_l+0x588>)
 800cad6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cada:	ed92 7b00 	vldr	d7, [r2]
 800cade:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cae2:	ec4b ab16 	vmov	d6, sl, fp
 800cae6:	4a29      	ldr	r2, [pc, #164]	@ (800cb8c <_strtod_l+0x58c>)
 800cae8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caec:	ee17 1a90 	vmov	r1, s15
 800caf0:	400a      	ands	r2, r1
 800caf2:	4282      	cmp	r2, r0
 800caf4:	ec5b ab17 	vmov	sl, fp, d7
 800caf8:	d898      	bhi.n	800ca2c <_strtod_l+0x42c>
 800cafa:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800cafe:	4282      	cmp	r2, r0
 800cb00:	bf86      	itte	hi
 800cb02:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800cb90 <_strtod_l+0x590>
 800cb06:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb0a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800cb0e:	2200      	movs	r2, #0
 800cb10:	9206      	str	r2, [sp, #24]
 800cb12:	e076      	b.n	800cc02 <_strtod_l+0x602>
 800cb14:	f012 0f01 	tst.w	r2, #1
 800cb18:	d004      	beq.n	800cb24 <_strtod_l+0x524>
 800cb1a:	ed96 6b00 	vldr	d6, [r6]
 800cb1e:	2001      	movs	r0, #1
 800cb20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb24:	3101      	adds	r1, #1
 800cb26:	1052      	asrs	r2, r2, #1
 800cb28:	3608      	adds	r6, #8
 800cb2a:	e7cd      	b.n	800cac8 <_strtod_l+0x4c8>
 800cb2c:	d0ef      	beq.n	800cb0e <_strtod_l+0x50e>
 800cb2e:	4252      	negs	r2, r2
 800cb30:	f012 000f 	ands.w	r0, r2, #15
 800cb34:	d00a      	beq.n	800cb4c <_strtod_l+0x54c>
 800cb36:	4912      	ldr	r1, [pc, #72]	@ (800cb80 <_strtod_l+0x580>)
 800cb38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cb3c:	ed91 7b00 	vldr	d7, [r1]
 800cb40:	ec4b ab16 	vmov	d6, sl, fp
 800cb44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cb48:	ec5b ab17 	vmov	sl, fp, d7
 800cb4c:	1112      	asrs	r2, r2, #4
 800cb4e:	d0de      	beq.n	800cb0e <_strtod_l+0x50e>
 800cb50:	2a1f      	cmp	r2, #31
 800cb52:	dd1f      	ble.n	800cb94 <_strtod_l+0x594>
 800cb54:	2400      	movs	r4, #0
 800cb56:	4625      	mov	r5, r4
 800cb58:	9407      	str	r4, [sp, #28]
 800cb5a:	4626      	mov	r6, r4
 800cb5c:	9a05      	ldr	r2, [sp, #20]
 800cb5e:	2322      	movs	r3, #34	@ 0x22
 800cb60:	f04f 0a00 	mov.w	sl, #0
 800cb64:	f04f 0b00 	mov.w	fp, #0
 800cb68:	6013      	str	r3, [r2, #0]
 800cb6a:	e76a      	b.n	800ca42 <_strtod_l+0x442>
 800cb6c:	0800e48d 	.word	0x0800e48d
 800cb70:	0800e758 	.word	0x0800e758
 800cb74:	0800e485 	.word	0x0800e485
 800cb78:	0800e4bc 	.word	0x0800e4bc
 800cb7c:	0800e5f5 	.word	0x0800e5f5
 800cb80:	0800e690 	.word	0x0800e690
 800cb84:	0800e668 	.word	0x0800e668
 800cb88:	7ca00000 	.word	0x7ca00000
 800cb8c:	7ff00000 	.word	0x7ff00000
 800cb90:	7fefffff 	.word	0x7fefffff
 800cb94:	f012 0110 	ands.w	r1, r2, #16
 800cb98:	bf18      	it	ne
 800cb9a:	216a      	movne	r1, #106	@ 0x6a
 800cb9c:	9106      	str	r1, [sp, #24]
 800cb9e:	ec4b ab17 	vmov	d7, sl, fp
 800cba2:	49af      	ldr	r1, [pc, #700]	@ (800ce60 <_strtod_l+0x860>)
 800cba4:	2000      	movs	r0, #0
 800cba6:	07d6      	lsls	r6, r2, #31
 800cba8:	d504      	bpl.n	800cbb4 <_strtod_l+0x5b4>
 800cbaa:	ed91 6b00 	vldr	d6, [r1]
 800cbae:	2001      	movs	r0, #1
 800cbb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cbb4:	1052      	asrs	r2, r2, #1
 800cbb6:	f101 0108 	add.w	r1, r1, #8
 800cbba:	d1f4      	bne.n	800cba6 <_strtod_l+0x5a6>
 800cbbc:	b108      	cbz	r0, 800cbc2 <_strtod_l+0x5c2>
 800cbbe:	ec5b ab17 	vmov	sl, fp, d7
 800cbc2:	9a06      	ldr	r2, [sp, #24]
 800cbc4:	b1b2      	cbz	r2, 800cbf4 <_strtod_l+0x5f4>
 800cbc6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800cbca:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	4658      	mov	r0, fp
 800cbd2:	dd0f      	ble.n	800cbf4 <_strtod_l+0x5f4>
 800cbd4:	2a1f      	cmp	r2, #31
 800cbd6:	dd55      	ble.n	800cc84 <_strtod_l+0x684>
 800cbd8:	2a34      	cmp	r2, #52	@ 0x34
 800cbda:	bfde      	ittt	le
 800cbdc:	f04f 32ff 	movle.w	r2, #4294967295
 800cbe0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800cbe4:	408a      	lslle	r2, r1
 800cbe6:	f04f 0a00 	mov.w	sl, #0
 800cbea:	bfcc      	ite	gt
 800cbec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cbf0:	ea02 0b00 	andle.w	fp, r2, r0
 800cbf4:	ec4b ab17 	vmov	d7, sl, fp
 800cbf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc00:	d0a8      	beq.n	800cb54 <_strtod_l+0x554>
 800cc02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc04:	9805      	ldr	r0, [sp, #20]
 800cc06:	f8cd 9000 	str.w	r9, [sp]
 800cc0a:	462a      	mov	r2, r5
 800cc0c:	f7ff f8de 	bl	800bdcc <__s2b>
 800cc10:	9007      	str	r0, [sp, #28]
 800cc12:	2800      	cmp	r0, #0
 800cc14:	f43f af0a 	beq.w	800ca2c <_strtod_l+0x42c>
 800cc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc1a:	1b3f      	subs	r7, r7, r4
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	bfb4      	ite	lt
 800cc20:	463b      	movlt	r3, r7
 800cc22:	2300      	movge	r3, #0
 800cc24:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800ce50 <_strtod_l+0x850>
 800cc2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc30:	2400      	movs	r4, #0
 800cc32:	930d      	str	r3, [sp, #52]	@ 0x34
 800cc34:	4625      	mov	r5, r4
 800cc36:	9b07      	ldr	r3, [sp, #28]
 800cc38:	9805      	ldr	r0, [sp, #20]
 800cc3a:	6859      	ldr	r1, [r3, #4]
 800cc3c:	f7ff f81e 	bl	800bc7c <_Balloc>
 800cc40:	4606      	mov	r6, r0
 800cc42:	2800      	cmp	r0, #0
 800cc44:	f43f aef6 	beq.w	800ca34 <_strtod_l+0x434>
 800cc48:	9b07      	ldr	r3, [sp, #28]
 800cc4a:	691a      	ldr	r2, [r3, #16]
 800cc4c:	ec4b ab19 	vmov	d9, sl, fp
 800cc50:	3202      	adds	r2, #2
 800cc52:	f103 010c 	add.w	r1, r3, #12
 800cc56:	0092      	lsls	r2, r2, #2
 800cc58:	300c      	adds	r0, #12
 800cc5a:	f000 fd2d 	bl	800d6b8 <memcpy>
 800cc5e:	eeb0 0b49 	vmov.f64	d0, d9
 800cc62:	9805      	ldr	r0, [sp, #20]
 800cc64:	aa14      	add	r2, sp, #80	@ 0x50
 800cc66:	a913      	add	r1, sp, #76	@ 0x4c
 800cc68:	f7ff fbe4 	bl	800c434 <__d2b>
 800cc6c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f43f aee0 	beq.w	800ca34 <_strtod_l+0x434>
 800cc74:	9805      	ldr	r0, [sp, #20]
 800cc76:	2101      	movs	r1, #1
 800cc78:	f7ff f93e 	bl	800bef8 <__i2b>
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	b940      	cbnz	r0, 800cc92 <_strtod_l+0x692>
 800cc80:	2500      	movs	r5, #0
 800cc82:	e6d7      	b.n	800ca34 <_strtod_l+0x434>
 800cc84:	f04f 31ff 	mov.w	r1, #4294967295
 800cc88:	fa01 f202 	lsl.w	r2, r1, r2
 800cc8c:	ea02 0a0a 	and.w	sl, r2, sl
 800cc90:	e7b0      	b.n	800cbf4 <_strtod_l+0x5f4>
 800cc92:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800cc94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cc96:	2f00      	cmp	r7, #0
 800cc98:	bfab      	itete	ge
 800cc9a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800cc9c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800cc9e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800cca2:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800cca6:	bfac      	ite	ge
 800cca8:	eb07 0903 	addge.w	r9, r7, r3
 800ccac:	eba3 0807 	sublt.w	r8, r3, r7
 800ccb0:	9b06      	ldr	r3, [sp, #24]
 800ccb2:	1aff      	subs	r7, r7, r3
 800ccb4:	4417      	add	r7, r2
 800ccb6:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ccba:	4a6a      	ldr	r2, [pc, #424]	@ (800ce64 <_strtod_l+0x864>)
 800ccbc:	3f01      	subs	r7, #1
 800ccbe:	4297      	cmp	r7, r2
 800ccc0:	da51      	bge.n	800cd66 <_strtod_l+0x766>
 800ccc2:	1bd1      	subs	r1, r2, r7
 800ccc4:	291f      	cmp	r1, #31
 800ccc6:	eba3 0301 	sub.w	r3, r3, r1
 800ccca:	f04f 0201 	mov.w	r2, #1
 800ccce:	dc3e      	bgt.n	800cd4e <_strtod_l+0x74e>
 800ccd0:	408a      	lsls	r2, r1
 800ccd2:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ccd8:	eb09 0703 	add.w	r7, r9, r3
 800ccdc:	4498      	add	r8, r3
 800ccde:	9b06      	ldr	r3, [sp, #24]
 800cce0:	45b9      	cmp	r9, r7
 800cce2:	4498      	add	r8, r3
 800cce4:	464b      	mov	r3, r9
 800cce6:	bfa8      	it	ge
 800cce8:	463b      	movge	r3, r7
 800ccea:	4543      	cmp	r3, r8
 800ccec:	bfa8      	it	ge
 800ccee:	4643      	movge	r3, r8
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	bfc2      	ittt	gt
 800ccf4:	1aff      	subgt	r7, r7, r3
 800ccf6:	eba8 0803 	subgt.w	r8, r8, r3
 800ccfa:	eba9 0903 	subgt.w	r9, r9, r3
 800ccfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dd16      	ble.n	800cd32 <_strtod_l+0x732>
 800cd04:	4629      	mov	r1, r5
 800cd06:	9805      	ldr	r0, [sp, #20]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	f7ff f9ad 	bl	800c068 <__pow5mult>
 800cd0e:	4605      	mov	r5, r0
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d0b5      	beq.n	800cc80 <_strtod_l+0x680>
 800cd14:	4601      	mov	r1, r0
 800cd16:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd18:	9805      	ldr	r0, [sp, #20]
 800cd1a:	f7ff f903 	bl	800bf24 <__multiply>
 800cd1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cd20:	2800      	cmp	r0, #0
 800cd22:	f43f ae87 	beq.w	800ca34 <_strtod_l+0x434>
 800cd26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cd28:	9805      	ldr	r0, [sp, #20]
 800cd2a:	f7fe ffe7 	bl	800bcfc <_Bfree>
 800cd2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd30:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd32:	2f00      	cmp	r7, #0
 800cd34:	dc1b      	bgt.n	800cd6e <_strtod_l+0x76e>
 800cd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	dd21      	ble.n	800cd80 <_strtod_l+0x780>
 800cd3c:	4631      	mov	r1, r6
 800cd3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd40:	9805      	ldr	r0, [sp, #20]
 800cd42:	f7ff f991 	bl	800c068 <__pow5mult>
 800cd46:	4606      	mov	r6, r0
 800cd48:	b9d0      	cbnz	r0, 800cd80 <_strtod_l+0x780>
 800cd4a:	2600      	movs	r6, #0
 800cd4c:	e672      	b.n	800ca34 <_strtod_l+0x434>
 800cd4e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800cd52:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800cd56:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800cd5a:	37e2      	adds	r7, #226	@ 0xe2
 800cd5c:	fa02 f107 	lsl.w	r1, r2, r7
 800cd60:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cd62:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd64:	e7b8      	b.n	800ccd8 <_strtod_l+0x6d8>
 800cd66:	2200      	movs	r2, #0
 800cd68:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	e7f9      	b.n	800cd62 <_strtod_l+0x762>
 800cd6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cd70:	9805      	ldr	r0, [sp, #20]
 800cd72:	463a      	mov	r2, r7
 800cd74:	f7ff f9d2 	bl	800c11c <__lshift>
 800cd78:	9012      	str	r0, [sp, #72]	@ 0x48
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d1db      	bne.n	800cd36 <_strtod_l+0x736>
 800cd7e:	e659      	b.n	800ca34 <_strtod_l+0x434>
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	dd07      	ble.n	800cd96 <_strtod_l+0x796>
 800cd86:	4631      	mov	r1, r6
 800cd88:	9805      	ldr	r0, [sp, #20]
 800cd8a:	4642      	mov	r2, r8
 800cd8c:	f7ff f9c6 	bl	800c11c <__lshift>
 800cd90:	4606      	mov	r6, r0
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d0d9      	beq.n	800cd4a <_strtod_l+0x74a>
 800cd96:	f1b9 0f00 	cmp.w	r9, #0
 800cd9a:	dd08      	ble.n	800cdae <_strtod_l+0x7ae>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	9805      	ldr	r0, [sp, #20]
 800cda0:	464a      	mov	r2, r9
 800cda2:	f7ff f9bb 	bl	800c11c <__lshift>
 800cda6:	4605      	mov	r5, r0
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	f43f ae43 	beq.w	800ca34 <_strtod_l+0x434>
 800cdae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cdb0:	9805      	ldr	r0, [sp, #20]
 800cdb2:	4632      	mov	r2, r6
 800cdb4:	f7ff fa3a 	bl	800c22c <__mdiff>
 800cdb8:	4604      	mov	r4, r0
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	f43f ae3a 	beq.w	800ca34 <_strtod_l+0x434>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800cdc6:	60c3      	str	r3, [r0, #12]
 800cdc8:	4629      	mov	r1, r5
 800cdca:	f7ff fa13 	bl	800c1f4 <__mcmp>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	da4c      	bge.n	800ce6c <_strtod_l+0x86c>
 800cdd2:	ea58 080a 	orrs.w	r8, r8, sl
 800cdd6:	d172      	bne.n	800cebe <_strtod_l+0x8be>
 800cdd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d16e      	bne.n	800cebe <_strtod_l+0x8be>
 800cde0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cde4:	0d1b      	lsrs	r3, r3, #20
 800cde6:	051b      	lsls	r3, r3, #20
 800cde8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cdec:	d967      	bls.n	800cebe <_strtod_l+0x8be>
 800cdee:	6963      	ldr	r3, [r4, #20]
 800cdf0:	b913      	cbnz	r3, 800cdf8 <_strtod_l+0x7f8>
 800cdf2:	6923      	ldr	r3, [r4, #16]
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	dd62      	ble.n	800cebe <_strtod_l+0x8be>
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	9805      	ldr	r0, [sp, #20]
 800cdfe:	f7ff f98d 	bl	800c11c <__lshift>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4604      	mov	r4, r0
 800ce06:	f7ff f9f5 	bl	800c1f4 <__mcmp>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	dd57      	ble.n	800cebe <_strtod_l+0x8be>
 800ce0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce12:	9a06      	ldr	r2, [sp, #24]
 800ce14:	0d1b      	lsrs	r3, r3, #20
 800ce16:	051b      	lsls	r3, r3, #20
 800ce18:	2a00      	cmp	r2, #0
 800ce1a:	d06e      	beq.n	800cefa <_strtod_l+0x8fa>
 800ce1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce20:	d86b      	bhi.n	800cefa <_strtod_l+0x8fa>
 800ce22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ce26:	f67f ae99 	bls.w	800cb5c <_strtod_l+0x55c>
 800ce2a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800ce58 <_strtod_l+0x858>
 800ce2e:	ec4b ab16 	vmov	d6, sl, fp
 800ce32:	4b0d      	ldr	r3, [pc, #52]	@ (800ce68 <_strtod_l+0x868>)
 800ce34:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ce38:	ee17 2a90 	vmov	r2, s15
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	ec5b ab17 	vmov	sl, fp, d7
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f47f ae01 	bne.w	800ca4a <_strtod_l+0x44a>
 800ce48:	9a05      	ldr	r2, [sp, #20]
 800ce4a:	2322      	movs	r3, #34	@ 0x22
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	e5fc      	b.n	800ca4a <_strtod_l+0x44a>
 800ce50:	ffc00000 	.word	0xffc00000
 800ce54:	41dfffff 	.word	0x41dfffff
 800ce58:	00000000 	.word	0x00000000
 800ce5c:	39500000 	.word	0x39500000
 800ce60:	0800e780 	.word	0x0800e780
 800ce64:	fffffc02 	.word	0xfffffc02
 800ce68:	7ff00000 	.word	0x7ff00000
 800ce6c:	46d9      	mov	r9, fp
 800ce6e:	d15d      	bne.n	800cf2c <_strtod_l+0x92c>
 800ce70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce74:	f1b8 0f00 	cmp.w	r8, #0
 800ce78:	d02a      	beq.n	800ced0 <_strtod_l+0x8d0>
 800ce7a:	4aa9      	ldr	r2, [pc, #676]	@ (800d120 <_strtod_l+0xb20>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d12a      	bne.n	800ced6 <_strtod_l+0x8d6>
 800ce80:	9b06      	ldr	r3, [sp, #24]
 800ce82:	4652      	mov	r2, sl
 800ce84:	b1fb      	cbz	r3, 800cec6 <_strtod_l+0x8c6>
 800ce86:	4ba7      	ldr	r3, [pc, #668]	@ (800d124 <_strtod_l+0xb24>)
 800ce88:	ea0b 0303 	and.w	r3, fp, r3
 800ce8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ce90:	f04f 31ff 	mov.w	r1, #4294967295
 800ce94:	d81a      	bhi.n	800cecc <_strtod_l+0x8cc>
 800ce96:	0d1b      	lsrs	r3, r3, #20
 800ce98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d118      	bne.n	800ced6 <_strtod_l+0x8d6>
 800cea4:	4ba0      	ldr	r3, [pc, #640]	@ (800d128 <_strtod_l+0xb28>)
 800cea6:	4599      	cmp	r9, r3
 800cea8:	d102      	bne.n	800ceb0 <_strtod_l+0x8b0>
 800ceaa:	3201      	adds	r2, #1
 800ceac:	f43f adc2 	beq.w	800ca34 <_strtod_l+0x434>
 800ceb0:	4b9c      	ldr	r3, [pc, #624]	@ (800d124 <_strtod_l+0xb24>)
 800ceb2:	ea09 0303 	and.w	r3, r9, r3
 800ceb6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ceba:	f04f 0a00 	mov.w	sl, #0
 800cebe:	9b06      	ldr	r3, [sp, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1b2      	bne.n	800ce2a <_strtod_l+0x82a>
 800cec4:	e5c1      	b.n	800ca4a <_strtod_l+0x44a>
 800cec6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceca:	e7e9      	b.n	800cea0 <_strtod_l+0x8a0>
 800cecc:	460b      	mov	r3, r1
 800cece:	e7e7      	b.n	800cea0 <_strtod_l+0x8a0>
 800ced0:	ea53 030a 	orrs.w	r3, r3, sl
 800ced4:	d09b      	beq.n	800ce0e <_strtod_l+0x80e>
 800ced6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ced8:	b1c3      	cbz	r3, 800cf0c <_strtod_l+0x90c>
 800ceda:	ea13 0f09 	tst.w	r3, r9
 800cede:	d0ee      	beq.n	800cebe <_strtod_l+0x8be>
 800cee0:	9a06      	ldr	r2, [sp, #24]
 800cee2:	4650      	mov	r0, sl
 800cee4:	4659      	mov	r1, fp
 800cee6:	f1b8 0f00 	cmp.w	r8, #0
 800ceea:	d013      	beq.n	800cf14 <_strtod_l+0x914>
 800ceec:	f7ff fb6d 	bl	800c5ca <sulp>
 800cef0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800cef4:	ec5b ab17 	vmov	sl, fp, d7
 800cef8:	e7e1      	b.n	800cebe <_strtod_l+0x8be>
 800cefa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cefe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf06:	f04f 3aff 	mov.w	sl, #4294967295
 800cf0a:	e7d8      	b.n	800cebe <_strtod_l+0x8be>
 800cf0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf0e:	ea13 0f0a 	tst.w	r3, sl
 800cf12:	e7e4      	b.n	800cede <_strtod_l+0x8de>
 800cf14:	f7ff fb59 	bl	800c5ca <sulp>
 800cf18:	ee39 0b40 	vsub.f64	d0, d9, d0
 800cf1c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cf20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf24:	ec5b ab10 	vmov	sl, fp, d0
 800cf28:	d1c9      	bne.n	800cebe <_strtod_l+0x8be>
 800cf2a:	e617      	b.n	800cb5c <_strtod_l+0x55c>
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7ff fad8 	bl	800c4e4 <__ratio>
 800cf34:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800cf38:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf40:	d85d      	bhi.n	800cffe <_strtod_l+0x9fe>
 800cf42:	f1b8 0f00 	cmp.w	r8, #0
 800cf46:	d164      	bne.n	800d012 <_strtod_l+0xa12>
 800cf48:	f1ba 0f00 	cmp.w	sl, #0
 800cf4c:	d14b      	bne.n	800cfe6 <_strtod_l+0x9e6>
 800cf4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf52:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d160      	bne.n	800d01c <_strtod_l+0xa1c>
 800cf5a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800cf5e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800cf62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf66:	d401      	bmi.n	800cf6c <_strtod_l+0x96c>
 800cf68:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cf6c:	eeb1 ab48 	vneg.f64	d10, d8
 800cf70:	486c      	ldr	r0, [pc, #432]	@ (800d124 <_strtod_l+0xb24>)
 800cf72:	496e      	ldr	r1, [pc, #440]	@ (800d12c <_strtod_l+0xb2c>)
 800cf74:	ea09 0700 	and.w	r7, r9, r0
 800cf78:	428f      	cmp	r7, r1
 800cf7a:	ec53 2b1a 	vmov	r2, r3, d10
 800cf7e:	d17d      	bne.n	800d07c <_strtod_l+0xa7c>
 800cf80:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800cf84:	ec4b ab1c 	vmov	d12, sl, fp
 800cf88:	eeb0 0b4c 	vmov.f64	d0, d12
 800cf8c:	f7ff f9e2 	bl	800c354 <__ulp>
 800cf90:	4864      	ldr	r0, [pc, #400]	@ (800d124 <_strtod_l+0xb24>)
 800cf92:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800cf96:	ee1c 3a90 	vmov	r3, s25
 800cf9a:	4a65      	ldr	r2, [pc, #404]	@ (800d130 <_strtod_l+0xb30>)
 800cf9c:	ea03 0100 	and.w	r1, r3, r0
 800cfa0:	4291      	cmp	r1, r2
 800cfa2:	ec5b ab1c 	vmov	sl, fp, d12
 800cfa6:	d93c      	bls.n	800d022 <_strtod_l+0xa22>
 800cfa8:	ee19 2a90 	vmov	r2, s19
 800cfac:	4b5e      	ldr	r3, [pc, #376]	@ (800d128 <_strtod_l+0xb28>)
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d104      	bne.n	800cfbc <_strtod_l+0x9bc>
 800cfb2:	ee19 3a10 	vmov	r3, s18
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	f43f ad3c 	beq.w	800ca34 <_strtod_l+0x434>
 800cfbc:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800d128 <_strtod_l+0xb28>
 800cfc0:	f04f 3aff 	mov.w	sl, #4294967295
 800cfc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cfc6:	9805      	ldr	r0, [sp, #20]
 800cfc8:	f7fe fe98 	bl	800bcfc <_Bfree>
 800cfcc:	9805      	ldr	r0, [sp, #20]
 800cfce:	4631      	mov	r1, r6
 800cfd0:	f7fe fe94 	bl	800bcfc <_Bfree>
 800cfd4:	9805      	ldr	r0, [sp, #20]
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	f7fe fe90 	bl	800bcfc <_Bfree>
 800cfdc:	9805      	ldr	r0, [sp, #20]
 800cfde:	4621      	mov	r1, r4
 800cfe0:	f7fe fe8c 	bl	800bcfc <_Bfree>
 800cfe4:	e627      	b.n	800cc36 <_strtod_l+0x636>
 800cfe6:	f1ba 0f01 	cmp.w	sl, #1
 800cfea:	d103      	bne.n	800cff4 <_strtod_l+0x9f4>
 800cfec:	f1bb 0f00 	cmp.w	fp, #0
 800cff0:	f43f adb4 	beq.w	800cb5c <_strtod_l+0x55c>
 800cff4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800cff8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800cffc:	e7b8      	b.n	800cf70 <_strtod_l+0x970>
 800cffe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d002:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d006:	f1b8 0f00 	cmp.w	r8, #0
 800d00a:	d0af      	beq.n	800cf6c <_strtod_l+0x96c>
 800d00c:	eeb0 ab48 	vmov.f64	d10, d8
 800d010:	e7ae      	b.n	800cf70 <_strtod_l+0x970>
 800d012:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d016:	eeb0 8b4a 	vmov.f64	d8, d10
 800d01a:	e7a9      	b.n	800cf70 <_strtod_l+0x970>
 800d01c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d020:	e7a6      	b.n	800cf70 <_strtod_l+0x970>
 800d022:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d026:	9b06      	ldr	r3, [sp, #24]
 800d028:	46d9      	mov	r9, fp
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1ca      	bne.n	800cfc4 <_strtod_l+0x9c4>
 800d02e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d032:	0d1b      	lsrs	r3, r3, #20
 800d034:	051b      	lsls	r3, r3, #20
 800d036:	429f      	cmp	r7, r3
 800d038:	d1c4      	bne.n	800cfc4 <_strtod_l+0x9c4>
 800d03a:	ec51 0b18 	vmov	r0, r1, d8
 800d03e:	f7f3 fb7b 	bl	8000738 <__aeabi_d2lz>
 800d042:	f7f3 fb33 	bl	80006ac <__aeabi_l2d>
 800d046:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d04a:	ec41 0b17 	vmov	d7, r0, r1
 800d04e:	ea49 090a 	orr.w	r9, r9, sl
 800d052:	ea59 0908 	orrs.w	r9, r9, r8
 800d056:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d05a:	d03c      	beq.n	800d0d6 <_strtod_l+0xad6>
 800d05c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d108 <_strtod_l+0xb08>
 800d060:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d068:	f53f acef 	bmi.w	800ca4a <_strtod_l+0x44a>
 800d06c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800d110 <_strtod_l+0xb10>
 800d070:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d078:	dda4      	ble.n	800cfc4 <_strtod_l+0x9c4>
 800d07a:	e4e6      	b.n	800ca4a <_strtod_l+0x44a>
 800d07c:	9906      	ldr	r1, [sp, #24]
 800d07e:	b1e1      	cbz	r1, 800d0ba <_strtod_l+0xaba>
 800d080:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d084:	d819      	bhi.n	800d0ba <_strtod_l+0xaba>
 800d086:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08e:	d811      	bhi.n	800d0b4 <_strtod_l+0xab4>
 800d090:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d094:	ee18 3a10 	vmov	r3, s16
 800d098:	2b01      	cmp	r3, #1
 800d09a:	bf38      	it	cc
 800d09c:	2301      	movcc	r3, #1
 800d09e:	ee08 3a10 	vmov	s16, r3
 800d0a2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d0a6:	f1b8 0f00 	cmp.w	r8, #0
 800d0aa:	d111      	bne.n	800d0d0 <_strtod_l+0xad0>
 800d0ac:	eeb1 7b48 	vneg.f64	d7, d8
 800d0b0:	ec53 2b17 	vmov	r2, r3, d7
 800d0b4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d0b8:	1bcb      	subs	r3, r1, r7
 800d0ba:	eeb0 0b49 	vmov.f64	d0, d9
 800d0be:	ec43 2b1a 	vmov	d10, r2, r3
 800d0c2:	f7ff f947 	bl	800c354 <__ulp>
 800d0c6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d0ca:	ec5b ab19 	vmov	sl, fp, d9
 800d0ce:	e7aa      	b.n	800d026 <_strtod_l+0xa26>
 800d0d0:	eeb0 7b48 	vmov.f64	d7, d8
 800d0d4:	e7ec      	b.n	800d0b0 <_strtod_l+0xab0>
 800d0d6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800d118 <_strtod_l+0xb18>
 800d0da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e2:	f57f af6f 	bpl.w	800cfc4 <_strtod_l+0x9c4>
 800d0e6:	e4b0      	b.n	800ca4a <_strtod_l+0x44a>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9308      	str	r3, [sp, #32]
 800d0ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0f0:	6013      	str	r3, [r2, #0]
 800d0f2:	f7ff bac4 	b.w	800c67e <_strtod_l+0x7e>
 800d0f6:	2a65      	cmp	r2, #101	@ 0x65
 800d0f8:	f43f abbf 	beq.w	800c87a <_strtod_l+0x27a>
 800d0fc:	2a45      	cmp	r2, #69	@ 0x45
 800d0fe:	f43f abbc 	beq.w	800c87a <_strtod_l+0x27a>
 800d102:	2101      	movs	r1, #1
 800d104:	f7ff bbf4 	b.w	800c8f0 <_strtod_l+0x2f0>
 800d108:	94a03595 	.word	0x94a03595
 800d10c:	3fdfffff 	.word	0x3fdfffff
 800d110:	35afe535 	.word	0x35afe535
 800d114:	3fe00000 	.word	0x3fe00000
 800d118:	94a03595 	.word	0x94a03595
 800d11c:	3fcfffff 	.word	0x3fcfffff
 800d120:	000fffff 	.word	0x000fffff
 800d124:	7ff00000 	.word	0x7ff00000
 800d128:	7fefffff 	.word	0x7fefffff
 800d12c:	7fe00000 	.word	0x7fe00000
 800d130:	7c9fffff 	.word	0x7c9fffff

0800d134 <_strtod_r>:
 800d134:	4b01      	ldr	r3, [pc, #4]	@ (800d13c <_strtod_r+0x8>)
 800d136:	f7ff ba63 	b.w	800c600 <_strtod_l>
 800d13a:	bf00      	nop
 800d13c:	2400006c 	.word	0x2400006c

0800d140 <_strtol_l.isra.0>:
 800d140:	2b24      	cmp	r3, #36	@ 0x24
 800d142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d146:	4686      	mov	lr, r0
 800d148:	4690      	mov	r8, r2
 800d14a:	d801      	bhi.n	800d150 <_strtol_l.isra.0+0x10>
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d106      	bne.n	800d15e <_strtol_l.isra.0+0x1e>
 800d150:	f7fd fe78 	bl	800ae44 <__errno>
 800d154:	2316      	movs	r3, #22
 800d156:	6003      	str	r3, [r0, #0]
 800d158:	2000      	movs	r0, #0
 800d15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15e:	4834      	ldr	r0, [pc, #208]	@ (800d230 <_strtol_l.isra.0+0xf0>)
 800d160:	460d      	mov	r5, r1
 800d162:	462a      	mov	r2, r5
 800d164:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d168:	5d06      	ldrb	r6, [r0, r4]
 800d16a:	f016 0608 	ands.w	r6, r6, #8
 800d16e:	d1f8      	bne.n	800d162 <_strtol_l.isra.0+0x22>
 800d170:	2c2d      	cmp	r4, #45	@ 0x2d
 800d172:	d110      	bne.n	800d196 <_strtol_l.isra.0+0x56>
 800d174:	782c      	ldrb	r4, [r5, #0]
 800d176:	2601      	movs	r6, #1
 800d178:	1c95      	adds	r5, r2, #2
 800d17a:	f033 0210 	bics.w	r2, r3, #16
 800d17e:	d115      	bne.n	800d1ac <_strtol_l.isra.0+0x6c>
 800d180:	2c30      	cmp	r4, #48	@ 0x30
 800d182:	d10d      	bne.n	800d1a0 <_strtol_l.isra.0+0x60>
 800d184:	782a      	ldrb	r2, [r5, #0]
 800d186:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d18a:	2a58      	cmp	r2, #88	@ 0x58
 800d18c:	d108      	bne.n	800d1a0 <_strtol_l.isra.0+0x60>
 800d18e:	786c      	ldrb	r4, [r5, #1]
 800d190:	3502      	adds	r5, #2
 800d192:	2310      	movs	r3, #16
 800d194:	e00a      	b.n	800d1ac <_strtol_l.isra.0+0x6c>
 800d196:	2c2b      	cmp	r4, #43	@ 0x2b
 800d198:	bf04      	itt	eq
 800d19a:	782c      	ldrbeq	r4, [r5, #0]
 800d19c:	1c95      	addeq	r5, r2, #2
 800d19e:	e7ec      	b.n	800d17a <_strtol_l.isra.0+0x3a>
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1f6      	bne.n	800d192 <_strtol_l.isra.0+0x52>
 800d1a4:	2c30      	cmp	r4, #48	@ 0x30
 800d1a6:	bf14      	ite	ne
 800d1a8:	230a      	movne	r3, #10
 800d1aa:	2308      	moveq	r3, #8
 800d1ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d1b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	fbbc f9f3 	udiv	r9, ip, r3
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	fb03 ca19 	mls	sl, r3, r9, ip
 800d1c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d1c4:	2f09      	cmp	r7, #9
 800d1c6:	d80f      	bhi.n	800d1e8 <_strtol_l.isra.0+0xa8>
 800d1c8:	463c      	mov	r4, r7
 800d1ca:	42a3      	cmp	r3, r4
 800d1cc:	dd1b      	ble.n	800d206 <_strtol_l.isra.0+0xc6>
 800d1ce:	1c57      	adds	r7, r2, #1
 800d1d0:	d007      	beq.n	800d1e2 <_strtol_l.isra.0+0xa2>
 800d1d2:	4581      	cmp	r9, r0
 800d1d4:	d314      	bcc.n	800d200 <_strtol_l.isra.0+0xc0>
 800d1d6:	d101      	bne.n	800d1dc <_strtol_l.isra.0+0x9c>
 800d1d8:	45a2      	cmp	sl, r4
 800d1da:	db11      	blt.n	800d200 <_strtol_l.isra.0+0xc0>
 800d1dc:	fb00 4003 	mla	r0, r0, r3, r4
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1e6:	e7eb      	b.n	800d1c0 <_strtol_l.isra.0+0x80>
 800d1e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d1ec:	2f19      	cmp	r7, #25
 800d1ee:	d801      	bhi.n	800d1f4 <_strtol_l.isra.0+0xb4>
 800d1f0:	3c37      	subs	r4, #55	@ 0x37
 800d1f2:	e7ea      	b.n	800d1ca <_strtol_l.isra.0+0x8a>
 800d1f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d1f8:	2f19      	cmp	r7, #25
 800d1fa:	d804      	bhi.n	800d206 <_strtol_l.isra.0+0xc6>
 800d1fc:	3c57      	subs	r4, #87	@ 0x57
 800d1fe:	e7e4      	b.n	800d1ca <_strtol_l.isra.0+0x8a>
 800d200:	f04f 32ff 	mov.w	r2, #4294967295
 800d204:	e7ed      	b.n	800d1e2 <_strtol_l.isra.0+0xa2>
 800d206:	1c53      	adds	r3, r2, #1
 800d208:	d108      	bne.n	800d21c <_strtol_l.isra.0+0xdc>
 800d20a:	2322      	movs	r3, #34	@ 0x22
 800d20c:	f8ce 3000 	str.w	r3, [lr]
 800d210:	4660      	mov	r0, ip
 800d212:	f1b8 0f00 	cmp.w	r8, #0
 800d216:	d0a0      	beq.n	800d15a <_strtol_l.isra.0+0x1a>
 800d218:	1e69      	subs	r1, r5, #1
 800d21a:	e006      	b.n	800d22a <_strtol_l.isra.0+0xea>
 800d21c:	b106      	cbz	r6, 800d220 <_strtol_l.isra.0+0xe0>
 800d21e:	4240      	negs	r0, r0
 800d220:	f1b8 0f00 	cmp.w	r8, #0
 800d224:	d099      	beq.n	800d15a <_strtol_l.isra.0+0x1a>
 800d226:	2a00      	cmp	r2, #0
 800d228:	d1f6      	bne.n	800d218 <_strtol_l.isra.0+0xd8>
 800d22a:	f8c8 1000 	str.w	r1, [r8]
 800d22e:	e794      	b.n	800d15a <_strtol_l.isra.0+0x1a>
 800d230:	0800e7a9 	.word	0x0800e7a9

0800d234 <_strtol_r>:
 800d234:	f7ff bf84 	b.w	800d140 <_strtol_l.isra.0>

0800d238 <__ssputs_r>:
 800d238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d23c:	688e      	ldr	r6, [r1, #8]
 800d23e:	461f      	mov	r7, r3
 800d240:	42be      	cmp	r6, r7
 800d242:	680b      	ldr	r3, [r1, #0]
 800d244:	4682      	mov	sl, r0
 800d246:	460c      	mov	r4, r1
 800d248:	4690      	mov	r8, r2
 800d24a:	d82d      	bhi.n	800d2a8 <__ssputs_r+0x70>
 800d24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d254:	d026      	beq.n	800d2a4 <__ssputs_r+0x6c>
 800d256:	6965      	ldr	r5, [r4, #20]
 800d258:	6909      	ldr	r1, [r1, #16]
 800d25a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d25e:	eba3 0901 	sub.w	r9, r3, r1
 800d262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d266:	1c7b      	adds	r3, r7, #1
 800d268:	444b      	add	r3, r9
 800d26a:	106d      	asrs	r5, r5, #1
 800d26c:	429d      	cmp	r5, r3
 800d26e:	bf38      	it	cc
 800d270:	461d      	movcc	r5, r3
 800d272:	0553      	lsls	r3, r2, #21
 800d274:	d527      	bpl.n	800d2c6 <__ssputs_r+0x8e>
 800d276:	4629      	mov	r1, r5
 800d278:	f7fe fc74 	bl	800bb64 <_malloc_r>
 800d27c:	4606      	mov	r6, r0
 800d27e:	b360      	cbz	r0, 800d2da <__ssputs_r+0xa2>
 800d280:	6921      	ldr	r1, [r4, #16]
 800d282:	464a      	mov	r2, r9
 800d284:	f000 fa18 	bl	800d6b8 <memcpy>
 800d288:	89a3      	ldrh	r3, [r4, #12]
 800d28a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d292:	81a3      	strh	r3, [r4, #12]
 800d294:	6126      	str	r6, [r4, #16]
 800d296:	6165      	str	r5, [r4, #20]
 800d298:	444e      	add	r6, r9
 800d29a:	eba5 0509 	sub.w	r5, r5, r9
 800d29e:	6026      	str	r6, [r4, #0]
 800d2a0:	60a5      	str	r5, [r4, #8]
 800d2a2:	463e      	mov	r6, r7
 800d2a4:	42be      	cmp	r6, r7
 800d2a6:	d900      	bls.n	800d2aa <__ssputs_r+0x72>
 800d2a8:	463e      	mov	r6, r7
 800d2aa:	6820      	ldr	r0, [r4, #0]
 800d2ac:	4632      	mov	r2, r6
 800d2ae:	4641      	mov	r1, r8
 800d2b0:	f000 f9c6 	bl	800d640 <memmove>
 800d2b4:	68a3      	ldr	r3, [r4, #8]
 800d2b6:	1b9b      	subs	r3, r3, r6
 800d2b8:	60a3      	str	r3, [r4, #8]
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	4433      	add	r3, r6
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c6:	462a      	mov	r2, r5
 800d2c8:	f000 fd8b 	bl	800dde2 <_realloc_r>
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d1e0      	bne.n	800d294 <__ssputs_r+0x5c>
 800d2d2:	6921      	ldr	r1, [r4, #16]
 800d2d4:	4650      	mov	r0, sl
 800d2d6:	f7fe fbd1 	bl	800ba7c <_free_r>
 800d2da:	230c      	movs	r3, #12
 800d2dc:	f8ca 3000 	str.w	r3, [sl]
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2e6:	81a3      	strh	r3, [r4, #12]
 800d2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ec:	e7e9      	b.n	800d2c2 <__ssputs_r+0x8a>
	...

0800d2f0 <_svfiprintf_r>:
 800d2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f4:	4698      	mov	r8, r3
 800d2f6:	898b      	ldrh	r3, [r1, #12]
 800d2f8:	061b      	lsls	r3, r3, #24
 800d2fa:	b09d      	sub	sp, #116	@ 0x74
 800d2fc:	4607      	mov	r7, r0
 800d2fe:	460d      	mov	r5, r1
 800d300:	4614      	mov	r4, r2
 800d302:	d510      	bpl.n	800d326 <_svfiprintf_r+0x36>
 800d304:	690b      	ldr	r3, [r1, #16]
 800d306:	b973      	cbnz	r3, 800d326 <_svfiprintf_r+0x36>
 800d308:	2140      	movs	r1, #64	@ 0x40
 800d30a:	f7fe fc2b 	bl	800bb64 <_malloc_r>
 800d30e:	6028      	str	r0, [r5, #0]
 800d310:	6128      	str	r0, [r5, #16]
 800d312:	b930      	cbnz	r0, 800d322 <_svfiprintf_r+0x32>
 800d314:	230c      	movs	r3, #12
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	f04f 30ff 	mov.w	r0, #4294967295
 800d31c:	b01d      	add	sp, #116	@ 0x74
 800d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d322:	2340      	movs	r3, #64	@ 0x40
 800d324:	616b      	str	r3, [r5, #20]
 800d326:	2300      	movs	r3, #0
 800d328:	9309      	str	r3, [sp, #36]	@ 0x24
 800d32a:	2320      	movs	r3, #32
 800d32c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d330:	f8cd 800c 	str.w	r8, [sp, #12]
 800d334:	2330      	movs	r3, #48	@ 0x30
 800d336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d4d4 <_svfiprintf_r+0x1e4>
 800d33a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d33e:	f04f 0901 	mov.w	r9, #1
 800d342:	4623      	mov	r3, r4
 800d344:	469a      	mov	sl, r3
 800d346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d34a:	b10a      	cbz	r2, 800d350 <_svfiprintf_r+0x60>
 800d34c:	2a25      	cmp	r2, #37	@ 0x25
 800d34e:	d1f9      	bne.n	800d344 <_svfiprintf_r+0x54>
 800d350:	ebba 0b04 	subs.w	fp, sl, r4
 800d354:	d00b      	beq.n	800d36e <_svfiprintf_r+0x7e>
 800d356:	465b      	mov	r3, fp
 800d358:	4622      	mov	r2, r4
 800d35a:	4629      	mov	r1, r5
 800d35c:	4638      	mov	r0, r7
 800d35e:	f7ff ff6b 	bl	800d238 <__ssputs_r>
 800d362:	3001      	adds	r0, #1
 800d364:	f000 80a7 	beq.w	800d4b6 <_svfiprintf_r+0x1c6>
 800d368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d36a:	445a      	add	r2, fp
 800d36c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d36e:	f89a 3000 	ldrb.w	r3, [sl]
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 809f 	beq.w	800d4b6 <_svfiprintf_r+0x1c6>
 800d378:	2300      	movs	r3, #0
 800d37a:	f04f 32ff 	mov.w	r2, #4294967295
 800d37e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d382:	f10a 0a01 	add.w	sl, sl, #1
 800d386:	9304      	str	r3, [sp, #16]
 800d388:	9307      	str	r3, [sp, #28]
 800d38a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d38e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d390:	4654      	mov	r4, sl
 800d392:	2205      	movs	r2, #5
 800d394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d398:	484e      	ldr	r0, [pc, #312]	@ (800d4d4 <_svfiprintf_r+0x1e4>)
 800d39a:	f7f2 ffa1 	bl	80002e0 <memchr>
 800d39e:	9a04      	ldr	r2, [sp, #16]
 800d3a0:	b9d8      	cbnz	r0, 800d3da <_svfiprintf_r+0xea>
 800d3a2:	06d0      	lsls	r0, r2, #27
 800d3a4:	bf44      	itt	mi
 800d3a6:	2320      	movmi	r3, #32
 800d3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3ac:	0711      	lsls	r1, r2, #28
 800d3ae:	bf44      	itt	mi
 800d3b0:	232b      	movmi	r3, #43	@ 0x2b
 800d3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3bc:	d015      	beq.n	800d3ea <_svfiprintf_r+0xfa>
 800d3be:	9a07      	ldr	r2, [sp, #28]
 800d3c0:	4654      	mov	r4, sl
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	f04f 0c0a 	mov.w	ip, #10
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ce:	3b30      	subs	r3, #48	@ 0x30
 800d3d0:	2b09      	cmp	r3, #9
 800d3d2:	d94b      	bls.n	800d46c <_svfiprintf_r+0x17c>
 800d3d4:	b1b0      	cbz	r0, 800d404 <_svfiprintf_r+0x114>
 800d3d6:	9207      	str	r2, [sp, #28]
 800d3d8:	e014      	b.n	800d404 <_svfiprintf_r+0x114>
 800d3da:	eba0 0308 	sub.w	r3, r0, r8
 800d3de:	fa09 f303 	lsl.w	r3, r9, r3
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	46a2      	mov	sl, r4
 800d3e8:	e7d2      	b.n	800d390 <_svfiprintf_r+0xa0>
 800d3ea:	9b03      	ldr	r3, [sp, #12]
 800d3ec:	1d19      	adds	r1, r3, #4
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	9103      	str	r1, [sp, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	bfbb      	ittet	lt
 800d3f6:	425b      	neglt	r3, r3
 800d3f8:	f042 0202 	orrlt.w	r2, r2, #2
 800d3fc:	9307      	strge	r3, [sp, #28]
 800d3fe:	9307      	strlt	r3, [sp, #28]
 800d400:	bfb8      	it	lt
 800d402:	9204      	strlt	r2, [sp, #16]
 800d404:	7823      	ldrb	r3, [r4, #0]
 800d406:	2b2e      	cmp	r3, #46	@ 0x2e
 800d408:	d10a      	bne.n	800d420 <_svfiprintf_r+0x130>
 800d40a:	7863      	ldrb	r3, [r4, #1]
 800d40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d40e:	d132      	bne.n	800d476 <_svfiprintf_r+0x186>
 800d410:	9b03      	ldr	r3, [sp, #12]
 800d412:	1d1a      	adds	r2, r3, #4
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	9203      	str	r2, [sp, #12]
 800d418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d41c:	3402      	adds	r4, #2
 800d41e:	9305      	str	r3, [sp, #20]
 800d420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d4e4 <_svfiprintf_r+0x1f4>
 800d424:	7821      	ldrb	r1, [r4, #0]
 800d426:	2203      	movs	r2, #3
 800d428:	4650      	mov	r0, sl
 800d42a:	f7f2 ff59 	bl	80002e0 <memchr>
 800d42e:	b138      	cbz	r0, 800d440 <_svfiprintf_r+0x150>
 800d430:	9b04      	ldr	r3, [sp, #16]
 800d432:	eba0 000a 	sub.w	r0, r0, sl
 800d436:	2240      	movs	r2, #64	@ 0x40
 800d438:	4082      	lsls	r2, r0
 800d43a:	4313      	orrs	r3, r2
 800d43c:	3401      	adds	r4, #1
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d444:	4824      	ldr	r0, [pc, #144]	@ (800d4d8 <_svfiprintf_r+0x1e8>)
 800d446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d44a:	2206      	movs	r2, #6
 800d44c:	f7f2 ff48 	bl	80002e0 <memchr>
 800d450:	2800      	cmp	r0, #0
 800d452:	d036      	beq.n	800d4c2 <_svfiprintf_r+0x1d2>
 800d454:	4b21      	ldr	r3, [pc, #132]	@ (800d4dc <_svfiprintf_r+0x1ec>)
 800d456:	bb1b      	cbnz	r3, 800d4a0 <_svfiprintf_r+0x1b0>
 800d458:	9b03      	ldr	r3, [sp, #12]
 800d45a:	3307      	adds	r3, #7
 800d45c:	f023 0307 	bic.w	r3, r3, #7
 800d460:	3308      	adds	r3, #8
 800d462:	9303      	str	r3, [sp, #12]
 800d464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d466:	4433      	add	r3, r6
 800d468:	9309      	str	r3, [sp, #36]	@ 0x24
 800d46a:	e76a      	b.n	800d342 <_svfiprintf_r+0x52>
 800d46c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d470:	460c      	mov	r4, r1
 800d472:	2001      	movs	r0, #1
 800d474:	e7a8      	b.n	800d3c8 <_svfiprintf_r+0xd8>
 800d476:	2300      	movs	r3, #0
 800d478:	3401      	adds	r4, #1
 800d47a:	9305      	str	r3, [sp, #20]
 800d47c:	4619      	mov	r1, r3
 800d47e:	f04f 0c0a 	mov.w	ip, #10
 800d482:	4620      	mov	r0, r4
 800d484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d488:	3a30      	subs	r2, #48	@ 0x30
 800d48a:	2a09      	cmp	r2, #9
 800d48c:	d903      	bls.n	800d496 <_svfiprintf_r+0x1a6>
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d0c6      	beq.n	800d420 <_svfiprintf_r+0x130>
 800d492:	9105      	str	r1, [sp, #20]
 800d494:	e7c4      	b.n	800d420 <_svfiprintf_r+0x130>
 800d496:	fb0c 2101 	mla	r1, ip, r1, r2
 800d49a:	4604      	mov	r4, r0
 800d49c:	2301      	movs	r3, #1
 800d49e:	e7f0      	b.n	800d482 <_svfiprintf_r+0x192>
 800d4a0:	ab03      	add	r3, sp, #12
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e0 <_svfiprintf_r+0x1f0>)
 800d4a8:	a904      	add	r1, sp, #16
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	f7fc fda4 	bl	8009ff8 <_printf_float>
 800d4b0:	1c42      	adds	r2, r0, #1
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	d1d6      	bne.n	800d464 <_svfiprintf_r+0x174>
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	065b      	lsls	r3, r3, #25
 800d4ba:	f53f af2d 	bmi.w	800d318 <_svfiprintf_r+0x28>
 800d4be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4c0:	e72c      	b.n	800d31c <_svfiprintf_r+0x2c>
 800d4c2:	ab03      	add	r3, sp, #12
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	4b05      	ldr	r3, [pc, #20]	@ (800d4e0 <_svfiprintf_r+0x1f0>)
 800d4ca:	a904      	add	r1, sp, #16
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	f7fd f81b 	bl	800a508 <_printf_i>
 800d4d2:	e7ed      	b.n	800d4b0 <_svfiprintf_r+0x1c0>
 800d4d4:	0800e5a1 	.word	0x0800e5a1
 800d4d8:	0800e5ab 	.word	0x0800e5ab
 800d4dc:	08009ff9 	.word	0x08009ff9
 800d4e0:	0800d239 	.word	0x0800d239
 800d4e4:	0800e5a7 	.word	0x0800e5a7

0800d4e8 <__sflush_r>:
 800d4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f0:	0716      	lsls	r6, r2, #28
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	d454      	bmi.n	800d5a2 <__sflush_r+0xba>
 800d4f8:	684b      	ldr	r3, [r1, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dc02      	bgt.n	800d504 <__sflush_r+0x1c>
 800d4fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d500:	2b00      	cmp	r3, #0
 800d502:	dd48      	ble.n	800d596 <__sflush_r+0xae>
 800d504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d506:	2e00      	cmp	r6, #0
 800d508:	d045      	beq.n	800d596 <__sflush_r+0xae>
 800d50a:	2300      	movs	r3, #0
 800d50c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d510:	682f      	ldr	r7, [r5, #0]
 800d512:	6a21      	ldr	r1, [r4, #32]
 800d514:	602b      	str	r3, [r5, #0]
 800d516:	d030      	beq.n	800d57a <__sflush_r+0x92>
 800d518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	0759      	lsls	r1, r3, #29
 800d51e:	d505      	bpl.n	800d52c <__sflush_r+0x44>
 800d520:	6863      	ldr	r3, [r4, #4]
 800d522:	1ad2      	subs	r2, r2, r3
 800d524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d526:	b10b      	cbz	r3, 800d52c <__sflush_r+0x44>
 800d528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d52a:	1ad2      	subs	r2, r2, r3
 800d52c:	2300      	movs	r3, #0
 800d52e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d530:	6a21      	ldr	r1, [r4, #32]
 800d532:	4628      	mov	r0, r5
 800d534:	47b0      	blx	r6
 800d536:	1c43      	adds	r3, r0, #1
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	d106      	bne.n	800d54a <__sflush_r+0x62>
 800d53c:	6829      	ldr	r1, [r5, #0]
 800d53e:	291d      	cmp	r1, #29
 800d540:	d82b      	bhi.n	800d59a <__sflush_r+0xb2>
 800d542:	4a2a      	ldr	r2, [pc, #168]	@ (800d5ec <__sflush_r+0x104>)
 800d544:	40ca      	lsrs	r2, r1
 800d546:	07d6      	lsls	r6, r2, #31
 800d548:	d527      	bpl.n	800d59a <__sflush_r+0xb2>
 800d54a:	2200      	movs	r2, #0
 800d54c:	6062      	str	r2, [r4, #4]
 800d54e:	04d9      	lsls	r1, r3, #19
 800d550:	6922      	ldr	r2, [r4, #16]
 800d552:	6022      	str	r2, [r4, #0]
 800d554:	d504      	bpl.n	800d560 <__sflush_r+0x78>
 800d556:	1c42      	adds	r2, r0, #1
 800d558:	d101      	bne.n	800d55e <__sflush_r+0x76>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	b903      	cbnz	r3, 800d560 <__sflush_r+0x78>
 800d55e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d562:	602f      	str	r7, [r5, #0]
 800d564:	b1b9      	cbz	r1, 800d596 <__sflush_r+0xae>
 800d566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d56a:	4299      	cmp	r1, r3
 800d56c:	d002      	beq.n	800d574 <__sflush_r+0x8c>
 800d56e:	4628      	mov	r0, r5
 800d570:	f7fe fa84 	bl	800ba7c <_free_r>
 800d574:	2300      	movs	r3, #0
 800d576:	6363      	str	r3, [r4, #52]	@ 0x34
 800d578:	e00d      	b.n	800d596 <__sflush_r+0xae>
 800d57a:	2301      	movs	r3, #1
 800d57c:	4628      	mov	r0, r5
 800d57e:	47b0      	blx	r6
 800d580:	4602      	mov	r2, r0
 800d582:	1c50      	adds	r0, r2, #1
 800d584:	d1c9      	bne.n	800d51a <__sflush_r+0x32>
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d0c6      	beq.n	800d51a <__sflush_r+0x32>
 800d58c:	2b1d      	cmp	r3, #29
 800d58e:	d001      	beq.n	800d594 <__sflush_r+0xac>
 800d590:	2b16      	cmp	r3, #22
 800d592:	d11e      	bne.n	800d5d2 <__sflush_r+0xea>
 800d594:	602f      	str	r7, [r5, #0]
 800d596:	2000      	movs	r0, #0
 800d598:	e022      	b.n	800d5e0 <__sflush_r+0xf8>
 800d59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d59e:	b21b      	sxth	r3, r3
 800d5a0:	e01b      	b.n	800d5da <__sflush_r+0xf2>
 800d5a2:	690f      	ldr	r7, [r1, #16]
 800d5a4:	2f00      	cmp	r7, #0
 800d5a6:	d0f6      	beq.n	800d596 <__sflush_r+0xae>
 800d5a8:	0793      	lsls	r3, r2, #30
 800d5aa:	680e      	ldr	r6, [r1, #0]
 800d5ac:	bf08      	it	eq
 800d5ae:	694b      	ldreq	r3, [r1, #20]
 800d5b0:	600f      	str	r7, [r1, #0]
 800d5b2:	bf18      	it	ne
 800d5b4:	2300      	movne	r3, #0
 800d5b6:	eba6 0807 	sub.w	r8, r6, r7
 800d5ba:	608b      	str	r3, [r1, #8]
 800d5bc:	f1b8 0f00 	cmp.w	r8, #0
 800d5c0:	dde9      	ble.n	800d596 <__sflush_r+0xae>
 800d5c2:	6a21      	ldr	r1, [r4, #32]
 800d5c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d5c6:	4643      	mov	r3, r8
 800d5c8:	463a      	mov	r2, r7
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b0      	blx	r6
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	dc08      	bgt.n	800d5e4 <__sflush_r+0xfc>
 800d5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5da:	81a3      	strh	r3, [r4, #12]
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e4:	4407      	add	r7, r0
 800d5e6:	eba8 0800 	sub.w	r8, r8, r0
 800d5ea:	e7e7      	b.n	800d5bc <__sflush_r+0xd4>
 800d5ec:	20400001 	.word	0x20400001

0800d5f0 <_fflush_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	690b      	ldr	r3, [r1, #16]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	b913      	cbnz	r3, 800d600 <_fflush_r+0x10>
 800d5fa:	2500      	movs	r5, #0
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	b118      	cbz	r0, 800d60a <_fflush_r+0x1a>
 800d602:	6a03      	ldr	r3, [r0, #32]
 800d604:	b90b      	cbnz	r3, 800d60a <_fflush_r+0x1a>
 800d606:	f7fd fb2f 	bl	800ac68 <__sinit>
 800d60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d0f3      	beq.n	800d5fa <_fflush_r+0xa>
 800d612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d614:	07d0      	lsls	r0, r2, #31
 800d616:	d404      	bmi.n	800d622 <_fflush_r+0x32>
 800d618:	0599      	lsls	r1, r3, #22
 800d61a:	d402      	bmi.n	800d622 <_fflush_r+0x32>
 800d61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d61e:	f7fd fc3c 	bl	800ae9a <__retarget_lock_acquire_recursive>
 800d622:	4628      	mov	r0, r5
 800d624:	4621      	mov	r1, r4
 800d626:	f7ff ff5f 	bl	800d4e8 <__sflush_r>
 800d62a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d62c:	07da      	lsls	r2, r3, #31
 800d62e:	4605      	mov	r5, r0
 800d630:	d4e4      	bmi.n	800d5fc <_fflush_r+0xc>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	059b      	lsls	r3, r3, #22
 800d636:	d4e1      	bmi.n	800d5fc <_fflush_r+0xc>
 800d638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d63a:	f7fd fc2f 	bl	800ae9c <__retarget_lock_release_recursive>
 800d63e:	e7dd      	b.n	800d5fc <_fflush_r+0xc>

0800d640 <memmove>:
 800d640:	4288      	cmp	r0, r1
 800d642:	b510      	push	{r4, lr}
 800d644:	eb01 0402 	add.w	r4, r1, r2
 800d648:	d902      	bls.n	800d650 <memmove+0x10>
 800d64a:	4284      	cmp	r4, r0
 800d64c:	4623      	mov	r3, r4
 800d64e:	d807      	bhi.n	800d660 <memmove+0x20>
 800d650:	1e43      	subs	r3, r0, #1
 800d652:	42a1      	cmp	r1, r4
 800d654:	d008      	beq.n	800d668 <memmove+0x28>
 800d656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d65a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d65e:	e7f8      	b.n	800d652 <memmove+0x12>
 800d660:	4402      	add	r2, r0
 800d662:	4601      	mov	r1, r0
 800d664:	428a      	cmp	r2, r1
 800d666:	d100      	bne.n	800d66a <memmove+0x2a>
 800d668:	bd10      	pop	{r4, pc}
 800d66a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d66e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d672:	e7f7      	b.n	800d664 <memmove+0x24>

0800d674 <strncmp>:
 800d674:	b510      	push	{r4, lr}
 800d676:	b16a      	cbz	r2, 800d694 <strncmp+0x20>
 800d678:	3901      	subs	r1, #1
 800d67a:	1884      	adds	r4, r0, r2
 800d67c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d680:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d684:	429a      	cmp	r2, r3
 800d686:	d103      	bne.n	800d690 <strncmp+0x1c>
 800d688:	42a0      	cmp	r0, r4
 800d68a:	d001      	beq.n	800d690 <strncmp+0x1c>
 800d68c:	2a00      	cmp	r2, #0
 800d68e:	d1f5      	bne.n	800d67c <strncmp+0x8>
 800d690:	1ad0      	subs	r0, r2, r3
 800d692:	bd10      	pop	{r4, pc}
 800d694:	4610      	mov	r0, r2
 800d696:	e7fc      	b.n	800d692 <strncmp+0x1e>

0800d698 <_sbrk_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4d06      	ldr	r5, [pc, #24]	@ (800d6b4 <_sbrk_r+0x1c>)
 800d69c:	2300      	movs	r3, #0
 800d69e:	4604      	mov	r4, r0
 800d6a0:	4608      	mov	r0, r1
 800d6a2:	602b      	str	r3, [r5, #0]
 800d6a4:	f7f3 ff9a 	bl	80015dc <_sbrk>
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	d102      	bne.n	800d6b2 <_sbrk_r+0x1a>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	b103      	cbz	r3, 800d6b2 <_sbrk_r+0x1a>
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	240006c8 	.word	0x240006c8

0800d6b8 <memcpy>:
 800d6b8:	440a      	add	r2, r1
 800d6ba:	4291      	cmp	r1, r2
 800d6bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6c0:	d100      	bne.n	800d6c4 <memcpy+0xc>
 800d6c2:	4770      	bx	lr
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6ce:	4291      	cmp	r1, r2
 800d6d0:	d1f9      	bne.n	800d6c6 <memcpy+0xe>
 800d6d2:	bd10      	pop	{r4, pc}
 800d6d4:	0000      	movs	r0, r0
	...

0800d6d8 <nan>:
 800d6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d6e0 <nan+0x8>
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	7ff80000 	.word	0x7ff80000

0800d6e8 <__assert_func>:
 800d6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ea:	4614      	mov	r4, r2
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b09      	ldr	r3, [pc, #36]	@ (800d714 <__assert_func+0x2c>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4605      	mov	r5, r0
 800d6f4:	68d8      	ldr	r0, [r3, #12]
 800d6f6:	b14c      	cbz	r4, 800d70c <__assert_func+0x24>
 800d6f8:	4b07      	ldr	r3, [pc, #28]	@ (800d718 <__assert_func+0x30>)
 800d6fa:	9100      	str	r1, [sp, #0]
 800d6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d700:	4906      	ldr	r1, [pc, #24]	@ (800d71c <__assert_func+0x34>)
 800d702:	462b      	mov	r3, r5
 800d704:	f000 fba8 	bl	800de58 <fiprintf>
 800d708:	f000 fbb8 	bl	800de7c <abort>
 800d70c:	4b04      	ldr	r3, [pc, #16]	@ (800d720 <__assert_func+0x38>)
 800d70e:	461c      	mov	r4, r3
 800d710:	e7f3      	b.n	800d6fa <__assert_func+0x12>
 800d712:	bf00      	nop
 800d714:	2400001c 	.word	0x2400001c
 800d718:	0800e5ba 	.word	0x0800e5ba
 800d71c:	0800e5c7 	.word	0x0800e5c7
 800d720:	0800e5f5 	.word	0x0800e5f5

0800d724 <_calloc_r>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	fba1 5402 	umull	r5, r4, r1, r2
 800d72a:	b934      	cbnz	r4, 800d73a <_calloc_r+0x16>
 800d72c:	4629      	mov	r1, r5
 800d72e:	f7fe fa19 	bl	800bb64 <_malloc_r>
 800d732:	4606      	mov	r6, r0
 800d734:	b928      	cbnz	r0, 800d742 <_calloc_r+0x1e>
 800d736:	4630      	mov	r0, r6
 800d738:	bd70      	pop	{r4, r5, r6, pc}
 800d73a:	220c      	movs	r2, #12
 800d73c:	6002      	str	r2, [r0, #0]
 800d73e:	2600      	movs	r6, #0
 800d740:	e7f9      	b.n	800d736 <_calloc_r+0x12>
 800d742:	462a      	mov	r2, r5
 800d744:	4621      	mov	r1, r4
 800d746:	f7fd fb2a 	bl	800ad9e <memset>
 800d74a:	e7f4      	b.n	800d736 <_calloc_r+0x12>

0800d74c <rshift>:
 800d74c:	6903      	ldr	r3, [r0, #16]
 800d74e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d756:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d75a:	f100 0414 	add.w	r4, r0, #20
 800d75e:	dd45      	ble.n	800d7ec <rshift+0xa0>
 800d760:	f011 011f 	ands.w	r1, r1, #31
 800d764:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d768:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d76c:	d10c      	bne.n	800d788 <rshift+0x3c>
 800d76e:	f100 0710 	add.w	r7, r0, #16
 800d772:	4629      	mov	r1, r5
 800d774:	42b1      	cmp	r1, r6
 800d776:	d334      	bcc.n	800d7e2 <rshift+0x96>
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	1eea      	subs	r2, r5, #3
 800d77e:	4296      	cmp	r6, r2
 800d780:	bf38      	it	cc
 800d782:	2300      	movcc	r3, #0
 800d784:	4423      	add	r3, r4
 800d786:	e015      	b.n	800d7b4 <rshift+0x68>
 800d788:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d78c:	f1c1 0820 	rsb	r8, r1, #32
 800d790:	40cf      	lsrs	r7, r1
 800d792:	f105 0e04 	add.w	lr, r5, #4
 800d796:	46a1      	mov	r9, r4
 800d798:	4576      	cmp	r6, lr
 800d79a:	46f4      	mov	ip, lr
 800d79c:	d815      	bhi.n	800d7ca <rshift+0x7e>
 800d79e:	1a9a      	subs	r2, r3, r2
 800d7a0:	0092      	lsls	r2, r2, #2
 800d7a2:	3a04      	subs	r2, #4
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	42ae      	cmp	r6, r5
 800d7a8:	bf38      	it	cc
 800d7aa:	2200      	movcc	r2, #0
 800d7ac:	18a3      	adds	r3, r4, r2
 800d7ae:	50a7      	str	r7, [r4, r2]
 800d7b0:	b107      	cbz	r7, 800d7b4 <rshift+0x68>
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	1b1a      	subs	r2, r3, r4
 800d7b6:	42a3      	cmp	r3, r4
 800d7b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7bc:	bf08      	it	eq
 800d7be:	2300      	moveq	r3, #0
 800d7c0:	6102      	str	r2, [r0, #16]
 800d7c2:	bf08      	it	eq
 800d7c4:	6143      	streq	r3, [r0, #20]
 800d7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ca:	f8dc c000 	ldr.w	ip, [ip]
 800d7ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7d2:	ea4c 0707 	orr.w	r7, ip, r7
 800d7d6:	f849 7b04 	str.w	r7, [r9], #4
 800d7da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7de:	40cf      	lsrs	r7, r1
 800d7e0:	e7da      	b.n	800d798 <rshift+0x4c>
 800d7e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7ea:	e7c3      	b.n	800d774 <rshift+0x28>
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	e7e1      	b.n	800d7b4 <rshift+0x68>

0800d7f0 <__hexdig_fun>:
 800d7f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d7f4:	2b09      	cmp	r3, #9
 800d7f6:	d802      	bhi.n	800d7fe <__hexdig_fun+0xe>
 800d7f8:	3820      	subs	r0, #32
 800d7fa:	b2c0      	uxtb	r0, r0
 800d7fc:	4770      	bx	lr
 800d7fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d802:	2b05      	cmp	r3, #5
 800d804:	d801      	bhi.n	800d80a <__hexdig_fun+0x1a>
 800d806:	3847      	subs	r0, #71	@ 0x47
 800d808:	e7f7      	b.n	800d7fa <__hexdig_fun+0xa>
 800d80a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d80e:	2b05      	cmp	r3, #5
 800d810:	d801      	bhi.n	800d816 <__hexdig_fun+0x26>
 800d812:	3827      	subs	r0, #39	@ 0x27
 800d814:	e7f1      	b.n	800d7fa <__hexdig_fun+0xa>
 800d816:	2000      	movs	r0, #0
 800d818:	4770      	bx	lr
	...

0800d81c <__gethex>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	b085      	sub	sp, #20
 800d822:	468a      	mov	sl, r1
 800d824:	9302      	str	r3, [sp, #8]
 800d826:	680b      	ldr	r3, [r1, #0]
 800d828:	9001      	str	r0, [sp, #4]
 800d82a:	4690      	mov	r8, r2
 800d82c:	1c9c      	adds	r4, r3, #2
 800d82e:	46a1      	mov	r9, r4
 800d830:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d834:	2830      	cmp	r0, #48	@ 0x30
 800d836:	d0fa      	beq.n	800d82e <__gethex+0x12>
 800d838:	eba9 0303 	sub.w	r3, r9, r3
 800d83c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d840:	f7ff ffd6 	bl	800d7f0 <__hexdig_fun>
 800d844:	4605      	mov	r5, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d168      	bne.n	800d91c <__gethex+0x100>
 800d84a:	49a0      	ldr	r1, [pc, #640]	@ (800dacc <__gethex+0x2b0>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	4648      	mov	r0, r9
 800d850:	f7ff ff10 	bl	800d674 <strncmp>
 800d854:	4607      	mov	r7, r0
 800d856:	2800      	cmp	r0, #0
 800d858:	d167      	bne.n	800d92a <__gethex+0x10e>
 800d85a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d85e:	4626      	mov	r6, r4
 800d860:	f7ff ffc6 	bl	800d7f0 <__hexdig_fun>
 800d864:	2800      	cmp	r0, #0
 800d866:	d062      	beq.n	800d92e <__gethex+0x112>
 800d868:	4623      	mov	r3, r4
 800d86a:	7818      	ldrb	r0, [r3, #0]
 800d86c:	2830      	cmp	r0, #48	@ 0x30
 800d86e:	4699      	mov	r9, r3
 800d870:	f103 0301 	add.w	r3, r3, #1
 800d874:	d0f9      	beq.n	800d86a <__gethex+0x4e>
 800d876:	f7ff ffbb 	bl	800d7f0 <__hexdig_fun>
 800d87a:	fab0 f580 	clz	r5, r0
 800d87e:	096d      	lsrs	r5, r5, #5
 800d880:	f04f 0b01 	mov.w	fp, #1
 800d884:	464a      	mov	r2, r9
 800d886:	4616      	mov	r6, r2
 800d888:	3201      	adds	r2, #1
 800d88a:	7830      	ldrb	r0, [r6, #0]
 800d88c:	f7ff ffb0 	bl	800d7f0 <__hexdig_fun>
 800d890:	2800      	cmp	r0, #0
 800d892:	d1f8      	bne.n	800d886 <__gethex+0x6a>
 800d894:	498d      	ldr	r1, [pc, #564]	@ (800dacc <__gethex+0x2b0>)
 800d896:	2201      	movs	r2, #1
 800d898:	4630      	mov	r0, r6
 800d89a:	f7ff feeb 	bl	800d674 <strncmp>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d13f      	bne.n	800d922 <__gethex+0x106>
 800d8a2:	b944      	cbnz	r4, 800d8b6 <__gethex+0x9a>
 800d8a4:	1c74      	adds	r4, r6, #1
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4616      	mov	r6, r2
 800d8aa:	3201      	adds	r2, #1
 800d8ac:	7830      	ldrb	r0, [r6, #0]
 800d8ae:	f7ff ff9f 	bl	800d7f0 <__hexdig_fun>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d1f8      	bne.n	800d8a8 <__gethex+0x8c>
 800d8b6:	1ba4      	subs	r4, r4, r6
 800d8b8:	00a7      	lsls	r7, r4, #2
 800d8ba:	7833      	ldrb	r3, [r6, #0]
 800d8bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d8c0:	2b50      	cmp	r3, #80	@ 0x50
 800d8c2:	d13e      	bne.n	800d942 <__gethex+0x126>
 800d8c4:	7873      	ldrb	r3, [r6, #1]
 800d8c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d8c8:	d033      	beq.n	800d932 <__gethex+0x116>
 800d8ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800d8cc:	d034      	beq.n	800d938 <__gethex+0x11c>
 800d8ce:	1c71      	adds	r1, r6, #1
 800d8d0:	2400      	movs	r4, #0
 800d8d2:	7808      	ldrb	r0, [r1, #0]
 800d8d4:	f7ff ff8c 	bl	800d7f0 <__hexdig_fun>
 800d8d8:	1e43      	subs	r3, r0, #1
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b18      	cmp	r3, #24
 800d8de:	d830      	bhi.n	800d942 <__gethex+0x126>
 800d8e0:	f1a0 0210 	sub.w	r2, r0, #16
 800d8e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d8e8:	f7ff ff82 	bl	800d7f0 <__hexdig_fun>
 800d8ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800d8f0:	fa5f fc8c 	uxtb.w	ip, ip
 800d8f4:	f1bc 0f18 	cmp.w	ip, #24
 800d8f8:	f04f 030a 	mov.w	r3, #10
 800d8fc:	d91e      	bls.n	800d93c <__gethex+0x120>
 800d8fe:	b104      	cbz	r4, 800d902 <__gethex+0xe6>
 800d900:	4252      	negs	r2, r2
 800d902:	4417      	add	r7, r2
 800d904:	f8ca 1000 	str.w	r1, [sl]
 800d908:	b1ed      	cbz	r5, 800d946 <__gethex+0x12a>
 800d90a:	f1bb 0f00 	cmp.w	fp, #0
 800d90e:	bf0c      	ite	eq
 800d910:	2506      	moveq	r5, #6
 800d912:	2500      	movne	r5, #0
 800d914:	4628      	mov	r0, r5
 800d916:	b005      	add	sp, #20
 800d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91c:	2500      	movs	r5, #0
 800d91e:	462c      	mov	r4, r5
 800d920:	e7b0      	b.n	800d884 <__gethex+0x68>
 800d922:	2c00      	cmp	r4, #0
 800d924:	d1c7      	bne.n	800d8b6 <__gethex+0x9a>
 800d926:	4627      	mov	r7, r4
 800d928:	e7c7      	b.n	800d8ba <__gethex+0x9e>
 800d92a:	464e      	mov	r6, r9
 800d92c:	462f      	mov	r7, r5
 800d92e:	2501      	movs	r5, #1
 800d930:	e7c3      	b.n	800d8ba <__gethex+0x9e>
 800d932:	2400      	movs	r4, #0
 800d934:	1cb1      	adds	r1, r6, #2
 800d936:	e7cc      	b.n	800d8d2 <__gethex+0xb6>
 800d938:	2401      	movs	r4, #1
 800d93a:	e7fb      	b.n	800d934 <__gethex+0x118>
 800d93c:	fb03 0002 	mla	r0, r3, r2, r0
 800d940:	e7ce      	b.n	800d8e0 <__gethex+0xc4>
 800d942:	4631      	mov	r1, r6
 800d944:	e7de      	b.n	800d904 <__gethex+0xe8>
 800d946:	eba6 0309 	sub.w	r3, r6, r9
 800d94a:	3b01      	subs	r3, #1
 800d94c:	4629      	mov	r1, r5
 800d94e:	2b07      	cmp	r3, #7
 800d950:	dc0a      	bgt.n	800d968 <__gethex+0x14c>
 800d952:	9801      	ldr	r0, [sp, #4]
 800d954:	f7fe f992 	bl	800bc7c <_Balloc>
 800d958:	4604      	mov	r4, r0
 800d95a:	b940      	cbnz	r0, 800d96e <__gethex+0x152>
 800d95c:	4b5c      	ldr	r3, [pc, #368]	@ (800dad0 <__gethex+0x2b4>)
 800d95e:	4602      	mov	r2, r0
 800d960:	21e4      	movs	r1, #228	@ 0xe4
 800d962:	485c      	ldr	r0, [pc, #368]	@ (800dad4 <__gethex+0x2b8>)
 800d964:	f7ff fec0 	bl	800d6e8 <__assert_func>
 800d968:	3101      	adds	r1, #1
 800d96a:	105b      	asrs	r3, r3, #1
 800d96c:	e7ef      	b.n	800d94e <__gethex+0x132>
 800d96e:	f100 0a14 	add.w	sl, r0, #20
 800d972:	2300      	movs	r3, #0
 800d974:	4655      	mov	r5, sl
 800d976:	469b      	mov	fp, r3
 800d978:	45b1      	cmp	r9, r6
 800d97a:	d337      	bcc.n	800d9ec <__gethex+0x1d0>
 800d97c:	f845 bb04 	str.w	fp, [r5], #4
 800d980:	eba5 050a 	sub.w	r5, r5, sl
 800d984:	10ad      	asrs	r5, r5, #2
 800d986:	6125      	str	r5, [r4, #16]
 800d988:	4658      	mov	r0, fp
 800d98a:	f7fe fa69 	bl	800be60 <__hi0bits>
 800d98e:	016d      	lsls	r5, r5, #5
 800d990:	f8d8 6000 	ldr.w	r6, [r8]
 800d994:	1a2d      	subs	r5, r5, r0
 800d996:	42b5      	cmp	r5, r6
 800d998:	dd54      	ble.n	800da44 <__gethex+0x228>
 800d99a:	1bad      	subs	r5, r5, r6
 800d99c:	4629      	mov	r1, r5
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f7fe fdf2 	bl	800c588 <__any_on>
 800d9a4:	4681      	mov	r9, r0
 800d9a6:	b178      	cbz	r0, 800d9c8 <__gethex+0x1ac>
 800d9a8:	1e6b      	subs	r3, r5, #1
 800d9aa:	1159      	asrs	r1, r3, #5
 800d9ac:	f003 021f 	and.w	r2, r3, #31
 800d9b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d9b4:	f04f 0901 	mov.w	r9, #1
 800d9b8:	fa09 f202 	lsl.w	r2, r9, r2
 800d9bc:	420a      	tst	r2, r1
 800d9be:	d003      	beq.n	800d9c8 <__gethex+0x1ac>
 800d9c0:	454b      	cmp	r3, r9
 800d9c2:	dc36      	bgt.n	800da32 <__gethex+0x216>
 800d9c4:	f04f 0902 	mov.w	r9, #2
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f7ff febe 	bl	800d74c <rshift>
 800d9d0:	442f      	add	r7, r5
 800d9d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9d6:	42bb      	cmp	r3, r7
 800d9d8:	da42      	bge.n	800da60 <__gethex+0x244>
 800d9da:	9801      	ldr	r0, [sp, #4]
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f7fe f98d 	bl	800bcfc <_Bfree>
 800d9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	6013      	str	r3, [r2, #0]
 800d9e8:	25a3      	movs	r5, #163	@ 0xa3
 800d9ea:	e793      	b.n	800d914 <__gethex+0xf8>
 800d9ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d9f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d9f2:	d012      	beq.n	800da1a <__gethex+0x1fe>
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	d104      	bne.n	800da02 <__gethex+0x1e6>
 800d9f8:	f845 bb04 	str.w	fp, [r5], #4
 800d9fc:	f04f 0b00 	mov.w	fp, #0
 800da00:	465b      	mov	r3, fp
 800da02:	7830      	ldrb	r0, [r6, #0]
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	f7ff fef3 	bl	800d7f0 <__hexdig_fun>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	f000 000f 	and.w	r0, r0, #15
 800da10:	4098      	lsls	r0, r3
 800da12:	ea4b 0b00 	orr.w	fp, fp, r0
 800da16:	3304      	adds	r3, #4
 800da18:	e7ae      	b.n	800d978 <__gethex+0x15c>
 800da1a:	45b1      	cmp	r9, r6
 800da1c:	d8ea      	bhi.n	800d9f4 <__gethex+0x1d8>
 800da1e:	492b      	ldr	r1, [pc, #172]	@ (800dacc <__gethex+0x2b0>)
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	2201      	movs	r2, #1
 800da24:	4630      	mov	r0, r6
 800da26:	f7ff fe25 	bl	800d674 <strncmp>
 800da2a:	9b03      	ldr	r3, [sp, #12]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d1e1      	bne.n	800d9f4 <__gethex+0x1d8>
 800da30:	e7a2      	b.n	800d978 <__gethex+0x15c>
 800da32:	1ea9      	subs	r1, r5, #2
 800da34:	4620      	mov	r0, r4
 800da36:	f7fe fda7 	bl	800c588 <__any_on>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0c2      	beq.n	800d9c4 <__gethex+0x1a8>
 800da3e:	f04f 0903 	mov.w	r9, #3
 800da42:	e7c1      	b.n	800d9c8 <__gethex+0x1ac>
 800da44:	da09      	bge.n	800da5a <__gethex+0x23e>
 800da46:	1b75      	subs	r5, r6, r5
 800da48:	4621      	mov	r1, r4
 800da4a:	9801      	ldr	r0, [sp, #4]
 800da4c:	462a      	mov	r2, r5
 800da4e:	f7fe fb65 	bl	800c11c <__lshift>
 800da52:	1b7f      	subs	r7, r7, r5
 800da54:	4604      	mov	r4, r0
 800da56:	f100 0a14 	add.w	sl, r0, #20
 800da5a:	f04f 0900 	mov.w	r9, #0
 800da5e:	e7b8      	b.n	800d9d2 <__gethex+0x1b6>
 800da60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da64:	42bd      	cmp	r5, r7
 800da66:	dd6f      	ble.n	800db48 <__gethex+0x32c>
 800da68:	1bed      	subs	r5, r5, r7
 800da6a:	42ae      	cmp	r6, r5
 800da6c:	dc34      	bgt.n	800dad8 <__gethex+0x2bc>
 800da6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da72:	2b02      	cmp	r3, #2
 800da74:	d022      	beq.n	800dabc <__gethex+0x2a0>
 800da76:	2b03      	cmp	r3, #3
 800da78:	d024      	beq.n	800dac4 <__gethex+0x2a8>
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d115      	bne.n	800daaa <__gethex+0x28e>
 800da7e:	42ae      	cmp	r6, r5
 800da80:	d113      	bne.n	800daaa <__gethex+0x28e>
 800da82:	2e01      	cmp	r6, #1
 800da84:	d10b      	bne.n	800da9e <__gethex+0x282>
 800da86:	9a02      	ldr	r2, [sp, #8]
 800da88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	2301      	movs	r3, #1
 800da90:	6123      	str	r3, [r4, #16]
 800da92:	f8ca 3000 	str.w	r3, [sl]
 800da96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da98:	2562      	movs	r5, #98	@ 0x62
 800da9a:	601c      	str	r4, [r3, #0]
 800da9c:	e73a      	b.n	800d914 <__gethex+0xf8>
 800da9e:	1e71      	subs	r1, r6, #1
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7fe fd71 	bl	800c588 <__any_on>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1ed      	bne.n	800da86 <__gethex+0x26a>
 800daaa:	9801      	ldr	r0, [sp, #4]
 800daac:	4621      	mov	r1, r4
 800daae:	f7fe f925 	bl	800bcfc <_Bfree>
 800dab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dab4:	2300      	movs	r3, #0
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	2550      	movs	r5, #80	@ 0x50
 800daba:	e72b      	b.n	800d914 <__gethex+0xf8>
 800dabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f3      	bne.n	800daaa <__gethex+0x28e>
 800dac2:	e7e0      	b.n	800da86 <__gethex+0x26a>
 800dac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1dd      	bne.n	800da86 <__gethex+0x26a>
 800daca:	e7ee      	b.n	800daaa <__gethex+0x28e>
 800dacc:	0800e59f 	.word	0x0800e59f
 800dad0:	0800e535 	.word	0x0800e535
 800dad4:	0800e5f6 	.word	0x0800e5f6
 800dad8:	1e6f      	subs	r7, r5, #1
 800dada:	f1b9 0f00 	cmp.w	r9, #0
 800dade:	d130      	bne.n	800db42 <__gethex+0x326>
 800dae0:	b127      	cbz	r7, 800daec <__gethex+0x2d0>
 800dae2:	4639      	mov	r1, r7
 800dae4:	4620      	mov	r0, r4
 800dae6:	f7fe fd4f 	bl	800c588 <__any_on>
 800daea:	4681      	mov	r9, r0
 800daec:	117a      	asrs	r2, r7, #5
 800daee:	2301      	movs	r3, #1
 800daf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800daf4:	f007 071f 	and.w	r7, r7, #31
 800daf8:	40bb      	lsls	r3, r7
 800dafa:	4213      	tst	r3, r2
 800dafc:	4629      	mov	r1, r5
 800dafe:	4620      	mov	r0, r4
 800db00:	bf18      	it	ne
 800db02:	f049 0902 	orrne.w	r9, r9, #2
 800db06:	f7ff fe21 	bl	800d74c <rshift>
 800db0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db0e:	1b76      	subs	r6, r6, r5
 800db10:	2502      	movs	r5, #2
 800db12:	f1b9 0f00 	cmp.w	r9, #0
 800db16:	d047      	beq.n	800dba8 <__gethex+0x38c>
 800db18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db1c:	2b02      	cmp	r3, #2
 800db1e:	d015      	beq.n	800db4c <__gethex+0x330>
 800db20:	2b03      	cmp	r3, #3
 800db22:	d017      	beq.n	800db54 <__gethex+0x338>
 800db24:	2b01      	cmp	r3, #1
 800db26:	d109      	bne.n	800db3c <__gethex+0x320>
 800db28:	f019 0f02 	tst.w	r9, #2
 800db2c:	d006      	beq.n	800db3c <__gethex+0x320>
 800db2e:	f8da 3000 	ldr.w	r3, [sl]
 800db32:	ea49 0903 	orr.w	r9, r9, r3
 800db36:	f019 0f01 	tst.w	r9, #1
 800db3a:	d10e      	bne.n	800db5a <__gethex+0x33e>
 800db3c:	f045 0510 	orr.w	r5, r5, #16
 800db40:	e032      	b.n	800dba8 <__gethex+0x38c>
 800db42:	f04f 0901 	mov.w	r9, #1
 800db46:	e7d1      	b.n	800daec <__gethex+0x2d0>
 800db48:	2501      	movs	r5, #1
 800db4a:	e7e2      	b.n	800db12 <__gethex+0x2f6>
 800db4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db4e:	f1c3 0301 	rsb	r3, r3, #1
 800db52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0f0      	beq.n	800db3c <__gethex+0x320>
 800db5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db5e:	f104 0314 	add.w	r3, r4, #20
 800db62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db6a:	f04f 0c00 	mov.w	ip, #0
 800db6e:	4618      	mov	r0, r3
 800db70:	f853 2b04 	ldr.w	r2, [r3], #4
 800db74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800db78:	d01b      	beq.n	800dbb2 <__gethex+0x396>
 800db7a:	3201      	adds	r2, #1
 800db7c:	6002      	str	r2, [r0, #0]
 800db7e:	2d02      	cmp	r5, #2
 800db80:	f104 0314 	add.w	r3, r4, #20
 800db84:	d13c      	bne.n	800dc00 <__gethex+0x3e4>
 800db86:	f8d8 2000 	ldr.w	r2, [r8]
 800db8a:	3a01      	subs	r2, #1
 800db8c:	42b2      	cmp	r2, r6
 800db8e:	d109      	bne.n	800dba4 <__gethex+0x388>
 800db90:	1171      	asrs	r1, r6, #5
 800db92:	2201      	movs	r2, #1
 800db94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db98:	f006 061f 	and.w	r6, r6, #31
 800db9c:	fa02 f606 	lsl.w	r6, r2, r6
 800dba0:	421e      	tst	r6, r3
 800dba2:	d13a      	bne.n	800dc1a <__gethex+0x3fe>
 800dba4:	f045 0520 	orr.w	r5, r5, #32
 800dba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbaa:	601c      	str	r4, [r3, #0]
 800dbac:	9b02      	ldr	r3, [sp, #8]
 800dbae:	601f      	str	r7, [r3, #0]
 800dbb0:	e6b0      	b.n	800d914 <__gethex+0xf8>
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dbb8:	d8d9      	bhi.n	800db6e <__gethex+0x352>
 800dbba:	68a3      	ldr	r3, [r4, #8]
 800dbbc:	459b      	cmp	fp, r3
 800dbbe:	db17      	blt.n	800dbf0 <__gethex+0x3d4>
 800dbc0:	6861      	ldr	r1, [r4, #4]
 800dbc2:	9801      	ldr	r0, [sp, #4]
 800dbc4:	3101      	adds	r1, #1
 800dbc6:	f7fe f859 	bl	800bc7c <_Balloc>
 800dbca:	4681      	mov	r9, r0
 800dbcc:	b918      	cbnz	r0, 800dbd6 <__gethex+0x3ba>
 800dbce:	4b1a      	ldr	r3, [pc, #104]	@ (800dc38 <__gethex+0x41c>)
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	2184      	movs	r1, #132	@ 0x84
 800dbd4:	e6c5      	b.n	800d962 <__gethex+0x146>
 800dbd6:	6922      	ldr	r2, [r4, #16]
 800dbd8:	3202      	adds	r2, #2
 800dbda:	f104 010c 	add.w	r1, r4, #12
 800dbde:	0092      	lsls	r2, r2, #2
 800dbe0:	300c      	adds	r0, #12
 800dbe2:	f7ff fd69 	bl	800d6b8 <memcpy>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	9801      	ldr	r0, [sp, #4]
 800dbea:	f7fe f887 	bl	800bcfc <_Bfree>
 800dbee:	464c      	mov	r4, r9
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbf8:	6122      	str	r2, [r4, #16]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	615a      	str	r2, [r3, #20]
 800dbfe:	e7be      	b.n	800db7e <__gethex+0x362>
 800dc00:	6922      	ldr	r2, [r4, #16]
 800dc02:	455a      	cmp	r2, fp
 800dc04:	dd0b      	ble.n	800dc1e <__gethex+0x402>
 800dc06:	2101      	movs	r1, #1
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f7ff fd9f 	bl	800d74c <rshift>
 800dc0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc12:	3701      	adds	r7, #1
 800dc14:	42bb      	cmp	r3, r7
 800dc16:	f6ff aee0 	blt.w	800d9da <__gethex+0x1be>
 800dc1a:	2501      	movs	r5, #1
 800dc1c:	e7c2      	b.n	800dba4 <__gethex+0x388>
 800dc1e:	f016 061f 	ands.w	r6, r6, #31
 800dc22:	d0fa      	beq.n	800dc1a <__gethex+0x3fe>
 800dc24:	4453      	add	r3, sl
 800dc26:	f1c6 0620 	rsb	r6, r6, #32
 800dc2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc2e:	f7fe f917 	bl	800be60 <__hi0bits>
 800dc32:	42b0      	cmp	r0, r6
 800dc34:	dbe7      	blt.n	800dc06 <__gethex+0x3ea>
 800dc36:	e7f0      	b.n	800dc1a <__gethex+0x3fe>
 800dc38:	0800e535 	.word	0x0800e535

0800dc3c <L_shift>:
 800dc3c:	f1c2 0208 	rsb	r2, r2, #8
 800dc40:	0092      	lsls	r2, r2, #2
 800dc42:	b570      	push	{r4, r5, r6, lr}
 800dc44:	f1c2 0620 	rsb	r6, r2, #32
 800dc48:	6843      	ldr	r3, [r0, #4]
 800dc4a:	6804      	ldr	r4, [r0, #0]
 800dc4c:	fa03 f506 	lsl.w	r5, r3, r6
 800dc50:	432c      	orrs	r4, r5
 800dc52:	40d3      	lsrs	r3, r2
 800dc54:	6004      	str	r4, [r0, #0]
 800dc56:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc5a:	4288      	cmp	r0, r1
 800dc5c:	d3f4      	bcc.n	800dc48 <L_shift+0xc>
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}

0800dc60 <__match>:
 800dc60:	b530      	push	{r4, r5, lr}
 800dc62:	6803      	ldr	r3, [r0, #0]
 800dc64:	3301      	adds	r3, #1
 800dc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc6a:	b914      	cbnz	r4, 800dc72 <__match+0x12>
 800dc6c:	6003      	str	r3, [r0, #0]
 800dc6e:	2001      	movs	r0, #1
 800dc70:	bd30      	pop	{r4, r5, pc}
 800dc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dc7a:	2d19      	cmp	r5, #25
 800dc7c:	bf98      	it	ls
 800dc7e:	3220      	addls	r2, #32
 800dc80:	42a2      	cmp	r2, r4
 800dc82:	d0f0      	beq.n	800dc66 <__match+0x6>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e7f3      	b.n	800dc70 <__match+0x10>

0800dc88 <__hexnan>:
 800dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	680b      	ldr	r3, [r1, #0]
 800dc8e:	6801      	ldr	r1, [r0, #0]
 800dc90:	115e      	asrs	r6, r3, #5
 800dc92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc96:	f013 031f 	ands.w	r3, r3, #31
 800dc9a:	b087      	sub	sp, #28
 800dc9c:	bf18      	it	ne
 800dc9e:	3604      	addne	r6, #4
 800dca0:	2500      	movs	r5, #0
 800dca2:	1f37      	subs	r7, r6, #4
 800dca4:	4682      	mov	sl, r0
 800dca6:	4690      	mov	r8, r2
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800dcae:	46b9      	mov	r9, r7
 800dcb0:	463c      	mov	r4, r7
 800dcb2:	9502      	str	r5, [sp, #8]
 800dcb4:	46ab      	mov	fp, r5
 800dcb6:	784a      	ldrb	r2, [r1, #1]
 800dcb8:	1c4b      	adds	r3, r1, #1
 800dcba:	9303      	str	r3, [sp, #12]
 800dcbc:	b342      	cbz	r2, 800dd10 <__hexnan+0x88>
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	9105      	str	r1, [sp, #20]
 800dcc2:	9204      	str	r2, [sp, #16]
 800dcc4:	f7ff fd94 	bl	800d7f0 <__hexdig_fun>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d151      	bne.n	800dd70 <__hexnan+0xe8>
 800dccc:	9a04      	ldr	r2, [sp, #16]
 800dcce:	9905      	ldr	r1, [sp, #20]
 800dcd0:	2a20      	cmp	r2, #32
 800dcd2:	d818      	bhi.n	800dd06 <__hexnan+0x7e>
 800dcd4:	9b02      	ldr	r3, [sp, #8]
 800dcd6:	459b      	cmp	fp, r3
 800dcd8:	dd13      	ble.n	800dd02 <__hexnan+0x7a>
 800dcda:	454c      	cmp	r4, r9
 800dcdc:	d206      	bcs.n	800dcec <__hexnan+0x64>
 800dcde:	2d07      	cmp	r5, #7
 800dce0:	dc04      	bgt.n	800dcec <__hexnan+0x64>
 800dce2:	462a      	mov	r2, r5
 800dce4:	4649      	mov	r1, r9
 800dce6:	4620      	mov	r0, r4
 800dce8:	f7ff ffa8 	bl	800dc3c <L_shift>
 800dcec:	4544      	cmp	r4, r8
 800dcee:	d952      	bls.n	800dd96 <__hexnan+0x10e>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f1a4 0904 	sub.w	r9, r4, #4
 800dcf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcfa:	f8cd b008 	str.w	fp, [sp, #8]
 800dcfe:	464c      	mov	r4, r9
 800dd00:	461d      	mov	r5, r3
 800dd02:	9903      	ldr	r1, [sp, #12]
 800dd04:	e7d7      	b.n	800dcb6 <__hexnan+0x2e>
 800dd06:	2a29      	cmp	r2, #41	@ 0x29
 800dd08:	d157      	bne.n	800ddba <__hexnan+0x132>
 800dd0a:	3102      	adds	r1, #2
 800dd0c:	f8ca 1000 	str.w	r1, [sl]
 800dd10:	f1bb 0f00 	cmp.w	fp, #0
 800dd14:	d051      	beq.n	800ddba <__hexnan+0x132>
 800dd16:	454c      	cmp	r4, r9
 800dd18:	d206      	bcs.n	800dd28 <__hexnan+0xa0>
 800dd1a:	2d07      	cmp	r5, #7
 800dd1c:	dc04      	bgt.n	800dd28 <__hexnan+0xa0>
 800dd1e:	462a      	mov	r2, r5
 800dd20:	4649      	mov	r1, r9
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7ff ff8a 	bl	800dc3c <L_shift>
 800dd28:	4544      	cmp	r4, r8
 800dd2a:	d936      	bls.n	800dd9a <__hexnan+0x112>
 800dd2c:	f1a8 0204 	sub.w	r2, r8, #4
 800dd30:	4623      	mov	r3, r4
 800dd32:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd36:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd3a:	429f      	cmp	r7, r3
 800dd3c:	d2f9      	bcs.n	800dd32 <__hexnan+0xaa>
 800dd3e:	1b3b      	subs	r3, r7, r4
 800dd40:	f023 0303 	bic.w	r3, r3, #3
 800dd44:	3304      	adds	r3, #4
 800dd46:	3401      	adds	r4, #1
 800dd48:	3e03      	subs	r6, #3
 800dd4a:	42b4      	cmp	r4, r6
 800dd4c:	bf88      	it	hi
 800dd4e:	2304      	movhi	r3, #4
 800dd50:	4443      	add	r3, r8
 800dd52:	2200      	movs	r2, #0
 800dd54:	f843 2b04 	str.w	r2, [r3], #4
 800dd58:	429f      	cmp	r7, r3
 800dd5a:	d2fb      	bcs.n	800dd54 <__hexnan+0xcc>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	b91b      	cbnz	r3, 800dd68 <__hexnan+0xe0>
 800dd60:	4547      	cmp	r7, r8
 800dd62:	d128      	bne.n	800ddb6 <__hexnan+0x12e>
 800dd64:	2301      	movs	r3, #1
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	2005      	movs	r0, #5
 800dd6a:	b007      	add	sp, #28
 800dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd70:	3501      	adds	r5, #1
 800dd72:	2d08      	cmp	r5, #8
 800dd74:	f10b 0b01 	add.w	fp, fp, #1
 800dd78:	dd06      	ble.n	800dd88 <__hexnan+0x100>
 800dd7a:	4544      	cmp	r4, r8
 800dd7c:	d9c1      	bls.n	800dd02 <__hexnan+0x7a>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd84:	2501      	movs	r5, #1
 800dd86:	3c04      	subs	r4, #4
 800dd88:	6822      	ldr	r2, [r4, #0]
 800dd8a:	f000 000f 	and.w	r0, r0, #15
 800dd8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd92:	6020      	str	r0, [r4, #0]
 800dd94:	e7b5      	b.n	800dd02 <__hexnan+0x7a>
 800dd96:	2508      	movs	r5, #8
 800dd98:	e7b3      	b.n	800dd02 <__hexnan+0x7a>
 800dd9a:	9b01      	ldr	r3, [sp, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d0dd      	beq.n	800dd5c <__hexnan+0xd4>
 800dda0:	f1c3 0320 	rsb	r3, r3, #32
 800dda4:	f04f 32ff 	mov.w	r2, #4294967295
 800dda8:	40da      	lsrs	r2, r3
 800ddaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ddae:	4013      	ands	r3, r2
 800ddb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ddb4:	e7d2      	b.n	800dd5c <__hexnan+0xd4>
 800ddb6:	3f04      	subs	r7, #4
 800ddb8:	e7d0      	b.n	800dd5c <__hexnan+0xd4>
 800ddba:	2004      	movs	r0, #4
 800ddbc:	e7d5      	b.n	800dd6a <__hexnan+0xe2>

0800ddbe <__ascii_mbtowc>:
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	b901      	cbnz	r1, 800ddc4 <__ascii_mbtowc+0x6>
 800ddc2:	a901      	add	r1, sp, #4
 800ddc4:	b142      	cbz	r2, 800ddd8 <__ascii_mbtowc+0x1a>
 800ddc6:	b14b      	cbz	r3, 800dddc <__ascii_mbtowc+0x1e>
 800ddc8:	7813      	ldrb	r3, [r2, #0]
 800ddca:	600b      	str	r3, [r1, #0]
 800ddcc:	7812      	ldrb	r2, [r2, #0]
 800ddce:	1e10      	subs	r0, r2, #0
 800ddd0:	bf18      	it	ne
 800ddd2:	2001      	movne	r0, #1
 800ddd4:	b002      	add	sp, #8
 800ddd6:	4770      	bx	lr
 800ddd8:	4610      	mov	r0, r2
 800ddda:	e7fb      	b.n	800ddd4 <__ascii_mbtowc+0x16>
 800dddc:	f06f 0001 	mvn.w	r0, #1
 800dde0:	e7f8      	b.n	800ddd4 <__ascii_mbtowc+0x16>

0800dde2 <_realloc_r>:
 800dde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde6:	4607      	mov	r7, r0
 800dde8:	4614      	mov	r4, r2
 800ddea:	460d      	mov	r5, r1
 800ddec:	b921      	cbnz	r1, 800ddf8 <_realloc_r+0x16>
 800ddee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	f7fd beb6 	b.w	800bb64 <_malloc_r>
 800ddf8:	b92a      	cbnz	r2, 800de06 <_realloc_r+0x24>
 800ddfa:	f7fd fe3f 	bl	800ba7c <_free_r>
 800ddfe:	4625      	mov	r5, r4
 800de00:	4628      	mov	r0, r5
 800de02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de06:	f000 f840 	bl	800de8a <_malloc_usable_size_r>
 800de0a:	4284      	cmp	r4, r0
 800de0c:	4606      	mov	r6, r0
 800de0e:	d802      	bhi.n	800de16 <_realloc_r+0x34>
 800de10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de14:	d8f4      	bhi.n	800de00 <_realloc_r+0x1e>
 800de16:	4621      	mov	r1, r4
 800de18:	4638      	mov	r0, r7
 800de1a:	f7fd fea3 	bl	800bb64 <_malloc_r>
 800de1e:	4680      	mov	r8, r0
 800de20:	b908      	cbnz	r0, 800de26 <_realloc_r+0x44>
 800de22:	4645      	mov	r5, r8
 800de24:	e7ec      	b.n	800de00 <_realloc_r+0x1e>
 800de26:	42b4      	cmp	r4, r6
 800de28:	4622      	mov	r2, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	bf28      	it	cs
 800de2e:	4632      	movcs	r2, r6
 800de30:	f7ff fc42 	bl	800d6b8 <memcpy>
 800de34:	4629      	mov	r1, r5
 800de36:	4638      	mov	r0, r7
 800de38:	f7fd fe20 	bl	800ba7c <_free_r>
 800de3c:	e7f1      	b.n	800de22 <_realloc_r+0x40>

0800de3e <__ascii_wctomb>:
 800de3e:	4603      	mov	r3, r0
 800de40:	4608      	mov	r0, r1
 800de42:	b141      	cbz	r1, 800de56 <__ascii_wctomb+0x18>
 800de44:	2aff      	cmp	r2, #255	@ 0xff
 800de46:	d904      	bls.n	800de52 <__ascii_wctomb+0x14>
 800de48:	228a      	movs	r2, #138	@ 0x8a
 800de4a:	601a      	str	r2, [r3, #0]
 800de4c:	f04f 30ff 	mov.w	r0, #4294967295
 800de50:	4770      	bx	lr
 800de52:	700a      	strb	r2, [r1, #0]
 800de54:	2001      	movs	r0, #1
 800de56:	4770      	bx	lr

0800de58 <fiprintf>:
 800de58:	b40e      	push	{r1, r2, r3}
 800de5a:	b503      	push	{r0, r1, lr}
 800de5c:	4601      	mov	r1, r0
 800de5e:	ab03      	add	r3, sp, #12
 800de60:	4805      	ldr	r0, [pc, #20]	@ (800de78 <fiprintf+0x20>)
 800de62:	f853 2b04 	ldr.w	r2, [r3], #4
 800de66:	6800      	ldr	r0, [r0, #0]
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	f000 f83f 	bl	800deec <_vfiprintf_r>
 800de6e:	b002      	add	sp, #8
 800de70:	f85d eb04 	ldr.w	lr, [sp], #4
 800de74:	b003      	add	sp, #12
 800de76:	4770      	bx	lr
 800de78:	2400001c 	.word	0x2400001c

0800de7c <abort>:
 800de7c:	b508      	push	{r3, lr}
 800de7e:	2006      	movs	r0, #6
 800de80:	f000 fa08 	bl	800e294 <raise>
 800de84:	2001      	movs	r0, #1
 800de86:	f7f3 fb4d 	bl	8001524 <_exit>

0800de8a <_malloc_usable_size_r>:
 800de8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8e:	1f18      	subs	r0, r3, #4
 800de90:	2b00      	cmp	r3, #0
 800de92:	bfbc      	itt	lt
 800de94:	580b      	ldrlt	r3, [r1, r0]
 800de96:	18c0      	addlt	r0, r0, r3
 800de98:	4770      	bx	lr

0800de9a <__sfputc_r>:
 800de9a:	6893      	ldr	r3, [r2, #8]
 800de9c:	3b01      	subs	r3, #1
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	b410      	push	{r4}
 800dea2:	6093      	str	r3, [r2, #8]
 800dea4:	da08      	bge.n	800deb8 <__sfputc_r+0x1e>
 800dea6:	6994      	ldr	r4, [r2, #24]
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	db01      	blt.n	800deb0 <__sfputc_r+0x16>
 800deac:	290a      	cmp	r1, #10
 800deae:	d103      	bne.n	800deb8 <__sfputc_r+0x1e>
 800deb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deb4:	f000 b932 	b.w	800e11c <__swbuf_r>
 800deb8:	6813      	ldr	r3, [r2, #0]
 800deba:	1c58      	adds	r0, r3, #1
 800debc:	6010      	str	r0, [r2, #0]
 800debe:	7019      	strb	r1, [r3, #0]
 800dec0:	4608      	mov	r0, r1
 800dec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <__sfputs_r>:
 800dec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deca:	4606      	mov	r6, r0
 800decc:	460f      	mov	r7, r1
 800dece:	4614      	mov	r4, r2
 800ded0:	18d5      	adds	r5, r2, r3
 800ded2:	42ac      	cmp	r4, r5
 800ded4:	d101      	bne.n	800deda <__sfputs_r+0x12>
 800ded6:	2000      	movs	r0, #0
 800ded8:	e007      	b.n	800deea <__sfputs_r+0x22>
 800deda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dede:	463a      	mov	r2, r7
 800dee0:	4630      	mov	r0, r6
 800dee2:	f7ff ffda 	bl	800de9a <__sfputc_r>
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d1f3      	bne.n	800ded2 <__sfputs_r+0xa>
 800deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800deec <_vfiprintf_r>:
 800deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	460d      	mov	r5, r1
 800def2:	b09d      	sub	sp, #116	@ 0x74
 800def4:	4614      	mov	r4, r2
 800def6:	4698      	mov	r8, r3
 800def8:	4606      	mov	r6, r0
 800defa:	b118      	cbz	r0, 800df04 <_vfiprintf_r+0x18>
 800defc:	6a03      	ldr	r3, [r0, #32]
 800defe:	b90b      	cbnz	r3, 800df04 <_vfiprintf_r+0x18>
 800df00:	f7fc feb2 	bl	800ac68 <__sinit>
 800df04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df06:	07d9      	lsls	r1, r3, #31
 800df08:	d405      	bmi.n	800df16 <_vfiprintf_r+0x2a>
 800df0a:	89ab      	ldrh	r3, [r5, #12]
 800df0c:	059a      	lsls	r2, r3, #22
 800df0e:	d402      	bmi.n	800df16 <_vfiprintf_r+0x2a>
 800df10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df12:	f7fc ffc2 	bl	800ae9a <__retarget_lock_acquire_recursive>
 800df16:	89ab      	ldrh	r3, [r5, #12]
 800df18:	071b      	lsls	r3, r3, #28
 800df1a:	d501      	bpl.n	800df20 <_vfiprintf_r+0x34>
 800df1c:	692b      	ldr	r3, [r5, #16]
 800df1e:	b99b      	cbnz	r3, 800df48 <_vfiprintf_r+0x5c>
 800df20:	4629      	mov	r1, r5
 800df22:	4630      	mov	r0, r6
 800df24:	f000 f938 	bl	800e198 <__swsetup_r>
 800df28:	b170      	cbz	r0, 800df48 <_vfiprintf_r+0x5c>
 800df2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df2c:	07dc      	lsls	r4, r3, #31
 800df2e:	d504      	bpl.n	800df3a <_vfiprintf_r+0x4e>
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	b01d      	add	sp, #116	@ 0x74
 800df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	0598      	lsls	r0, r3, #22
 800df3e:	d4f7      	bmi.n	800df30 <_vfiprintf_r+0x44>
 800df40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df42:	f7fc ffab 	bl	800ae9c <__retarget_lock_release_recursive>
 800df46:	e7f3      	b.n	800df30 <_vfiprintf_r+0x44>
 800df48:	2300      	movs	r3, #0
 800df4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df4c:	2320      	movs	r3, #32
 800df4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df52:	f8cd 800c 	str.w	r8, [sp, #12]
 800df56:	2330      	movs	r3, #48	@ 0x30
 800df58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e108 <_vfiprintf_r+0x21c>
 800df5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df60:	f04f 0901 	mov.w	r9, #1
 800df64:	4623      	mov	r3, r4
 800df66:	469a      	mov	sl, r3
 800df68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df6c:	b10a      	cbz	r2, 800df72 <_vfiprintf_r+0x86>
 800df6e:	2a25      	cmp	r2, #37	@ 0x25
 800df70:	d1f9      	bne.n	800df66 <_vfiprintf_r+0x7a>
 800df72:	ebba 0b04 	subs.w	fp, sl, r4
 800df76:	d00b      	beq.n	800df90 <_vfiprintf_r+0xa4>
 800df78:	465b      	mov	r3, fp
 800df7a:	4622      	mov	r2, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	4630      	mov	r0, r6
 800df80:	f7ff ffa2 	bl	800dec8 <__sfputs_r>
 800df84:	3001      	adds	r0, #1
 800df86:	f000 80a7 	beq.w	800e0d8 <_vfiprintf_r+0x1ec>
 800df8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df8c:	445a      	add	r2, fp
 800df8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df90:	f89a 3000 	ldrb.w	r3, [sl]
 800df94:	2b00      	cmp	r3, #0
 800df96:	f000 809f 	beq.w	800e0d8 <_vfiprintf_r+0x1ec>
 800df9a:	2300      	movs	r3, #0
 800df9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfa4:	f10a 0a01 	add.w	sl, sl, #1
 800dfa8:	9304      	str	r3, [sp, #16]
 800dfaa:	9307      	str	r3, [sp, #28]
 800dfac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfb2:	4654      	mov	r4, sl
 800dfb4:	2205      	movs	r2, #5
 800dfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfba:	4853      	ldr	r0, [pc, #332]	@ (800e108 <_vfiprintf_r+0x21c>)
 800dfbc:	f7f2 f990 	bl	80002e0 <memchr>
 800dfc0:	9a04      	ldr	r2, [sp, #16]
 800dfc2:	b9d8      	cbnz	r0, 800dffc <_vfiprintf_r+0x110>
 800dfc4:	06d1      	lsls	r1, r2, #27
 800dfc6:	bf44      	itt	mi
 800dfc8:	2320      	movmi	r3, #32
 800dfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfce:	0713      	lsls	r3, r2, #28
 800dfd0:	bf44      	itt	mi
 800dfd2:	232b      	movmi	r3, #43	@ 0x2b
 800dfd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfd8:	f89a 3000 	ldrb.w	r3, [sl]
 800dfdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfde:	d015      	beq.n	800e00c <_vfiprintf_r+0x120>
 800dfe0:	9a07      	ldr	r2, [sp, #28]
 800dfe2:	4654      	mov	r4, sl
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f04f 0c0a 	mov.w	ip, #10
 800dfea:	4621      	mov	r1, r4
 800dfec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dff0:	3b30      	subs	r3, #48	@ 0x30
 800dff2:	2b09      	cmp	r3, #9
 800dff4:	d94b      	bls.n	800e08e <_vfiprintf_r+0x1a2>
 800dff6:	b1b0      	cbz	r0, 800e026 <_vfiprintf_r+0x13a>
 800dff8:	9207      	str	r2, [sp, #28]
 800dffa:	e014      	b.n	800e026 <_vfiprintf_r+0x13a>
 800dffc:	eba0 0308 	sub.w	r3, r0, r8
 800e000:	fa09 f303 	lsl.w	r3, r9, r3
 800e004:	4313      	orrs	r3, r2
 800e006:	9304      	str	r3, [sp, #16]
 800e008:	46a2      	mov	sl, r4
 800e00a:	e7d2      	b.n	800dfb2 <_vfiprintf_r+0xc6>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1d19      	adds	r1, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	9103      	str	r1, [sp, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	bfbb      	ittet	lt
 800e018:	425b      	neglt	r3, r3
 800e01a:	f042 0202 	orrlt.w	r2, r2, #2
 800e01e:	9307      	strge	r3, [sp, #28]
 800e020:	9307      	strlt	r3, [sp, #28]
 800e022:	bfb8      	it	lt
 800e024:	9204      	strlt	r2, [sp, #16]
 800e026:	7823      	ldrb	r3, [r4, #0]
 800e028:	2b2e      	cmp	r3, #46	@ 0x2e
 800e02a:	d10a      	bne.n	800e042 <_vfiprintf_r+0x156>
 800e02c:	7863      	ldrb	r3, [r4, #1]
 800e02e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e030:	d132      	bne.n	800e098 <_vfiprintf_r+0x1ac>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	1d1a      	adds	r2, r3, #4
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	9203      	str	r2, [sp, #12]
 800e03a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e03e:	3402      	adds	r4, #2
 800e040:	9305      	str	r3, [sp, #20]
 800e042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e118 <_vfiprintf_r+0x22c>
 800e046:	7821      	ldrb	r1, [r4, #0]
 800e048:	2203      	movs	r2, #3
 800e04a:	4650      	mov	r0, sl
 800e04c:	f7f2 f948 	bl	80002e0 <memchr>
 800e050:	b138      	cbz	r0, 800e062 <_vfiprintf_r+0x176>
 800e052:	9b04      	ldr	r3, [sp, #16]
 800e054:	eba0 000a 	sub.w	r0, r0, sl
 800e058:	2240      	movs	r2, #64	@ 0x40
 800e05a:	4082      	lsls	r2, r0
 800e05c:	4313      	orrs	r3, r2
 800e05e:	3401      	adds	r4, #1
 800e060:	9304      	str	r3, [sp, #16]
 800e062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e066:	4829      	ldr	r0, [pc, #164]	@ (800e10c <_vfiprintf_r+0x220>)
 800e068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e06c:	2206      	movs	r2, #6
 800e06e:	f7f2 f937 	bl	80002e0 <memchr>
 800e072:	2800      	cmp	r0, #0
 800e074:	d03f      	beq.n	800e0f6 <_vfiprintf_r+0x20a>
 800e076:	4b26      	ldr	r3, [pc, #152]	@ (800e110 <_vfiprintf_r+0x224>)
 800e078:	bb1b      	cbnz	r3, 800e0c2 <_vfiprintf_r+0x1d6>
 800e07a:	9b03      	ldr	r3, [sp, #12]
 800e07c:	3307      	adds	r3, #7
 800e07e:	f023 0307 	bic.w	r3, r3, #7
 800e082:	3308      	adds	r3, #8
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e088:	443b      	add	r3, r7
 800e08a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e08c:	e76a      	b.n	800df64 <_vfiprintf_r+0x78>
 800e08e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e092:	460c      	mov	r4, r1
 800e094:	2001      	movs	r0, #1
 800e096:	e7a8      	b.n	800dfea <_vfiprintf_r+0xfe>
 800e098:	2300      	movs	r3, #0
 800e09a:	3401      	adds	r4, #1
 800e09c:	9305      	str	r3, [sp, #20]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	f04f 0c0a 	mov.w	ip, #10
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0aa:	3a30      	subs	r2, #48	@ 0x30
 800e0ac:	2a09      	cmp	r2, #9
 800e0ae:	d903      	bls.n	800e0b8 <_vfiprintf_r+0x1cc>
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d0c6      	beq.n	800e042 <_vfiprintf_r+0x156>
 800e0b4:	9105      	str	r1, [sp, #20]
 800e0b6:	e7c4      	b.n	800e042 <_vfiprintf_r+0x156>
 800e0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0bc:	4604      	mov	r4, r0
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e7f0      	b.n	800e0a4 <_vfiprintf_r+0x1b8>
 800e0c2:	ab03      	add	r3, sp, #12
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4b12      	ldr	r3, [pc, #72]	@ (800e114 <_vfiprintf_r+0x228>)
 800e0ca:	a904      	add	r1, sp, #16
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f7fb ff93 	bl	8009ff8 <_printf_float>
 800e0d2:	4607      	mov	r7, r0
 800e0d4:	1c78      	adds	r0, r7, #1
 800e0d6:	d1d6      	bne.n	800e086 <_vfiprintf_r+0x19a>
 800e0d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0da:	07d9      	lsls	r1, r3, #31
 800e0dc:	d405      	bmi.n	800e0ea <_vfiprintf_r+0x1fe>
 800e0de:	89ab      	ldrh	r3, [r5, #12]
 800e0e0:	059a      	lsls	r2, r3, #22
 800e0e2:	d402      	bmi.n	800e0ea <_vfiprintf_r+0x1fe>
 800e0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0e6:	f7fc fed9 	bl	800ae9c <__retarget_lock_release_recursive>
 800e0ea:	89ab      	ldrh	r3, [r5, #12]
 800e0ec:	065b      	lsls	r3, r3, #25
 800e0ee:	f53f af1f 	bmi.w	800df30 <_vfiprintf_r+0x44>
 800e0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0f4:	e71e      	b.n	800df34 <_vfiprintf_r+0x48>
 800e0f6:	ab03      	add	r3, sp, #12
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	462a      	mov	r2, r5
 800e0fc:	4b05      	ldr	r3, [pc, #20]	@ (800e114 <_vfiprintf_r+0x228>)
 800e0fe:	a904      	add	r1, sp, #16
 800e100:	4630      	mov	r0, r6
 800e102:	f7fc fa01 	bl	800a508 <_printf_i>
 800e106:	e7e4      	b.n	800e0d2 <_vfiprintf_r+0x1e6>
 800e108:	0800e5a1 	.word	0x0800e5a1
 800e10c:	0800e5ab 	.word	0x0800e5ab
 800e110:	08009ff9 	.word	0x08009ff9
 800e114:	0800dec9 	.word	0x0800dec9
 800e118:	0800e5a7 	.word	0x0800e5a7

0800e11c <__swbuf_r>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	460e      	mov	r6, r1
 800e120:	4614      	mov	r4, r2
 800e122:	4605      	mov	r5, r0
 800e124:	b118      	cbz	r0, 800e12e <__swbuf_r+0x12>
 800e126:	6a03      	ldr	r3, [r0, #32]
 800e128:	b90b      	cbnz	r3, 800e12e <__swbuf_r+0x12>
 800e12a:	f7fc fd9d 	bl	800ac68 <__sinit>
 800e12e:	69a3      	ldr	r3, [r4, #24]
 800e130:	60a3      	str	r3, [r4, #8]
 800e132:	89a3      	ldrh	r3, [r4, #12]
 800e134:	071a      	lsls	r2, r3, #28
 800e136:	d501      	bpl.n	800e13c <__swbuf_r+0x20>
 800e138:	6923      	ldr	r3, [r4, #16]
 800e13a:	b943      	cbnz	r3, 800e14e <__swbuf_r+0x32>
 800e13c:	4621      	mov	r1, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	f000 f82a 	bl	800e198 <__swsetup_r>
 800e144:	b118      	cbz	r0, 800e14e <__swbuf_r+0x32>
 800e146:	f04f 37ff 	mov.w	r7, #4294967295
 800e14a:	4638      	mov	r0, r7
 800e14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	6922      	ldr	r2, [r4, #16]
 800e152:	1a98      	subs	r0, r3, r2
 800e154:	6963      	ldr	r3, [r4, #20]
 800e156:	b2f6      	uxtb	r6, r6
 800e158:	4283      	cmp	r3, r0
 800e15a:	4637      	mov	r7, r6
 800e15c:	dc05      	bgt.n	800e16a <__swbuf_r+0x4e>
 800e15e:	4621      	mov	r1, r4
 800e160:	4628      	mov	r0, r5
 800e162:	f7ff fa45 	bl	800d5f0 <_fflush_r>
 800e166:	2800      	cmp	r0, #0
 800e168:	d1ed      	bne.n	800e146 <__swbuf_r+0x2a>
 800e16a:	68a3      	ldr	r3, [r4, #8]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	60a3      	str	r3, [r4, #8]
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	6022      	str	r2, [r4, #0]
 800e176:	701e      	strb	r6, [r3, #0]
 800e178:	6962      	ldr	r2, [r4, #20]
 800e17a:	1c43      	adds	r3, r0, #1
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d004      	beq.n	800e18a <__swbuf_r+0x6e>
 800e180:	89a3      	ldrh	r3, [r4, #12]
 800e182:	07db      	lsls	r3, r3, #31
 800e184:	d5e1      	bpl.n	800e14a <__swbuf_r+0x2e>
 800e186:	2e0a      	cmp	r6, #10
 800e188:	d1df      	bne.n	800e14a <__swbuf_r+0x2e>
 800e18a:	4621      	mov	r1, r4
 800e18c:	4628      	mov	r0, r5
 800e18e:	f7ff fa2f 	bl	800d5f0 <_fflush_r>
 800e192:	2800      	cmp	r0, #0
 800e194:	d0d9      	beq.n	800e14a <__swbuf_r+0x2e>
 800e196:	e7d6      	b.n	800e146 <__swbuf_r+0x2a>

0800e198 <__swsetup_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	4b29      	ldr	r3, [pc, #164]	@ (800e240 <__swsetup_r+0xa8>)
 800e19c:	4605      	mov	r5, r0
 800e19e:	6818      	ldr	r0, [r3, #0]
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	b118      	cbz	r0, 800e1ac <__swsetup_r+0x14>
 800e1a4:	6a03      	ldr	r3, [r0, #32]
 800e1a6:	b90b      	cbnz	r3, 800e1ac <__swsetup_r+0x14>
 800e1a8:	f7fc fd5e 	bl	800ac68 <__sinit>
 800e1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1b0:	0719      	lsls	r1, r3, #28
 800e1b2:	d422      	bmi.n	800e1fa <__swsetup_r+0x62>
 800e1b4:	06da      	lsls	r2, r3, #27
 800e1b6:	d407      	bmi.n	800e1c8 <__swsetup_r+0x30>
 800e1b8:	2209      	movs	r2, #9
 800e1ba:	602a      	str	r2, [r5, #0]
 800e1bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1c0:	81a3      	strh	r3, [r4, #12]
 800e1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c6:	e033      	b.n	800e230 <__swsetup_r+0x98>
 800e1c8:	0758      	lsls	r0, r3, #29
 800e1ca:	d512      	bpl.n	800e1f2 <__swsetup_r+0x5a>
 800e1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1ce:	b141      	cbz	r1, 800e1e2 <__swsetup_r+0x4a>
 800e1d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1d4:	4299      	cmp	r1, r3
 800e1d6:	d002      	beq.n	800e1de <__swsetup_r+0x46>
 800e1d8:	4628      	mov	r0, r5
 800e1da:	f7fd fc4f 	bl	800ba7c <_free_r>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e1e8:	81a3      	strh	r3, [r4, #12]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	6063      	str	r3, [r4, #4]
 800e1ee:	6923      	ldr	r3, [r4, #16]
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	f043 0308 	orr.w	r3, r3, #8
 800e1f8:	81a3      	strh	r3, [r4, #12]
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	b94b      	cbnz	r3, 800e212 <__swsetup_r+0x7a>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e208:	d003      	beq.n	800e212 <__swsetup_r+0x7a>
 800e20a:	4621      	mov	r1, r4
 800e20c:	4628      	mov	r0, r5
 800e20e:	f000 f883 	bl	800e318 <__smakebuf_r>
 800e212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e216:	f013 0201 	ands.w	r2, r3, #1
 800e21a:	d00a      	beq.n	800e232 <__swsetup_r+0x9a>
 800e21c:	2200      	movs	r2, #0
 800e21e:	60a2      	str	r2, [r4, #8]
 800e220:	6962      	ldr	r2, [r4, #20]
 800e222:	4252      	negs	r2, r2
 800e224:	61a2      	str	r2, [r4, #24]
 800e226:	6922      	ldr	r2, [r4, #16]
 800e228:	b942      	cbnz	r2, 800e23c <__swsetup_r+0xa4>
 800e22a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e22e:	d1c5      	bne.n	800e1bc <__swsetup_r+0x24>
 800e230:	bd38      	pop	{r3, r4, r5, pc}
 800e232:	0799      	lsls	r1, r3, #30
 800e234:	bf58      	it	pl
 800e236:	6962      	ldrpl	r2, [r4, #20]
 800e238:	60a2      	str	r2, [r4, #8]
 800e23a:	e7f4      	b.n	800e226 <__swsetup_r+0x8e>
 800e23c:	2000      	movs	r0, #0
 800e23e:	e7f7      	b.n	800e230 <__swsetup_r+0x98>
 800e240:	2400001c 	.word	0x2400001c

0800e244 <_raise_r>:
 800e244:	291f      	cmp	r1, #31
 800e246:	b538      	push	{r3, r4, r5, lr}
 800e248:	4605      	mov	r5, r0
 800e24a:	460c      	mov	r4, r1
 800e24c:	d904      	bls.n	800e258 <_raise_r+0x14>
 800e24e:	2316      	movs	r3, #22
 800e250:	6003      	str	r3, [r0, #0]
 800e252:	f04f 30ff 	mov.w	r0, #4294967295
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e25a:	b112      	cbz	r2, 800e262 <_raise_r+0x1e>
 800e25c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e260:	b94b      	cbnz	r3, 800e276 <_raise_r+0x32>
 800e262:	4628      	mov	r0, r5
 800e264:	f000 f830 	bl	800e2c8 <_getpid_r>
 800e268:	4622      	mov	r2, r4
 800e26a:	4601      	mov	r1, r0
 800e26c:	4628      	mov	r0, r5
 800e26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e272:	f000 b817 	b.w	800e2a4 <_kill_r>
 800e276:	2b01      	cmp	r3, #1
 800e278:	d00a      	beq.n	800e290 <_raise_r+0x4c>
 800e27a:	1c59      	adds	r1, r3, #1
 800e27c:	d103      	bne.n	800e286 <_raise_r+0x42>
 800e27e:	2316      	movs	r3, #22
 800e280:	6003      	str	r3, [r0, #0]
 800e282:	2001      	movs	r0, #1
 800e284:	e7e7      	b.n	800e256 <_raise_r+0x12>
 800e286:	2100      	movs	r1, #0
 800e288:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e28c:	4620      	mov	r0, r4
 800e28e:	4798      	blx	r3
 800e290:	2000      	movs	r0, #0
 800e292:	e7e0      	b.n	800e256 <_raise_r+0x12>

0800e294 <raise>:
 800e294:	4b02      	ldr	r3, [pc, #8]	@ (800e2a0 <raise+0xc>)
 800e296:	4601      	mov	r1, r0
 800e298:	6818      	ldr	r0, [r3, #0]
 800e29a:	f7ff bfd3 	b.w	800e244 <_raise_r>
 800e29e:	bf00      	nop
 800e2a0:	2400001c 	.word	0x2400001c

0800e2a4 <_kill_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	4d07      	ldr	r5, [pc, #28]	@ (800e2c4 <_kill_r+0x20>)
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	f7f3 f927 	bl	8001504 <_kill>
 800e2b6:	1c43      	adds	r3, r0, #1
 800e2b8:	d102      	bne.n	800e2c0 <_kill_r+0x1c>
 800e2ba:	682b      	ldr	r3, [r5, #0]
 800e2bc:	b103      	cbz	r3, 800e2c0 <_kill_r+0x1c>
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
 800e2c2:	bf00      	nop
 800e2c4:	240006c8 	.word	0x240006c8

0800e2c8 <_getpid_r>:
 800e2c8:	f7f3 b914 	b.w	80014f4 <_getpid>

0800e2cc <__swhatbuf_r>:
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d4:	2900      	cmp	r1, #0
 800e2d6:	b096      	sub	sp, #88	@ 0x58
 800e2d8:	4615      	mov	r5, r2
 800e2da:	461e      	mov	r6, r3
 800e2dc:	da0d      	bge.n	800e2fa <__swhatbuf_r+0x2e>
 800e2de:	89a3      	ldrh	r3, [r4, #12]
 800e2e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2e4:	f04f 0100 	mov.w	r1, #0
 800e2e8:	bf14      	ite	ne
 800e2ea:	2340      	movne	r3, #64	@ 0x40
 800e2ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	6031      	str	r1, [r6, #0]
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	b016      	add	sp, #88	@ 0x58
 800e2f8:	bd70      	pop	{r4, r5, r6, pc}
 800e2fa:	466a      	mov	r2, sp
 800e2fc:	f000 f848 	bl	800e390 <_fstat_r>
 800e300:	2800      	cmp	r0, #0
 800e302:	dbec      	blt.n	800e2de <__swhatbuf_r+0x12>
 800e304:	9901      	ldr	r1, [sp, #4]
 800e306:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e30a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e30e:	4259      	negs	r1, r3
 800e310:	4159      	adcs	r1, r3
 800e312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e316:	e7eb      	b.n	800e2f0 <__swhatbuf_r+0x24>

0800e318 <__smakebuf_r>:
 800e318:	898b      	ldrh	r3, [r1, #12]
 800e31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e31c:	079d      	lsls	r5, r3, #30
 800e31e:	4606      	mov	r6, r0
 800e320:	460c      	mov	r4, r1
 800e322:	d507      	bpl.n	800e334 <__smakebuf_r+0x1c>
 800e324:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e328:	6023      	str	r3, [r4, #0]
 800e32a:	6123      	str	r3, [r4, #16]
 800e32c:	2301      	movs	r3, #1
 800e32e:	6163      	str	r3, [r4, #20]
 800e330:	b003      	add	sp, #12
 800e332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e334:	ab01      	add	r3, sp, #4
 800e336:	466a      	mov	r2, sp
 800e338:	f7ff ffc8 	bl	800e2cc <__swhatbuf_r>
 800e33c:	9f00      	ldr	r7, [sp, #0]
 800e33e:	4605      	mov	r5, r0
 800e340:	4639      	mov	r1, r7
 800e342:	4630      	mov	r0, r6
 800e344:	f7fd fc0e 	bl	800bb64 <_malloc_r>
 800e348:	b948      	cbnz	r0, 800e35e <__smakebuf_r+0x46>
 800e34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e34e:	059a      	lsls	r2, r3, #22
 800e350:	d4ee      	bmi.n	800e330 <__smakebuf_r+0x18>
 800e352:	f023 0303 	bic.w	r3, r3, #3
 800e356:	f043 0302 	orr.w	r3, r3, #2
 800e35a:	81a3      	strh	r3, [r4, #12]
 800e35c:	e7e2      	b.n	800e324 <__smakebuf_r+0xc>
 800e35e:	89a3      	ldrh	r3, [r4, #12]
 800e360:	6020      	str	r0, [r4, #0]
 800e362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e366:	81a3      	strh	r3, [r4, #12]
 800e368:	9b01      	ldr	r3, [sp, #4]
 800e36a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e36e:	b15b      	cbz	r3, 800e388 <__smakebuf_r+0x70>
 800e370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e374:	4630      	mov	r0, r6
 800e376:	f000 f81d 	bl	800e3b4 <_isatty_r>
 800e37a:	b128      	cbz	r0, 800e388 <__smakebuf_r+0x70>
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	f023 0303 	bic.w	r3, r3, #3
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	81a3      	strh	r3, [r4, #12]
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	431d      	orrs	r5, r3
 800e38c:	81a5      	strh	r5, [r4, #12]
 800e38e:	e7cf      	b.n	800e330 <__smakebuf_r+0x18>

0800e390 <_fstat_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	@ (800e3b0 <_fstat_r+0x20>)
 800e394:	2300      	movs	r3, #0
 800e396:	4604      	mov	r4, r0
 800e398:	4608      	mov	r0, r1
 800e39a:	4611      	mov	r1, r2
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	f7f3 f8f5 	bl	800158c <_fstat>
 800e3a2:	1c43      	adds	r3, r0, #1
 800e3a4:	d102      	bne.n	800e3ac <_fstat_r+0x1c>
 800e3a6:	682b      	ldr	r3, [r5, #0]
 800e3a8:	b103      	cbz	r3, 800e3ac <_fstat_r+0x1c>
 800e3aa:	6023      	str	r3, [r4, #0]
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
 800e3ae:	bf00      	nop
 800e3b0:	240006c8 	.word	0x240006c8

0800e3b4 <_isatty_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4d06      	ldr	r5, [pc, #24]	@ (800e3d0 <_isatty_r+0x1c>)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	4608      	mov	r0, r1
 800e3be:	602b      	str	r3, [r5, #0]
 800e3c0:	f7f3 f8f4 	bl	80015ac <_isatty>
 800e3c4:	1c43      	adds	r3, r0, #1
 800e3c6:	d102      	bne.n	800e3ce <_isatty_r+0x1a>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	b103      	cbz	r3, 800e3ce <_isatty_r+0x1a>
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	bd38      	pop	{r3, r4, r5, pc}
 800e3d0:	240006c8 	.word	0x240006c8

0800e3d4 <_init>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	bf00      	nop
 800e3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3da:	bc08      	pop	{r3}
 800e3dc:	469e      	mov	lr, r3
 800e3de:	4770      	bx	lr

0800e3e0 <_fini>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	bf00      	nop
 800e3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3e6:	bc08      	pop	{r3}
 800e3e8:	469e      	mov	lr, r3
 800e3ea:	4770      	bx	lr
